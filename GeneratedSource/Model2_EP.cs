// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 00:34 on jueves, 12 de octubre de 2023.
	/// </remarks>
	public partial class Model2_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_itemData has executed. Set this to false to force re-execution of Changed_itemData</summary>
		public bool Changed_itemData_isDone;
		/// <summary>True if Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0</summary>
		public bool Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11 has performed initialisation. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8 has performed initialisation. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13</summary>
		public bool Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13</summary>
		public bool Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6</summary>
		public bool Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6</summary>
		public bool Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised;
		/// <summary>True if Changed_ratingData_vint39 has executed. Set this to false to force re-execution of Changed_ratingData_vint39</summary>
		public bool Changed_ratingData_vint39_isDone;
		/// <summary>True if Changed_userData has executed. Set this to false to force re-execution of Changed_userData</summary>
		public bool Changed_userData_isDone;
		/// <summary>True if Changed_vGaussian____10 has executed. Set this to false to force re-execution of Changed_vGaussian____10</summary>
		public bool Changed_vGaussian____10_isDone;
		/// <summary>True if Changed_vGaussian____11 has executed. Set this to false to force re-execution of Changed_vGaussian____11</summary>
		public bool Changed_vGaussian____11_isDone;
		/// <summary>True if Changed_vGaussian____9 has executed. Set this to false to force re-execution of Changed_vGaussian____9</summary>
		public bool Changed_vGaussian____9_isDone;
		/// <summary>True if Changed_vGaussian__26 has executed. Set this to false to force re-execution of Changed_vGaussian__26</summary>
		public bool Changed_vGaussian__26_isDone;
		/// <summary>True if Changed_vGaussian__27 has executed. Set this to false to force re-execution of Changed_vGaussian__27</summary>
		public bool Changed_vGaussian__27_isDone;
		/// <summary>True if Changed_vint39 has executed. Set this to false to force re-execution of Changed_vint39</summary>
		public bool Changed_vint39_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'evidence'</summary>
		public Bernoulli evidence_marginal_F;
		public DistributionStructArray<Gaussian,double> itemBias__0__B;
		public DistributionStructArray<Gaussian,double> itemBias__0__itemitemData_index18__B;
		/// <summary>Message to marginal of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_marginal_F;
		/// <summary>Field backing the itemData property</summary>
		private int[] ItemData;
		/// <summary>Message to marginal of 'itemData'</summary>
		public PointMass<int[]> itemData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__F;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__itemitemData_index18__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__itemitemData_index18__F;
		/// <summary>Message to marginal of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the ratingData property</summary>
		private bool[][] RatingData;
		/// <summary>Message to marginal of 'ratingData'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ratingData_marginal_F;
		public DistributionStructArray<Gaussian,double> userBias__0__B;
		public DistributionStructArray<Gaussian,double> userBias__0__itemuserData_index18__B;
		/// <summary>Message to marginal of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_marginal_F;
		/// <summary>Field backing the userData property</summary>
		private int[] UserData;
		/// <summary>Message to marginal of 'userData'</summary>
		public PointMass<int[]> userData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__itemuserData_index18__B;
		/// <summary>Message to marginal of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__F;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__itemuserData_index18__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__itemuserData_index18__F;
		/// <summary>Message to marginal of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_marginal_F;
		public DistributionStructArray<Gaussian,double>[] vdouble__88_F;
		public Gaussian[] vdouble155_F;
		public Gaussian[][] vdouble155_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] vdouble155_rep_B_toDef;
		/// <summary>Field backing the vGaussian____10 property</summary>
		private Gaussian[][] VGaussian____10;
		/// <summary>Message to marginal of 'vGaussian____10'</summary>
		public PointMass<Gaussian[][]> vGaussian____10_marginal_F;
		/// <summary>Field backing the vGaussian____11 property</summary>
		private Gaussian[][] VGaussian____11;
		/// <summary>Message to marginal of 'vGaussian____11'</summary>
		public PointMass<Gaussian[][]> vGaussian____11_marginal_F;
		/// <summary>Field backing the vGaussian____9 property</summary>
		private Gaussian[][] VGaussian____9;
		/// <summary>Message to marginal of 'vGaussian____9'</summary>
		public PointMass<Gaussian[][]> vGaussian____9_marginal_F;
		/// <summary>Field backing the vGaussian__26 property</summary>
		private Gaussian[] VGaussian__26;
		/// <summary>Message to marginal of 'vGaussian__26'</summary>
		public PointMass<Gaussian[]> vGaussian__26_marginal_F;
		/// <summary>Field backing the vGaussian__27 property</summary>
		private Gaussian[] VGaussian__27;
		/// <summary>Message to marginal of 'vGaussian__27'</summary>
		public PointMass<Gaussian[]> vGaussian__27_marginal_F;
		/// <summary>Field backing the vint39 property</summary>
		private int Vint39;
		/// <summary>Message to marginal of 'vint39'</summary>
		public PointMass<int> vint39_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'itemData'</summary>
		public int[] itemData
		{
			get {
				return this.ItemData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint39)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint39)+" was expected for variable \'itemData\'");
				}
				this.ItemData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'ratingData'</summary>
		public bool[][] ratingData
		{
			get {
				return this.RatingData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint39)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint39)+" was expected for variable \'ratingData\'");
				}
				this.RatingData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ratingData_vint39_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userData'</summary>
		public int[] userData
		{
			get {
				return this.UserData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint39)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint39)+" was expected for variable \'userData\'");
				}
				this.UserData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____10'</summary>
		public Gaussian[][] vGaussian____10
		{
			get {
				return this.VGaussian____10;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'vGaussian____10\'");
				}
				this.VGaussian____10 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_vGaussian____10_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____11'</summary>
		public Gaussian[][] vGaussian____11
		{
			get {
				return this.VGaussian____11;
			}
			set {
				if ((value!=null)&&(value.Length!=50)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+50)+" was expected for variable \'vGaussian____11\'");
				}
				this.VGaussian____11 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian____11_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____9'</summary>
		public Gaussian[][] vGaussian____9
		{
			get {
				return this.VGaussian____9;
			}
			set {
				if ((value!=null)&&(value.Length!=50)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+50)+" was expected for variable \'vGaussian____9\'");
				}
				this.VGaussian____9 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = false;
				this.Changed_vGaussian____9_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isDone = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__26'</summary>
		public Gaussian[] vGaussian__26
		{
			get {
				return this.VGaussian__26;
			}
			set {
				if ((value!=null)&&(value.Length!=50)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+50)+" was expected for variable \'vGaussian__26\'");
				}
				this.VGaussian__26 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian__26_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__27'</summary>
		public Gaussian[] vGaussian__27
		{
			get {
				return this.VGaussian__27;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'vGaussian__27\'");
				}
				this.VGaussian__27 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian__27_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint39'</summary>
		public int vint39
		{
			get {
				return this.Vint39;
			}
			set {
				if (this.Vint39!=value) {
					this.Vint39 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ratingData_vint39_isDone = false;
					this.Changed_vint39_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = false;
					this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = false;
					this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of itemData</summary>
		private void Changed_itemData()
		{
			if (this.Changed_itemData_isDone) {
				return ;
			}
			// Create array for 'itemData_marginal' Forwards messages.
			this.itemData_marginal_F = new PointMass<int[]>(this.ItemData);
			// Message to 'itemData_marginal' from DerivedVariable factor
			this.itemData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.ItemData, this.itemData_marginal_F);
			this.Changed_itemData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterations and ratingData and userData and vGaussian____10 and vGaussian____11 and vGaussian____9 and vGaussian__26 and vGaussian__27 and vint39</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0(int numberOfIterations)
		{
			if (this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone) {
				return ;
			}
			// Create array for 'userTraits_marginal' Forwards messages.
			this.userTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			Bernoulli[] evidence_selector_rep_F;
			// Create array for 'evidence_selector_rep' Forwards messages.
			evidence_selector_rep_F = new Bernoulli[50];
			// Create array for replicates of 'evidence_selector_rep_rep_B_toDef'
			Bernoulli[] evidence_selector_rep_rep_B_toDef = new Bernoulli[50];
			// Create array for replicates of 'evidence_selector_rep_rep_F_marginal'
			Bernoulli[] evidence_selector_rep_rep_F_marginal = new Bernoulli[50];
			Bernoulli evidence_selector_rep_F_marginal;
			Bernoulli[] evidence_selector_uses_F;
			// Create array for 'evidence_selector_uses' Forwards messages.
			evidence_selector_uses_F = new Bernoulli[6];
			evidence_selector_uses_F[1] = Bernoulli.Uniform();
			evidence_selector_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[1]);
			Bernoulli evidence_selector_rep_B_toDef;
			evidence_selector_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[1]);
			Bernoulli evidence_selector_uses_F_marginal;
			Bernoulli vBernoulli1 = Bernoulli.Uniform();
			evidence_selector_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(vBernoulli1);
			Bernoulli evidence_selector_uses_B_toDef;
			evidence_selector_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(vBernoulli1);
			Bernoulli[] evidence_selector_uses_B;
			// Create array for 'evidence_selector_uses' Backwards messages.
			evidence_selector_uses_B = new Bernoulli[6];
			evidence_selector_uses_B[0] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_B;
			// Create array for 'evidence_selector_cases' Backwards messages.
			evidence_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				evidence_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli evidence_selector_cases_0_B = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_uses_B;
			// Create array for 'evidence_selector_cases_0_uses' Backwards messages.
			evidence_selector_cases_0_uses_B = new Bernoulli[39];
			evidence_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			DistributionStructArray<Gaussian,double> userBias__0__F_marginal;
			DistributionStructArray<Gaussian,double> userBias__0__F;
			// Create array for 'userBias__0_' Forwards messages.
			userBias__0__F = new DistributionStructArray<Gaussian,double>(50);
			for(int index15 = 0; index15<50; index15++) {
				userBias__0__F[index15] = Gaussian.Uniform();
			}
			userBias__0__F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(userBias__0__F);
			DistributionStructArray<Gaussian,double> userBias__0__itemuserData_index18__F;
			// Create array for 'userBias__0__itemuserData_index18_' Forwards messages.
			userBias__0__itemuserData_index18__F = new DistributionStructArray<Gaussian,double>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				userBias__0__itemuserData_index18__F[index18] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> itemBias__0__F_marginal;
			DistributionStructArray<Gaussian,double> itemBias__0__F;
			// Create array for 'itemBias__0_' Forwards messages.
			itemBias__0__F = new DistributionStructArray<Gaussian,double>(10);
			for(int index16 = 0; index16<10; index16++) {
				itemBias__0__F[index16] = Gaussian.Uniform();
			}
			itemBias__0__F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(itemBias__0__F);
			DistributionStructArray<Gaussian,double> itemBias__0__itemitemData_index18__F;
			// Create array for 'itemBias__0__itemitemData_index18_' Forwards messages.
			itemBias__0__itemitemData_index18__F = new DistributionStructArray<Gaussian,double>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				itemBias__0__itemitemData_index18__F[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble151_F'
			Gaussian[] vdouble151_F = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble151_F[index18] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__F_marginal;
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__F;
			// Create array for 'userThresholds__0_' Forwards messages.
			userThresholds__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index15 = 0; index15<50; index15++) {
				// Create array for 'userThresholds__0_' Forwards messages.
				userThresholds__0__F[index15] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					userThresholds__0__F[index15][index19] = Gaussian.Uniform();
				}
			}
			userThresholds__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(userThresholds__0__F);
			for(int index15 = 0; index15<50; index15++) {
				for(int index19 = 0; index19<2; index19++) {
					// Message to 'userThresholds__0_' from Copy factor
					userThresholds__0__F[index15][index19] = ArrayHelper.SetTo<Gaussian>(userThresholds__0__F[index15][index19], this.VGaussian____11[index15][index19]);
				}
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__itemuserData_index18__F;
			// Create array for 'userThresholds__0__itemuserData_index18_' Forwards messages.
			userThresholds__0__itemuserData_index18__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'userThresholds__0__itemuserData_index18_' Forwards messages.
				userThresholds__0__itemuserData_index18__F[index18] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					userThresholds__0__itemuserData_index18__F[index18][index19] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__92_F'
			DistributionStructArray<Gaussian,double>[] vdouble__92_F = new DistributionStructArray<Gaussian,double>[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble__92' Forwards messages.
				vdouble__92_F[index18] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					vdouble__92_F[index18][index19] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble152_F'
			Gaussian[] vdouble152_F = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble152_F[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble153_F'
			Gaussian[] vdouble153_F = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble153_F[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble155_rep_F_marginal'
			Gaussian[] vdouble155_rep_F_marginal = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble155_rep_F_marginal[index18] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.vdouble155_F[index18]);
			}
			// Create array for replicates of 'vdouble155_rep_F'
			Gaussian[][] vdouble155_rep_F = new Gaussian[this.Vint39][];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble155_rep' Forwards messages.
				vdouble155_rep_F[index18] = new Gaussian[2];
				for(int index19 = 0; index19<2; index19++) {
					vdouble155_rep_F[index18][index19] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__95_F'
			DistributionStructArray<Gaussian,double>[] vdouble__95_F = new DistributionStructArray<Gaussian,double>[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble__95' Forwards messages.
				vdouble__95_F[index18] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					vdouble__95_F[index18][index19] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__95_B'
			DistributionStructArray<Gaussian,double>[] vdouble__95_B = new DistributionStructArray<Gaussian,double>[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble__95' Backwards messages.
				vdouble__95_B[index18] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					vdouble__95_B[index18][index19] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble153_B'
			Gaussian[] vdouble153_B = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble153_B[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble152_B'
			Gaussian[] vdouble152_B = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble152_B[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__88_B'
			DistributionStructArray<Gaussian,double>[] vdouble__88_B = new DistributionStructArray<Gaussian,double>[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble__88' Backwards messages.
				vdouble__88_B[index18] = new DistributionStructArray<Gaussian,double>(2);
				for(int index17 = 0; index17<2; index17++) {
					vdouble__88_B[index18][index17] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble151_B'
			Gaussian[] vdouble151_B = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				vdouble151_B[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__92_use_B'
			DistributionStructArray<Gaussian,double>[] vdouble__92_use_B = new DistributionStructArray<Gaussian,double>[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble__92_use' Backwards messages.
				vdouble__92_use_B[index18] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					vdouble__92_use_B[index18][index19] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.itemTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__F, this.itemTraits__0__B, this.itemTraits__0__F_marginal);
				for(int index18 = 0; index18<this.Vint39; index18++) {
					// Message to 'itemTraits__0__itemitemData_index18_' from GetItems factor
					this.itemTraits__0__itemitemData_index18__F[index18] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_index18__B[index18], this.itemTraits__0__F, this.itemTraits__0__F_marginal, this.ItemData, index18, this.itemTraits__0__itemitemData_index18__F[index18]);
				}
				userBias__0__F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__26, this.userBias__0__B, userBias__0__F_marginal);
				for(int index18 = 0; index18<this.Vint39; index18++) {
					// Message to 'userBias__0__itemuserData_index18_' from GetItems factor
					userBias__0__itemuserData_index18__F[index18] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias__0__itemuserData_index18__B[index18], userBias__0__F, userBias__0__F_marginal, this.UserData, index18, userBias__0__itemuserData_index18__F[index18]);
				}
				itemBias__0__F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__27, this.itemBias__0__B, itemBias__0__F_marginal);
				for(int index18 = 0; index18<this.Vint39; index18++) {
					// Message to 'itemBias__0__itemitemData_index18_' from GetItems factor
					itemBias__0__itemitemData_index18__F[index18] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBias__0__itemitemData_index18__B[index18], itemBias__0__F, itemBias__0__F_marginal, this.ItemData, index18, itemBias__0__itemitemData_index18__F[index18]);
				}
				userThresholds__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(userThresholds__0__F, this.userThresholds__0__B, userThresholds__0__F_marginal);
				for(int index18 = 0; index18<this.Vint39; index18++) {
					// Message to 'userThresholds__0__itemuserData_index18_' from GetItems factor
					userThresholds__0__itemuserData_index18__F[index18] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userThresholds__0__itemuserData_index18__B[index18], userThresholds__0__F, userThresholds__0__F_marginal, this.UserData, index18, userThresholds__0__itemuserData_index18__F[index18]);
					// Message to 'vdouble151' from Plus factor
					vdouble151_F[index18] = DoublePlusOp.SumAverageConditional(userBias__0__itemuserData_index18__F[index18], itemBias__0__itemitemData_index18__F[index18]);
					// Message to 'vdouble152' from Sum factor
					vdouble152_F[index18] = FastSumOp.SumAverageConditional(this.vdouble__88_F[index18]);
					// Message to 'vdouble153' from Plus factor
					vdouble153_F[index18] = DoublePlusOp.SumAverageConditional(vdouble151_F[index18], vdouble152_F[index18]);
					// Message to 'vdouble155' from GaussianFromMeanAndVariance factor
					this.vdouble155_F[index18] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(vdouble153_F[index18], 0.10000000000000001);
					vdouble155_rep_F_marginal[index18] = ReplicateOp_Divide.Marginal<Gaussian>(this.vdouble155_rep_B_toDef[index18], this.vdouble155_F[index18], vdouble155_rep_F_marginal[index18]);
					for(int index19 = 0; index19<2; index19++) {
						// Message to 'vdouble155_rep' from Replicate factor
						vdouble155_rep_F[index18][index19] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.vdouble155_rep_B[index18][index19], vdouble155_rep_F_marginal[index18], index19, vdouble155_rep_F[index18][index19]);
						// Message to 'vdouble__92' from GaussianFromMeanAndVariance factor
						vdouble__92_F[index18][index19] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(userThresholds__0__itemuserData_index18__F[index18][index19], 0.10000000000000001);
						// Message to 'vdouble__95' from Difference factor
						vdouble__95_F[index18][index19] = DoublePlusOp.AAverageConditional(vdouble155_rep_F[index18][index19], vdouble__92_F[index18][index19]);
						// Message to 'vdouble__95' from IsPositive factor
						vdouble__95_B[index18][index19] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.RatingData[index18][index19]), vdouble__95_F[index18][index19]);
						// Message to 'vdouble155_rep' from Difference factor
						this.vdouble155_rep_B[index18][index19] = DoublePlusOp.SumAverageConditional(vdouble__95_B[index18][index19], vdouble__92_F[index18][index19]);
						// Message to 'vdouble__92_use' from Difference factor
						vdouble__92_use_B[index18][index19] = DoublePlusOp.BAverageConditional(vdouble155_rep_F[index18][index19], vdouble__95_B[index18][index19]);
						// Message to 'userThresholds__0__itemuserData_index18_' from GaussianFromMeanAndVariance factor
						this.userThresholds__0__itemuserData_index18__B[index18][index19] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble__92_use_B[index18][index19], 0.10000000000000001);
					}
					this.vdouble155_rep_B_toDef[index18] = ReplicateOp_Divide.ToDef<Gaussian>(this.vdouble155_rep_B[index18], this.vdouble155_rep_B_toDef[index18]);
					// Message to 'vdouble153' from GaussianFromMeanAndVariance factor
					vdouble153_B[index18] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.vdouble155_rep_B_toDef[index18], 0.10000000000000001);
					// Message to 'vdouble152' from Plus factor
					vdouble152_B[index18] = DoublePlusOp.BAverageConditional(vdouble153_B[index18], vdouble151_F[index18]);
					// Message to 'vdouble__88' from Sum factor
					vdouble__88_B[index18] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble152_B[index18], vdouble152_F[index18], this.vdouble__88_F[index18], vdouble__88_B[index18]);
					// Message to 'vdouble151' from Plus factor
					vdouble151_B[index18] = DoublePlusOp.AAverageConditional(vdouble153_B[index18], vdouble152_F[index18]);
					// Message to 'userBias__0__itemuserData_index18_' from Plus factor
					this.userBias__0__itemuserData_index18__B[index18] = DoublePlusOp.AAverageConditional(vdouble151_B[index18], itemBias__0__itemitemData_index18__F[index18]);
					// Message to 'itemBias__0__itemitemData_index18_' from Plus factor
					this.itemBias__0__itemitemData_index18__B[index18] = DoublePlusOp.BAverageConditional(vdouble151_B[index18], userBias__0__itemuserData_index18__F[index18]);
					for(int index17 = 0; index17<2; index17++) {
						// Message to 'userTraits__0__itemuserData_index18_' from Product factor
						this.userTraits__0__itemuserData_index18__B[index18][index17] = GaussianProductOp_SHG09.AAverageConditional(vdouble__88_B[index18][index17], this.itemTraits__0__itemitemData_index18__F[index18][index17], this.itemTraits__0__itemitemData_index18__B[index18][index17]);
					}
				}
				// Message to 'userTraits__0_' from GetItems factor
				this.userTraits__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits__0__itemuserData_index18__B, this.UserData, this.userTraits__0__B);
				this.userTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__F, this.userTraits__0__B, this.userTraits__0__F_marginal);
				for(int index18 = 0; index18<this.Vint39; index18++) {
					// Message to 'userTraits__0__itemuserData_index18_' from GetItems factor
					this.userTraits__0__itemuserData_index18__F[index18] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_index18__B[index18], this.userTraits__0__F, this.userTraits__0__F_marginal, this.UserData, index18, this.userTraits__0__itemuserData_index18__F[index18]);
					for(int index17 = 0; index17<2; index17++) {
						// Message to 'itemTraits__0__itemitemData_index18_' from Product factor
						this.itemTraits__0__itemitemData_index18__B[index18][index17] = GaussianProductOp_SHG09.BAverageConditional(vdouble__88_B[index18][index17], this.userTraits__0__itemuserData_index18__F[index18][index17], this.userTraits__0__itemuserData_index18__B[index18][index17]);
					}
				}
				// Message to 'itemTraits__0_' from GetItems factor
				this.itemTraits__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits__0__itemitemData_index18__B, this.ItemData, this.itemTraits__0__B);
				// Message to 'userBias__0_' from GetItems factor
				this.userBias__0__B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.userBias__0__itemuserData_index18__B, this.UserData, this.userBias__0__B);
				// Message to 'itemBias__0_' from GetItems factor
				this.itemBias__0__B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.itemBias__0__itemitemData_index18__B, this.ItemData, this.itemBias__0__B);
				// Message to 'userThresholds__0_' from GetItems factor
				this.userThresholds__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userThresholds__0__itemuserData_index18__B, this.UserData, this.userThresholds__0__B);
				for(int index18 = 0; index18<this.Vint39; index18++) {
					for(int index17 = 0; index17<2; index17++) {
						// Message to 'vdouble__88' from Product factor
						this.vdouble__88_F[index18][index17] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits__0__itemuserData_index18__F[index18][index17], this.itemTraits__0__itemitemData_index18__F[index18][index17], this.userTraits__0__itemuserData_index18__B[index18][index17], this.itemTraits__0__itemitemData_index18__B[index18][index17]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[8] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_index18__B, this.userTraits__0__F, this.UserData, this.userTraits__0__itemuserData_index18__F));
			evidence_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[10] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_index18__B, this.itemTraits__0__F, this.ItemData, this.itemTraits__0__itemitemData_index18__F));
			evidence_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_rep6_B;
			// Create array for 'evidence_selector_cases_0_rep6' Backwards messages.
			evidence_selector_cases_0_rep6_B = new Bernoulli[this.Vint39];
			// Create array for replicates of 'evidence_selector_cases_0_rep6_rep_B'
			Bernoulli[][] evidence_selector_cases_0_rep6_rep_B = new Bernoulli[this.Vint39][];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'evidence_selector_cases_0_rep6_rep' Backwards messages.
				evidence_selector_cases_0_rep6_rep_B[index18] = new Bernoulli[2];
				for(int index17 = 0; index17<2; index17++) {
					evidence_selector_cases_0_rep6_rep_B[index18][index17] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep6_rep' from Product factor
					evidence_selector_cases_0_rep6_rep_B[index18][index17] = Bernoulli.FromLogOdds(GaussianProductOp_SHG09.LogEvidenceRatio(vdouble__88_B[index18][index17], this.userTraits__0__itemuserData_index18__F[index18][index17], this.itemTraits__0__itemitemData_index18__F[index18][index17], this.userTraits__0__itemuserData_index18__B[index18][index17], this.itemTraits__0__itemitemData_index18__B[index18][index17], this.vdouble__88_F[index18][index17]));
				}
				evidence_selector_cases_0_rep6_B[index18] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep6' from Replicate factor
				evidence_selector_cases_0_rep6_B[index18] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep6_rep_B[index18], evidence_selector_cases_0_rep6_B[index18]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[11] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep6_B, evidence_selector_cases_0_uses_B[11]);
			evidence_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[18] = Bernoulli.FromLogOdds(GetItemsOp<double>.LogEvidenceRatio<Gaussian>(this.userBias__0__itemuserData_index18__B, this.VGaussian__26, this.UserData, userBias__0__itemuserData_index18__F));
			evidence_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[20] = Bernoulli.FromLogOdds(GetItemsOp<double>.LogEvidenceRatio<Gaussian>(this.itemBias__0__itemitemData_index18__B, this.VGaussian__27, this.ItemData, itemBias__0__itemitemData_index18__F));
			evidence_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[33] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.userThresholds__0__itemuserData_index18__B, userThresholds__0__F, this.UserData, userThresholds__0__itemuserData_index18__F));
			evidence_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			Bernoulli[][] evidence_selector_cases_0_rep23_uses_B;
			// Create array for 'evidence_selector_cases_0_rep23_uses' Backwards messages.
			evidence_selector_cases_0_rep23_uses_B = new Bernoulli[this.Vint39][];
			Bernoulli[] evidence_selector_cases_0_rep23_B;
			// Create array for 'evidence_selector_cases_0_rep23' Backwards messages.
			evidence_selector_cases_0_rep23_B = new Bernoulli[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'evidence_selector_cases_0_rep23_uses' Backwards messages.
				evidence_selector_cases_0_rep23_uses_B[index18] = new Bernoulli[2];
				evidence_selector_cases_0_rep23_uses_B[index18][0] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep23_uses_B[index18][1] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23_uses' from Replicate factor
				evidence_selector_cases_0_rep23_uses_B[index18][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.vdouble155_rep_B[index18], this.vdouble155_F[index18], vdouble155_rep_F[index18]));
				evidence_selector_cases_0_rep23_B[index18] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23' from Replicate factor
				evidence_selector_cases_0_rep23_B[index18] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_uses_B[index18], evidence_selector_cases_0_rep23_B[index18]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[37] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_B, evidence_selector_cases_0_uses_B[37]);
			evidence_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			// Create array for replicates of 'evidence_selector_cases_0_rep24_rep_B'
			Bernoulli[][] evidence_selector_cases_0_rep24_rep_B = new Bernoulli[this.Vint39][];
			Bernoulli[] evidence_selector_cases_0_rep24_B;
			// Create array for 'evidence_selector_cases_0_rep24' Backwards messages.
			evidence_selector_cases_0_rep24_B = new Bernoulli[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'evidence_selector_cases_0_rep24_rep' Backwards messages.
				evidence_selector_cases_0_rep24_rep_B[index18] = new Bernoulli[2];
				for(int index19 = 0; index19<2; index19++) {
					evidence_selector_cases_0_rep24_rep_B[index18][index19] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep24_rep' from IsPositive factor
					evidence_selector_cases_0_rep24_rep_B[index18][index19] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(this.RatingData[index18][index19], vdouble__95_F[index18][index19]));
				}
				evidence_selector_cases_0_rep24_B[index18] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep24' from Replicate factor
				evidence_selector_cases_0_rep24_B[index18] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_rep_B[index18], evidence_selector_cases_0_rep24_B[index18]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[38] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_B, evidence_selector_cases_0_uses_B[38]);
			// Message to 'evidence_selector_cases_0' from Replicate factor
			evidence_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_uses_B, evidence_selector_cases_0_B);
			// Message to 'evidence_selector_cases' from Copy factor
			evidence_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(evidence_selector_cases_B[0], evidence_selector_cases_0_B);
			// Message to 'evidence_selector_uses' from Cases factor
			evidence_selector_uses_B[0] = CasesOp.BAverageConditional(evidence_selector_cases_B);
			evidence_selector_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_uses_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(evidence_selector_uses_B, evidence_selector_uses_B_toDef);
			evidence_selector_uses_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_uses_B_toDef, vBernoulli1, evidence_selector_uses_F_marginal);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_B_toDef, evidence_selector_uses_F_marginal, 1, evidence_selector_uses_F[1]);
			evidence_selector_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep_B_toDef, evidence_selector_uses_F[1], evidence_selector_rep_F_marginal);
			// Create array for replicates of 'evidence_selector_rep_rep_F'
			Bernoulli[][] evidence_selector_rep_rep_F = new Bernoulli[50][];
			Gaussian[][][] userTraits__B;
			// Create array for 'userTraits_' Backwards messages.
			userTraits__B = new Gaussian[50][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_B;
			// Create array for 'userTraits_use' Backwards messages.
			userTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			Bernoulli evidence_selector_rep_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep_rep_B_reduced = Bernoulli.Uniform();
			for(int index15 = 0; index15<50; index15++) {
				// Create array for 'userTraits_marginal' Forwards messages.
				this.userTraits_marginal_F[index15] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'userTraits_use' Backwards messages.
				userTraits_use_B[index15] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'evidence_selector_rep_rep' Forwards messages.
				evidence_selector_rep_rep_F[index15] = new Bernoulli[2];
				// Create array for 'userTraits_' Backwards messages.
				userTraits__B[index15] = new Gaussian[2][];
				evidence_selector_rep_F[index15] = Bernoulli.Uniform();
				evidence_selector_rep_rep_F_marginal[index15] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep_F[index15]);
				evidence_selector_rep_rep_B_toDef[index15] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep_F[index15]);
				// Message to 'evidence_selector_rep' from Replicate factor
				evidence_selector_rep_F[index15] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_rep_B_toDef[index15], evidence_selector_rep_F_marginal, index15, evidence_selector_rep_F[index15]);
				evidence_selector_rep_rep_F_marginal[index15] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep_rep_B_toDef[index15], evidence_selector_rep_F[index15], evidence_selector_rep_rep_F_marginal[index15]);
				for(int index17 = 0; index17<2; index17++) {
					this.userTraits_marginal_F[index15][index17] = Gaussian.Uniform();
					userTraits_use_B[index15][index17] = Gaussian.Uniform();
					// Create array for 'userTraits_' Backwards messages.
					userTraits__B[index15][index17] = new Gaussian[1];
					for(int _gateind = 0; _gateind<1; _gateind++) {
						userTraits__B[index15][index17][_gateind] = Gaussian.Uniform();
					}
					evidence_selector_rep_rep_F[index15][index17] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep_rep' from Replicate factor
					evidence_selector_rep_rep_F[index15][index17] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_rep_B_reduced, evidence_selector_rep_rep_F_marginal[index15], index17, evidence_selector_rep_rep_F[index15][index17]);
					// Message to 'userTraits_' from Copy factor
					userTraits__B[index15][index17][0] = ArrayHelper.SetTo<Gaussian>(userTraits__B[index15][index17][0], this.userTraits__0__B[index15][index17]);
					// Message to 'userTraits_use' from EnterPartial factor
					userTraits_use_B[index15][index17] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userTraits__B[index15][index17], evidence_selector_rep_rep_F[index15][index17], this.VGaussian____9[index15][index17], new int[1] {0}, userTraits_use_B[index15][index17]);
					// Message to 'userTraits_marginal' from Variable factor
					this.userTraits_marginal_F[index15][index17] = VariableOp.MarginalAverageConditional<Gaussian>(userTraits_use_B[index15][index17], this.VGaussian____9[index15][index17], this.userTraits_marginal_F[index15][index17]);
				}
			}
			// Create array for 'itemTraits_marginal' Forwards messages.
			this.itemTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			Bernoulli[] evidence_selector_rep2_F;
			// Create array for 'evidence_selector_rep2' Forwards messages.
			evidence_selector_rep2_F = new Bernoulli[10];
			Gaussian[][][] itemTraits__B;
			// Create array for 'itemTraits_' Backwards messages.
			itemTraits__B = new Gaussian[10][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_B;
			// Create array for 'itemTraits_use' Backwards messages.
			itemTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			// Create array for replicates of 'evidence_selector_rep2_rep_F_marginal'
			Bernoulli[] evidence_selector_rep2_rep_F_marginal = new Bernoulli[10];
			// Create array for replicates of 'evidence_selector_rep2_rep_B_toDef'
			Bernoulli[] evidence_selector_rep2_rep_B_toDef = new Bernoulli[10];
			Bernoulli evidence_selector_rep2_F_marginal;
			evidence_selector_uses_F[2] = Bernoulli.Uniform();
			evidence_selector_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[2]);
			Bernoulli evidence_selector_rep2_B_toDef;
			evidence_selector_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[2]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_B_toDef, evidence_selector_uses_F_marginal, 2, evidence_selector_uses_F[2]);
			evidence_selector_rep2_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep2_B_toDef, evidence_selector_uses_F[2], evidence_selector_rep2_F_marginal);
			// Create array for replicates of 'evidence_selector_rep2_rep_F'
			Bernoulli[][] evidence_selector_rep2_rep_F = new Bernoulli[10][];
			Bernoulli evidence_selector_rep2_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep2_rep_B_reduced = Bernoulli.Uniform();
			for(int index16 = 0; index16<10; index16++) {
				// Create array for 'itemTraits_marginal' Forwards messages.
				this.itemTraits_marginal_F[index16] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'itemTraits_use' Backwards messages.
				itemTraits_use_B[index16] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'itemTraits_' Backwards messages.
				itemTraits__B[index16] = new Gaussian[2][];
				// Create array for 'evidence_selector_rep2_rep' Forwards messages.
				evidence_selector_rep2_rep_F[index16] = new Bernoulli[2];
				evidence_selector_rep2_F[index16] = Bernoulli.Uniform();
				evidence_selector_rep2_rep_F_marginal[index16] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep2_F[index16]);
				evidence_selector_rep2_rep_B_toDef[index16] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep2_F[index16]);
				// Message to 'evidence_selector_rep2' from Replicate factor
				evidence_selector_rep2_F[index16] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_rep_B_toDef[index16], evidence_selector_rep2_F_marginal, index16, evidence_selector_rep2_F[index16]);
				evidence_selector_rep2_rep_F_marginal[index16] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep2_rep_B_toDef[index16], evidence_selector_rep2_F[index16], evidence_selector_rep2_rep_F_marginal[index16]);
			}
			for(int index17 = 0; index17<2; index17++) {
				for(int index16 = 0; index16<10; index16++) {
					this.itemTraits_marginal_F[index16][index17] = Gaussian.Uniform();
					itemTraits_use_B[index16][index17] = Gaussian.Uniform();
					// Create array for 'itemTraits_' Backwards messages.
					itemTraits__B[index16][index17] = new Gaussian[1];
					for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
						itemTraits__B[index16][index17][_gateind2] = Gaussian.Uniform();
					}
					evidence_selector_rep2_rep_F[index16][index17] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep2_rep' from Replicate factor
					evidence_selector_rep2_rep_F[index16][index17] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_rep_B_reduced, evidence_selector_rep2_rep_F_marginal[index16], index17, evidence_selector_rep2_rep_F[index16][index17]);
					// Message to 'itemTraits_' from Copy factor
					itemTraits__B[index16][index17][0] = ArrayHelper.SetTo<Gaussian>(itemTraits__B[index16][index17][0], this.itemTraits__0__B[index16][index17]);
					// Message to 'itemTraits_use' from EnterPartial factor
					itemTraits_use_B[index16][index17] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(itemTraits__B[index16][index17], evidence_selector_rep2_rep_F[index16][index17], this.VGaussian____10[index16][index17], new int[1] {0}, itemTraits_use_B[index16][index17]);
					// Message to 'itemTraits_marginal' from Variable factor
					this.itemTraits_marginal_F[index16][index17] = VariableOp.MarginalAverageConditional<Gaussian>(itemTraits_use_B[index16][index17], this.VGaussian____10[index16][index17], this.itemTraits_marginal_F[index16][index17]);
				}
			}
			// Create array for 'userBias_marginal' Forwards messages.
			this.userBias_marginal_F = new DistributionStructArray<Gaussian,double>(50);
			Bernoulli[] evidence_selector_rep3_F;
			// Create array for 'evidence_selector_rep3' Forwards messages.
			evidence_selector_rep3_F = new Bernoulli[50];
			Gaussian[][] userBias__B;
			// Create array for 'userBias_' Backwards messages.
			userBias__B = new Gaussian[50][];
			Bernoulli evidence_selector_rep3_B_reduced;
			evidence_selector_rep3_B_reduced = Bernoulli.Uniform();
			Bernoulli evidence_selector_rep3_F_marginal;
			evidence_selector_uses_F[3] = Bernoulli.Uniform();
			evidence_selector_rep3_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[3]);
			Bernoulli evidence_selector_rep3_B_toDef;
			evidence_selector_rep3_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[3]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep3_B_toDef, evidence_selector_uses_F_marginal, 3, evidence_selector_uses_F[3]);
			evidence_selector_rep3_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep3_B_toDef, evidence_selector_uses_F[3], evidence_selector_rep3_F_marginal);
			DistributionStructArray<Gaussian,double> userBias_use_B;
			// Create array for 'userBias_use' Backwards messages.
			userBias_use_B = new DistributionStructArray<Gaussian,double>(50);
			for(int index15 = 0; index15<50; index15++) {
				this.userBias_marginal_F[index15] = Gaussian.Uniform();
				userBias_use_B[index15] = Gaussian.Uniform();
				// Create array for 'userBias_' Backwards messages.
				userBias__B[index15] = new Gaussian[1];
				for(int _gateind3 = 0; _gateind3<1; _gateind3++) {
					userBias__B[index15][_gateind3] = Gaussian.Uniform();
				}
				evidence_selector_rep3_F[index15] = Bernoulli.Uniform();
				// Message to 'evidence_selector_rep3' from Replicate factor
				evidence_selector_rep3_F[index15] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep3_B_reduced, evidence_selector_rep3_F_marginal, index15, evidence_selector_rep3_F[index15]);
				// Message to 'userBias_' from Copy factor
				userBias__B[index15][0] = ArrayHelper.SetTo<Gaussian>(userBias__B[index15][0], this.userBias__0__B[index15]);
				// Message to 'userBias_use' from EnterPartial factor
				userBias_use_B[index15] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userBias__B[index15], evidence_selector_rep3_F[index15], this.VGaussian__26[index15], new int[1] {0}, userBias_use_B[index15]);
				// Message to 'userBias_marginal' from Variable factor
				this.userBias_marginal_F[index15] = VariableOp.MarginalAverageConditional<Gaussian>(userBias_use_B[index15], this.VGaussian__26[index15], this.userBias_marginal_F[index15]);
			}
			// Create array for 'itemBias_marginal' Forwards messages.
			this.itemBias_marginal_F = new DistributionStructArray<Gaussian,double>(10);
			Gaussian[][] itemBias__B;
			// Create array for 'itemBias_' Backwards messages.
			itemBias__B = new Gaussian[10][];
			DistributionStructArray<Gaussian,double> itemBias_use_B;
			// Create array for 'itemBias_use' Backwards messages.
			itemBias_use_B = new DistributionStructArray<Gaussian,double>(10);
			Bernoulli[] evidence_selector_rep4_F;
			// Create array for 'evidence_selector_rep4' Forwards messages.
			evidence_selector_rep4_F = new Bernoulli[10];
			Bernoulli evidence_selector_rep4_B_reduced;
			evidence_selector_rep4_B_reduced = Bernoulli.Uniform();
			Bernoulli evidence_selector_rep4_F_marginal;
			evidence_selector_uses_F[4] = Bernoulli.Uniform();
			evidence_selector_rep4_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[4]);
			Bernoulli evidence_selector_rep4_B_toDef;
			evidence_selector_rep4_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[4]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep4_B_toDef, evidence_selector_uses_F_marginal, 4, evidence_selector_uses_F[4]);
			evidence_selector_rep4_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep4_B_toDef, evidence_selector_uses_F[4], evidence_selector_rep4_F_marginal);
			for(int index16 = 0; index16<10; index16++) {
				this.itemBias_marginal_F[index16] = Gaussian.Uniform();
				itemBias_use_B[index16] = Gaussian.Uniform();
				// Create array for 'itemBias_' Backwards messages.
				itemBias__B[index16] = new Gaussian[1];
				for(int _gateind4 = 0; _gateind4<1; _gateind4++) {
					itemBias__B[index16][_gateind4] = Gaussian.Uniform();
				}
				evidence_selector_rep4_F[index16] = Bernoulli.Uniform();
				// Message to 'evidence_selector_rep4' from Replicate factor
				evidence_selector_rep4_F[index16] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep4_B_reduced, evidence_selector_rep4_F_marginal, index16, evidence_selector_rep4_F[index16]);
				// Message to 'itemBias_' from Copy factor
				itemBias__B[index16][0] = ArrayHelper.SetTo<Gaussian>(itemBias__B[index16][0], this.itemBias__0__B[index16]);
				// Message to 'itemBias_use' from EnterPartial factor
				itemBias_use_B[index16] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(itemBias__B[index16], evidence_selector_rep4_F[index16], this.VGaussian__27[index16], new int[1] {0}, itemBias_use_B[index16]);
				// Message to 'itemBias_marginal' from Variable factor
				this.itemBias_marginal_F[index16] = VariableOp.MarginalAverageConditional<Gaussian>(itemBias_use_B[index16], this.VGaussian__27[index16], this.itemBias_marginal_F[index16]);
			}
			// Create array for 'userThresholds_marginal' Forwards messages.
			this.userThresholds_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			Gaussian[][][] userThresholds__B;
			// Create array for 'userThresholds_' Backwards messages.
			userThresholds__B = new Gaussian[50][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_B;
			// Create array for 'userThresholds_use' Backwards messages.
			userThresholds_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			Bernoulli[] evidence_selector_rep5_F;
			// Create array for 'evidence_selector_rep5' Forwards messages.
			evidence_selector_rep5_F = new Bernoulli[50];
			// Create array for replicates of 'evidence_selector_rep5_rep_F_marginal'
			Bernoulli[] evidence_selector_rep5_rep_F_marginal = new Bernoulli[50];
			// Create array for replicates of 'evidence_selector_rep5_rep_B_toDef'
			Bernoulli[] evidence_selector_rep5_rep_B_toDef = new Bernoulli[50];
			Bernoulli evidence_selector_rep5_F_marginal;
			evidence_selector_uses_F[5] = Bernoulli.Uniform();
			evidence_selector_rep5_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[5]);
			Bernoulli evidence_selector_rep5_B_toDef;
			evidence_selector_rep5_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[5]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_B_toDef, evidence_selector_uses_F_marginal, 5, evidence_selector_uses_F[5]);
			evidence_selector_rep5_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep5_B_toDef, evidence_selector_uses_F[5], evidence_selector_rep5_F_marginal);
			// Create array for replicates of 'evidence_selector_rep5_rep_F'
			Bernoulli[][] evidence_selector_rep5_rep_F = new Bernoulli[50][];
			Bernoulli evidence_selector_rep5_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep5_rep_B_reduced = Bernoulli.Uniform();
			for(int index15 = 0; index15<50; index15++) {
				// Create array for 'userThresholds_marginal' Forwards messages.
				this.userThresholds_marginal_F[index15] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'evidence_selector_rep5_rep' Forwards messages.
				evidence_selector_rep5_rep_F[index15] = new Bernoulli[2];
				// Create array for 'userThresholds_' Backwards messages.
				userThresholds__B[index15] = new Gaussian[2][];
				evidence_selector_rep5_F[index15] = Bernoulli.Uniform();
				evidence_selector_rep5_rep_F_marginal[index15] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep5_F[index15]);
				evidence_selector_rep5_rep_B_toDef[index15] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep5_F[index15]);
				// Message to 'evidence_selector_rep5' from Replicate factor
				evidence_selector_rep5_F[index15] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_rep_B_toDef[index15], evidence_selector_rep5_F_marginal, index15, evidence_selector_rep5_F[index15]);
				evidence_selector_rep5_rep_F_marginal[index15] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep5_rep_B_toDef[index15], evidence_selector_rep5_F[index15], evidence_selector_rep5_rep_F_marginal[index15]);
				// Create array for 'userThresholds_use' Backwards messages.
				userThresholds_use_B[index15] = new DistributionStructArray<Gaussian,double>(2);
				for(int index19 = 0; index19<2; index19++) {
					this.userThresholds_marginal_F[index15][index19] = Gaussian.Uniform();
					userThresholds_use_B[index15][index19] = Gaussian.Uniform();
					// Create array for 'userThresholds_' Backwards messages.
					userThresholds__B[index15][index19] = new Gaussian[1];
					for(int _gateind5 = 0; _gateind5<1; _gateind5++) {
						userThresholds__B[index15][index19][_gateind5] = Gaussian.Uniform();
					}
					evidence_selector_rep5_rep_F[index15][index19] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep5_rep' from Replicate factor
					evidence_selector_rep5_rep_F[index15][index19] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_rep_B_reduced, evidence_selector_rep5_rep_F_marginal[index15], index19, evidence_selector_rep5_rep_F[index15][index19]);
					// Message to 'userThresholds_' from Copy factor
					userThresholds__B[index15][index19][0] = ArrayHelper.SetTo<Gaussian>(userThresholds__B[index15][index19][0], this.userThresholds__0__B[index15][index19]);
					// Message to 'userThresholds_use' from EnterPartial factor
					userThresholds_use_B[index15][index19] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userThresholds__B[index15][index19], evidence_selector_rep5_rep_F[index15][index19], this.VGaussian____11[index15][index19], new int[1] {0}, userThresholds_use_B[index15][index19]);
					// Message to 'userThresholds_marginal' from Variable factor
					this.userThresholds_marginal_F[index15][index19] = VariableOp.MarginalAverageConditional<Gaussian>(userThresholds_use_B[index15][index19], this.VGaussian____11[index15][index19], this.userThresholds_marginal_F[index15][index19]);
				}
			}
			this.evidence_marginal_F = Bernoulli.Uniform();
			// Message to 'evidence_marginal' from Variable factor
			this.evidence_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(evidence_selector_uses_B_toDef, vBernoulli1, this.evidence_marginal_F);
			this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterationsDecreased and userData and vGaussian____10 and vGaussian____9 and vint39 and must reset on changes to ratingData and vGaussian____11 and vGaussian__26 and vGaussian__27</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11(bool initialise)
		{
			if (this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone&&((!initialise)||this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised)) {
				return ;
			}
			for(int index18 = 0; index18<this.Vint39; index18++) {
				for(int index17 = 0; index17<2; index17++) {
					// Message to 'vdouble__88' from Product factor
					this.vdouble__88_F[index18][index17] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits__0__itemuserData_index18__F[index18][index17], this.itemTraits__0__itemitemData_index18__F[index18][index17], this.userTraits__0__itemuserData_index18__B[index18][index17], this.itemTraits__0__itemitemData_index18__B[index18][index17]);
				}
			}
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = true;
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterationsDecreased and vGaussian____10 and vint39 and must reset on changes to ratingData and userData and vGaussian____11 and vGaussian____9 and vGaussian__26 and vGaussian__27</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8(bool initialise)
		{
			if (this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone&&((!initialise)||this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised)) {
				return ;
			}
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Message to 'itemTraits__0__itemitemData_index18_' from GetItems factor
				this.itemTraits__0__itemitemData_index18__F[index18] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_index18__B[index18], this.itemTraits__0__F, this.itemTraits__0__F_marginal, this.ItemData, index18, this.itemTraits__0__itemitemData_index18__F[index18]);
			}
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone = true;
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to itemData and ratingData and userData and vGaussian____10 and vGaussian____11 and vGaussian____9 and vGaussian__26 and vGaussian__27 and vint39</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised)) {
				return ;
			}
			this.itemTraits__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits__0__F);
			for(int index17 = 0; index17<2; index17++) {
				for(int index16 = 0; index16<10; index16++) {
					this.itemTraits__0__B[index16][index17] = Gaussian.Uniform();
				}
			}
			this.userTraits__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits__0__F);
			for(int index15 = 0; index15<50; index15++) {
				for(int index17 = 0; index17<2; index17++) {
					this.userTraits__0__B[index15][index17] = Gaussian.Uniform();
				}
				this.userBias__0__B[index15] = Gaussian.Uniform();
			}
			for(int index16 = 0; index16<10; index16++) {
				this.itemBias__0__B[index16] = Gaussian.Uniform();
			}
			for(int index15 = 0; index15<50; index15++) {
				for(int index19 = 0; index19<2; index19++) {
					this.userThresholds__0__B[index15][index19] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userData and vGaussian____9 and vint39 and must reset on changes to itemData and ratingData and vGaussian____10 and vGaussian____11 and vGaussian__26 and vGaussian__27</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised)) {
				return ;
			}
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Message to 'userTraits__0__itemuserData_index18_' from GetItems factor
				this.userTraits__0__itemuserData_index18__F[index18] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_index18__B[index18], this.userTraits__0__F, this.userTraits__0__F_marginal, this.UserData, index18, this.userTraits__0__itemuserData_index18__F[index18]);
			}
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone = true;
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian____10 and must reset on changes to itemData and ratingData and userData and vGaussian____11 and vGaussian____9 and vGaussian__26 and vGaussian__27 and vint39</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised)) {
				return ;
			}
			this.itemTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__F, this.itemTraits__0__B, this.itemTraits__0__F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian____9 and must reset on changes to itemData and ratingData and userData and vGaussian____10 and vGaussian____11 and vGaussian__26 and vGaussian__27 and vint39</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised)) {
				return ;
			}
			this.userTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__F, this.userTraits__0__B, this.userTraits__0__F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vint39 and must reset on changes to itemData and ratingData and userData and vGaussian____10 and vGaussian____11 and vGaussian____9 and vGaussian__26 and vGaussian__27</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised)) {
				return ;
			}
			for(int index18 = 0; index18<this.Vint39; index18++) {
				for(int index17 = 0; index17<2; index17++) {
					this.itemTraits__0__itemitemData_index18__F[index18][index17] = Gaussian.Uniform();
					this.itemTraits__0__itemitemData_index18__B[index18][index17] = Gaussian.Uniform();
					this.vdouble__88_F[index18][index17] = Gaussian.Uniform();
					this.userTraits__0__itemuserData_index18__B[index18][index17] = Gaussian.Uniform();
					this.userTraits__0__itemuserData_index18__F[index18][index17] = Gaussian.Uniform();
				}
				this.userBias__0__itemuserData_index18__B[index18] = Gaussian.Uniform();
				this.itemBias__0__itemitemData_index18__B[index18] = Gaussian.Uniform();
				for(int index19 = 0; index19<2; index19++) {
					this.userThresholds__0__itemuserData_index18__B[index18][index19] = Gaussian.Uniform();
				}
				this.vdouble155_rep_B_toDef[index18] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.vdouble155_F[index18]);
				for(int index19 = 0; index19<2; index19++) {
					this.vdouble155_rep_B[index18][index19] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isDone = true;
			this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ratingData and vint39</summary>
		private void Changed_ratingData_vint39()
		{
			if (this.Changed_ratingData_vint39_isDone) {
				return ;
			}
			// Create array for 'ratingData_marginal' Forwards messages.
			this.ratingData_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'ratingData_marginal' Forwards messages.
				this.ratingData_marginal_F[index18] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int index19 = 0; index19<2; index19++) {
					this.ratingData_marginal_F[index18][index19] = Bernoulli.Uniform();
				}
			}
			// Message to 'ratingData_marginal' from DerivedVariable factor
			this.ratingData_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.RatingData, this.ratingData_marginal_F);
			this.Changed_ratingData_vint39_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userData</summary>
		private void Changed_userData()
		{
			if (this.Changed_userData_isDone) {
				return ;
			}
			// Create array for 'userData_marginal' Forwards messages.
			this.userData_marginal_F = new PointMass<int[]>(this.UserData);
			// Message to 'userData_marginal' from DerivedVariable factor
			this.userData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.UserData, this.userData_marginal_F);
			this.Changed_userData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____10</summary>
		private void Changed_vGaussian____10()
		{
			if (this.Changed_vGaussian____10_isDone) {
				return ;
			}
			for(int index17 = 0; index17<2; index17++) {
				for(int index16 = 0; index16<10; index16++) {
					// Message to 'itemTraits__0_' from Copy factor
					this.itemTraits__0__F[index16][index17] = ArrayHelper.SetTo<Gaussian>(this.itemTraits__0__F[index16][index17], this.VGaussian____10[index16][index17]);
				}
			}
			// Create array for 'vGaussian____10_marginal' Forwards messages.
			this.vGaussian____10_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____10);
			// Message to 'vGaussian____10_marginal' from DerivedVariable factor
			this.vGaussian____10_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____10, this.vGaussian____10_marginal_F);
			this.Changed_vGaussian____10_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____11</summary>
		private void Changed_vGaussian____11()
		{
			if (this.Changed_vGaussian____11_isDone) {
				return ;
			}
			// Create array for 'vGaussian____11_marginal' Forwards messages.
			this.vGaussian____11_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____11);
			// Message to 'vGaussian____11_marginal' from DerivedVariable factor
			this.vGaussian____11_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____11, this.vGaussian____11_marginal_F);
			this.Changed_vGaussian____11_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____9</summary>
		private void Changed_vGaussian____9()
		{
			if (this.Changed_vGaussian____9_isDone) {
				return ;
			}
			for(int index15 = 0; index15<50; index15++) {
				for(int index17 = 0; index17<2; index17++) {
					// Message to 'userTraits__0_' from Copy factor
					this.userTraits__0__F[index15][index17] = ArrayHelper.SetTo<Gaussian>(this.userTraits__0__F[index15][index17], this.VGaussian____9[index15][index17]);
				}
			}
			// Create array for 'vGaussian____9_marginal' Forwards messages.
			this.vGaussian____9_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____9);
			// Message to 'vGaussian____9_marginal' from DerivedVariable factor
			this.vGaussian____9_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____9, this.vGaussian____9_marginal_F);
			this.Changed_vGaussian____9_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__26</summary>
		private void Changed_vGaussian__26()
		{
			if (this.Changed_vGaussian__26_isDone) {
				return ;
			}
			// Create array for 'vGaussian__26_marginal' Forwards messages.
			this.vGaussian__26_marginal_F = new PointMass<Gaussian[]>(this.VGaussian__26);
			// Message to 'vGaussian__26_marginal' from DerivedVariable factor
			this.vGaussian__26_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.VGaussian__26, this.vGaussian__26_marginal_F);
			this.Changed_vGaussian__26_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__27</summary>
		private void Changed_vGaussian__27()
		{
			if (this.Changed_vGaussian__27_isDone) {
				return ;
			}
			// Create array for 'vGaussian__27_marginal' Forwards messages.
			this.vGaussian__27_marginal_F = new PointMass<Gaussian[]>(this.VGaussian__27);
			// Message to 'vGaussian__27_marginal' from DerivedVariable factor
			this.vGaussian__27_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.VGaussian__27, this.vGaussian__27_marginal_F);
			this.Changed_vGaussian__27_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint39</summary>
		private void Changed_vint39()
		{
			if (this.Changed_vint39_isDone) {
				return ;
			}
			// Create array for 'itemTraits__0__itemitemData_index18_' Forwards messages.
			this.itemTraits__0__itemitemData_index18__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'itemTraits__0__itemitemData_index18_' Forwards messages.
				this.itemTraits__0__itemitemData_index18__F[index18] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemTraits__0__itemitemData_index18_' Backwards messages.
			this.itemTraits__0__itemitemData_index18__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'itemTraits__0__itemitemData_index18_' Backwards messages.
				this.itemTraits__0__itemitemData_index18__B[index18] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'vdouble__88_F'
			this.vdouble__88_F = new DistributionStructArray<Gaussian,double>[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble__88' Forwards messages.
				this.vdouble__88_F[index18] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0__itemuserData_index18_' Backwards messages.
			this.userTraits__0__itemuserData_index18__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'userTraits__0__itemuserData_index18_' Backwards messages.
				this.userTraits__0__itemuserData_index18__B[index18] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0__itemuserData_index18_' Forwards messages.
			this.userTraits__0__itemuserData_index18__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'userTraits__0__itemuserData_index18_' Forwards messages.
				this.userTraits__0__itemuserData_index18__F[index18] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userBias__0__itemuserData_index18_' Backwards messages.
			this.userBias__0__itemuserData_index18__B = new DistributionStructArray<Gaussian,double>(this.Vint39);
			// Create array for 'itemBias__0__itemitemData_index18_' Backwards messages.
			this.itemBias__0__itemitemData_index18__B = new DistributionStructArray<Gaussian,double>(this.Vint39);
			// Create array for 'userThresholds__0__itemuserData_index18_' Backwards messages.
			this.userThresholds__0__itemuserData_index18__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint39);
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'userThresholds__0__itemuserData_index18_' Backwards messages.
				this.userThresholds__0__itemuserData_index18__B[index18] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'vdouble155_F'
			this.vdouble155_F = new Gaussian[this.Vint39];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				this.vdouble155_F[index18] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble155_rep_B_toDef'
			this.vdouble155_rep_B_toDef = new Gaussian[this.Vint39];
			// Create array for replicates of 'vdouble155_rep_B'
			this.vdouble155_rep_B = new Gaussian[this.Vint39][];
			for(int index18 = 0; index18<this.Vint39; index18++) {
				// Create array for 'vdouble155_rep' Backwards messages.
				this.vdouble155_rep_B[index18] = new Gaussian[2];
			}
			this.vint39_marginal_F = new PointMass<int>(this.Vint39);
			// Message to 'vint39_marginal' from DerivedVariable factor
			this.vint39_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.Vint39, this.vint39_marginal_F);
			this.Changed_vint39_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'userTraits__0_' Forwards messages.
			this.userTraits__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index15 = 0; index15<50; index15++) {
				// Create array for 'userTraits__0_' Forwards messages.
				this.userTraits__0__F[index15] = new DistributionStructArray<Gaussian,double>(2);
				for(int index17 = 0; index17<2; index17++) {
					this.userTraits__0__F[index15][index17] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits__0_' Forwards messages.
			this.itemTraits__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int index16 = 0; index16<10; index16++) {
				// Create array for 'itemTraits__0_' Forwards messages.
				this.itemTraits__0__F[index16] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int index17 = 0; index17<2; index17++) {
				for(int index16 = 0; index16<10; index16++) {
					this.itemTraits__0__F[index16][index17] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits__0_' Backwards messages.
			this.itemTraits__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int index16 = 0; index16<10; index16++) {
				// Create array for 'itemTraits__0_' Backwards messages.
				this.itemTraits__0__B[index16] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0_' Backwards messages.
			this.userTraits__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index15 = 0; index15<50; index15++) {
				// Create array for 'userTraits__0_' Backwards messages.
				this.userTraits__0__B[index15] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userBias__0_' Backwards messages.
			this.userBias__0__B = new DistributionStructArray<Gaussian,double>(50);
			// Create array for 'itemBias__0_' Backwards messages.
			this.itemBias__0__B = new DistributionStructArray<Gaussian,double>(10);
			// Create array for 'userThresholds__0_' Backwards messages.
			this.userThresholds__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index15 = 0; index15<50; index15++) {
				// Create array for 'userThresholds__0_' Backwards messages.
				this.userThresholds__0__B[index15] = new DistributionStructArray<Gaussian,double>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'evidence' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli EvidenceMarginal()
		{
			return this.evidence_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109_isDone = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11_isDone = false;
				}
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0_isDone = false;
			}
			this.Changed_ratingData_vint39();
			this.Changed_itemData();
			this.Changed_userData();
			this.Changed_vGaussian____11();
			this.Changed_vGaussian__27();
			this.Changed_vGaussian__26();
			this.Constant();
			this.Changed_vint39();
			this.Changed_numberOfIterationsDecreased_vint39_Init_itemData_ratingData_userData_vGaussian____10_vGaussi6(initialise);
			this.Changed_vGaussian____10();
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____10_vGaussian____13(initialise);
			this.Changed_numberOfIterationsDecreased_vGaussian____10_Init_itemData_ratingData_userData_vGaussian____17(initialise);
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____10_vint39_Init_ratingData_userData_vGaussi8(initialise);
			this.Changed_vGaussian____9();
			this.Changed_numberOfIterationsDecreased_vGaussian____9_Init_itemData_ratingData_userData_vGaussian____109(initialise);
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____9_vint39_Init_itemData_ratingData_vGaussia10(initialise);
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____10_vGaussian____9_vint39_Init_rat11(initialise);
			this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____10_vGaussian____11_vGaussian___0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vint39") {
				return this.vint39;
			}
			if (variableName=="vGaussian____9") {
				return this.vGaussian____9;
			}
			if (variableName=="vGaussian____10") {
				return this.vGaussian____10;
			}
			if (variableName=="vGaussian__26") {
				return this.vGaussian__26;
			}
			if (variableName=="vGaussian__27") {
				return this.vGaussian__27;
			}
			if (variableName=="vGaussian____11") {
				return this.vGaussian____11;
			}
			if (variableName=="userData") {
				return this.userData;
			}
			if (variableName=="itemData") {
				return this.itemData;
			}
			if (variableName=="ratingData") {
				return this.ratingData;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ItemBiasMarginal()
		{
			return this.itemBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> ItemDataMarginal()
		{
			return this.itemData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsMarginal()
		{
			return this.itemTraits_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ratingData") {
				return this.RatingDataMarginal();
			}
			if (variableName=="itemData") {
				return this.ItemDataMarginal();
			}
			if (variableName=="userData") {
				return this.UserDataMarginal();
			}
			if (variableName=="vGaussian____11") {
				return this.VGaussian____11Marginal();
			}
			if (variableName=="vGaussian__27") {
				return this.VGaussian__27Marginal();
			}
			if (variableName=="vGaussian__26") {
				return this.VGaussian__26Marginal();
			}
			if (variableName=="vint39") {
				return this.Vint39Marginal();
			}
			if (variableName=="vGaussian____10") {
				return this.VGaussian____10Marginal();
			}
			if (variableName=="vGaussian____9") {
				return this.VGaussian____9Marginal();
			}
			if (variableName=="userTraits") {
				return this.UserTraitsMarginal();
			}
			if (variableName=="itemTraits") {
				return this.ItemTraitsMarginal();
			}
			if (variableName=="userBias") {
				return this.UserBiasMarginal();
			}
			if (variableName=="itemBias") {
				return this.ItemBiasMarginal();
			}
			if (variableName=="userThresholds") {
				return this.UserThresholdsMarginal();
			}
			if (variableName=="evidence") {
				return this.EvidenceMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'ratingData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> RatingDataMarginal()
		{
			return this.ratingData_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vint39") {
				this.vint39 = (int)value;
				return ;
			}
			if (variableName=="vGaussian____9") {
				this.vGaussian____9 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="vGaussian____10") {
				this.vGaussian____10 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="vGaussian__26") {
				this.vGaussian__26 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGaussian__27") {
				this.vGaussian__27 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGaussian____11") {
				this.vGaussian____11 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userData") {
				this.userData = (int[])value;
				return ;
			}
			if (variableName=="itemData") {
				this.itemData = (int[])value;
				return ;
			}
			if (variableName=="ratingData") {
				this.ratingData = (bool[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> UserBiasMarginal()
		{
			return this.userBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> UserDataMarginal()
		{
			return this.userData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholds' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsMarginal()
		{
			return this.userThresholds_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsMarginal()
		{
			return this.userTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____10' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____10Marginal()
		{
			return this.vGaussian____10_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____11' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____11Marginal()
		{
			return this.vGaussian____11_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____9' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____9Marginal()
		{
			return this.vGaussian____9_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__26' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__26Marginal()
		{
			return this.vGaussian__26_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__27' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__27Marginal()
		{
			return this.vGaussian__27_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint39' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint39Marginal()
		{
			return this.vint39_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
