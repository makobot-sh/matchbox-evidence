// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 09:01 on martes, 1 de noviembre de 2022.
	/// </remarks>
	public partial class Model_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_numberOfIterations_vdouble__0 has executed. Set this to false to force re-execution of Changed_numberOfIterations_vdouble__0</summary>
		public bool Changed_numberOfIterations_vdouble__0_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__0 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__0</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__0_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_vdouble__0 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_vdouble__0</summary>
		public bool Changed_numberOfIterationsDecreased_Init_vdouble__0_isInitialised;
		/// <summary>True if Changed_vdouble__0 has executed. Set this to false to force re-execution of Changed_vdouble__0</summary>
		public bool Changed_vdouble__0_isDone;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the vdouble__0 property</summary>
		private double[] Vdouble__0;
		/// <summary>Message to marginal of 'vdouble__0'</summary>
		public DistributionStructArray<Gaussian,double> vdouble__0_marginal_F;
		/// <summary>Message to marginal of 'vdouble2'</summary>
		public Gaussian vdouble2_marginal_F;
		/// <summary>Message to marginal of 'vdouble5'</summary>
		public Gamma vdouble5_marginal_F;
		/// <summary>Message from use of 'vdouble5'</summary>
		public Gamma vdouble5_use_B;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'vdouble__0'</summary>
		public double[] vdouble__0
		{
			get {
				return this.Vdouble__0;
			}
			set {
				if ((value!=null)&&(value.Length!=4)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+4)+" was expected for variable \'vdouble__0\'");
				}
				this.Vdouble__0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vdouble__0_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_vdouble__0_isInitialised = false;
				this.Changed_numberOfIterations_vdouble__0_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of numberOfIterations and vdouble__0</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_numberOfIterations_vdouble__0(int numberOfIterations)
		{
			if (this.Changed_numberOfIterations_vdouble__0_isDone) {
				return ;
			}
			Gaussian vdouble2_F = default(Gaussian);
			this.vdouble2_marginal_F = Gaussian.Uniform();
			Gaussian vdouble2_use_B = Gaussian.Uniform();
			// Message to 'vdouble2' from GaussianFromMeanAndVariance factor
			vdouble2_F = GaussianFromMeanAndVarianceOp.SampleAverageLogarithm(0.0, 100.0);
			Gamma vdouble5_F = default(Gamma);
			// Message to 'vdouble5' from Sample factor
			vdouble5_F = GammaFromShapeAndScaleOp.SampleAverageLogarithm(1.0, 1.0);
			Gamma[] vdouble5_rep_B;
			// Create array for 'vdouble5_rep' Backwards messages.
			vdouble5_rep_B = new Gamma[4];
			for(int index0 = 0; index0<4; index0++) {
				vdouble5_rep_B[index0] = Gamma.Uniform();
			}
			this.vdouble5_marginal_F = Gamma.Uniform();
			Gaussian[] vdouble2_rep_B;
			// Create array for 'vdouble2_rep' Backwards messages.
			vdouble2_rep_B = new Gaussian[4];
			for(int index0 = 0; index0<4; index0++) {
				vdouble2_rep_B[index0] = Gaussian.Uniform();
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				// Message to 'vdouble5_marginal' from Variable factor
				this.vdouble5_marginal_F = VariableVmpOp<double>.MarginalAverageLogarithm<Gamma>(this.vdouble5_use_B, vdouble5_F, this.vdouble5_marginal_F);
				for(int index0 = 0; index0<4; index0++) {
					// Message to 'vdouble2_rep' from Gaussian factor
					vdouble2_rep_B[index0] = GaussianOp.MeanAverageLogarithm(this.Vdouble__0[index0], this.vdouble5_marginal_F);
				}
				// Message to 'vdouble2_use' from Replicate factor
				vdouble2_use_B = ReplicateOp.DefAverageLogarithm<Gaussian>(vdouble2_rep_B, vdouble2_use_B);
				// Message to 'vdouble2_marginal' from Variable factor
				this.vdouble2_marginal_F = VariableVmpOp<double>.MarginalAverageLogarithm<Gaussian>(vdouble2_use_B, vdouble2_F, this.vdouble2_marginal_F);
				for(int index0 = 0; index0<4; index0++) {
					// Message to 'vdouble5_rep' from Gaussian factor
					vdouble5_rep_B[index0] = GaussianOp.PrecisionAverageLogarithm(this.Vdouble__0[index0], this.vdouble2_marginal_F);
				}
				// Message to 'vdouble5_use' from Replicate factor
				this.vdouble5_use_B = ReplicateOp.DefAverageLogarithm<Gamma>(vdouble5_rep_B, this.vdouble5_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'vdouble5_marginal' from Variable factor
			this.vdouble5_marginal_F = VariableVmpOp<double>.MarginalAverageLogarithm<Gamma>(this.vdouble5_use_B, vdouble5_F, this.vdouble5_marginal_F);
			this.Changed_numberOfIterations_vdouble__0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to vdouble__0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_vdouble__0(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_vdouble__0_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_vdouble__0_isInitialised)) {
				return ;
			}
			this.vdouble5_use_B = Gamma.Uniform();
			this.Changed_numberOfIterationsDecreased_Init_vdouble__0_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_vdouble__0_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of vdouble__0</summary>
		private void Changed_vdouble__0()
		{
			if (this.Changed_vdouble__0_isDone) {
				return ;
			}
			// Create array for 'vdouble__0_marginal' Forwards messages.
			this.vdouble__0_marginal_F = new DistributionStructArray<Gaussian,double>(4);
			for(int index0 = 0; index0<4; index0++) {
				this.vdouble__0_marginal_F[index0] = Gaussian.Uniform();
			}
			// Message to 'vdouble__0_marginal' from DerivedVariableVmp factor
			this.vdouble__0_marginal_F = DerivedVariableVmpOp<double[]>.MarginalAverageLogarithm<DistributionStructArray<Gaussian,double>,double[]>(this.Vdouble__0, this.vdouble__0_marginal_F);
			this.Changed_vdouble__0_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_Init_vdouble__0_isDone = false;
				}
				this.Changed_numberOfIterations_vdouble__0_isDone = false;
			}
			this.Changed_vdouble__0();
			this.Changed_numberOfIterationsDecreased_Init_vdouble__0(initialise);
			this.Changed_numberOfIterations_vdouble__0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vdouble__0") {
				return this.vdouble__0;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="vdouble__0") {
				return this.Vdouble__0Marginal();
			}
			if (variableName=="vdouble2") {
				return this.Vdouble2Marginal();
			}
			if (variableName=="vdouble5") {
				return this.Vdouble5Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vdouble__0") {
				this.vdouble__0 = (double[])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble__0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> Vdouble__0Marginal()
		{
			return this.vdouble__0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian Vdouble2Marginal()
		{
			return this.vdouble2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vdouble5' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gamma Vdouble5Marginal()
		{
			return this.vdouble5_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
