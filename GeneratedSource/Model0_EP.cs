// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 17:23 on viernes, 6 de octubre de 2023.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_itemData has executed. Set this to false to force re-execution of Changed_itemData</summary>
		public bool Changed_itemData_isDone;
		/// <summary>True if Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21</summary>
		public bool Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11 has performed initialisation. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7 has performed initialisation. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5</summary>
		public bool Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5</summary>
		public bool Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised;
		/// <summary>True if Changed_ratingData_vint0 has executed. Set this to false to force re-execution of Changed_ratingData_vint0</summary>
		public bool Changed_ratingData_vint0_isDone;
		/// <summary>True if Changed_userData has executed. Set this to false to force re-execution of Changed_userData</summary>
		public bool Changed_userData_isDone;
		/// <summary>True if Changed_vGaussian____0 has executed. Set this to false to force re-execution of Changed_vGaussian____0</summary>
		public bool Changed_vGaussian____0_isDone;
		/// <summary>True if Changed_vGaussian____1 has executed. Set this to false to force re-execution of Changed_vGaussian____1</summary>
		public bool Changed_vGaussian____1_isDone;
		/// <summary>True if Changed_vGaussian____2 has executed. Set this to false to force re-execution of Changed_vGaussian____2</summary>
		public bool Changed_vGaussian____2_isDone;
		/// <summary>True if Changed_vGaussian__2 has executed. Set this to false to force re-execution of Changed_vGaussian__2</summary>
		public bool Changed_vGaussian__2_isDone;
		/// <summary>True if Changed_vGaussian__3 has executed. Set this to false to force re-execution of Changed_vGaussian__3</summary>
		public bool Changed_vGaussian__3_isDone;
		/// <summary>True if Changed_vint0 has executed. Set this to false to force re-execution of Changed_vint0</summary>
		public bool Changed_vint0_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public DistributionStructArray<Gaussian,double> itemBias_itemitemData_index3__B;
		/// <summary>Message to marginal of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_marginal_F;
		/// <summary>Message from use of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_use_B;
		/// <summary>Field backing the itemData property</summary>
		private int[] ItemData;
		/// <summary>Message to marginal of 'itemData'</summary>
		public PointMass<int[]> itemData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_itemitemData_index3__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_itemitemData_index3__F;
		/// <summary>Message to marginal of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_marginal_F;
		/// <summary>Message from use of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_F_marginal;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the ratingData property</summary>
		private bool[][] RatingData;
		/// <summary>Message to marginal of 'ratingData'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ratingData_marginal_F;
		public DistributionStructArray<Gaussian,double> userBias_F;
		public DistributionStructArray<Gaussian,double> userBias_itemuserData_index3__B;
		public DistributionStructArray<Gaussian,double> userBias_itemuserData_index3__F;
		/// <summary>Message to marginal of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_marginal_F;
		/// <summary>Message from use of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> userBias_use_F_marginal;
		/// <summary>Field backing the userData property</summary>
		private int[] UserData;
		/// <summary>Message to marginal of 'userData'</summary>
		public PointMass<int[]> userData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_itemuserData_index3__B;
		/// <summary>Message to marginal of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_marginal_F;
		/// <summary>Message from use of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_itemuserData_index3__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_itemuserData_index3__F;
		/// <summary>Message to marginal of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_marginal_F;
		/// <summary>Message from use of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_F_marginal;
		public DistributionStructArray<Gaussian,double>[] vdouble__16_F;
		public Gaussian[] vdouble32_F;
		public Gaussian[][] vdouble32_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] vdouble32_rep_B_toDef;
		/// <summary>Field backing the vGaussian____0 property</summary>
		private Gaussian[][] VGaussian____0;
		/// <summary>Message to marginal of 'vGaussian____0'</summary>
		public PointMass<Gaussian[][]> vGaussian____0_marginal_F;
		/// <summary>Field backing the vGaussian____1 property</summary>
		private Gaussian[][] VGaussian____1;
		/// <summary>Message to marginal of 'vGaussian____1'</summary>
		public PointMass<Gaussian[][]> vGaussian____1_marginal_F;
		/// <summary>Field backing the vGaussian____2 property</summary>
		private Gaussian[][] VGaussian____2;
		/// <summary>Message to marginal of 'vGaussian____2'</summary>
		public PointMass<Gaussian[][]> vGaussian____2_marginal_F;
		/// <summary>Field backing the vGaussian__2 property</summary>
		private Gaussian[] VGaussian__2;
		/// <summary>Message to marginal of 'vGaussian__2'</summary>
		public PointMass<Gaussian[]> vGaussian__2_marginal_F;
		/// <summary>Field backing the vGaussian__3 property</summary>
		private Gaussian[] VGaussian__3;
		/// <summary>Message to marginal of 'vGaussian__3'</summary>
		public PointMass<Gaussian[]> vGaussian__3_marginal_F;
		/// <summary>Field backing the vint0 property</summary>
		private int Vint0;
		/// <summary>Message to marginal of 'vint0'</summary>
		public PointMass<int> vint0_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'itemData'</summary>
		public int[] itemData
		{
			get {
				return this.ItemData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint0)+" was expected for variable \'itemData\'");
				}
				this.ItemData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'ratingData'</summary>
		public bool[][] ratingData
		{
			get {
				return this.RatingData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint0)+" was expected for variable \'ratingData\'");
				}
				this.RatingData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ratingData_vint0_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userData'</summary>
		public int[] userData
		{
			get {
				return this.UserData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint0)+" was expected for variable \'userData\'");
				}
				this.UserData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____0'</summary>
		public Gaussian[][] vGaussian____0
		{
			get {
				return this.VGaussian____0;
			}
			set {
				if ((value!=null)&&(value.Length!=50)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+50)+" was expected for variable \'vGaussian____0\'");
				}
				this.VGaussian____0 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian____0_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isDone = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____1'</summary>
		public Gaussian[][] vGaussian____1
		{
			get {
				return this.VGaussian____1;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'vGaussian____1\'");
				}
				this.VGaussian____1 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_vGaussian____1_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____2'</summary>
		public Gaussian[][] vGaussian____2
		{
			get {
				return this.VGaussian____2;
			}
			set {
				if ((value!=null)&&(value.Length!=50)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+50)+" was expected for variable \'vGaussian____2\'");
				}
				this.VGaussian____2 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian____2_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__2'</summary>
		public Gaussian[] vGaussian__2
		{
			get {
				return this.VGaussian__2;
			}
			set {
				if ((value!=null)&&(value.Length!=50)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+50)+" was expected for variable \'vGaussian__2\'");
				}
				this.VGaussian__2 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian__2_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isDone = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__3'</summary>
		public Gaussian[] vGaussian__3
		{
			get {
				return this.VGaussian__3;
			}
			set {
				if ((value!=null)&&(value.Length!=10)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+10)+" was expected for variable \'vGaussian__3\'");
				}
				this.VGaussian__3 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian__3_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint0'</summary>
		public int vint0
		{
			get {
				return this.Vint0;
			}
			set {
				if (this.Vint0!=value) {
					this.Vint0 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ratingData_vint0_isDone = false;
					this.Changed_vint0_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = false;
					this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = false;
					this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of itemData</summary>
		private void Changed_itemData()
		{
			if (this.Changed_itemData_isDone) {
				return ;
			}
			// Create array for 'itemData_marginal' Forwards messages.
			this.itemData_marginal_F = new PointMass<int[]>(this.ItemData);
			// Message to 'itemData_marginal' from DerivedVariable factor
			this.itemData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.ItemData, this.itemData_marginal_F);
			this.Changed_itemData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterations and ratingData and userData and vGaussian____0 and vGaussian____1 and vGaussian____2 and vGaussian__2 and vGaussian__3 and vint0</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21(int numberOfIterations)
		{
			if (this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> itemBias_F;
			// Create array for 'itemBias' Forwards messages.
			itemBias_F = new DistributionStructArray<Gaussian,double>(10);
			for(int index1 = 0; index1<10; index1++) {
				itemBias_F[index1] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_F;
			// Create array for 'userThresholds' Forwards messages.
			userThresholds_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index0 = 0; index0<50; index0++) {
				// Create array for 'userThresholds' Forwards messages.
				userThresholds_F[index0] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int index4 = 0; index4<2; index4++) {
				for(int index0 = 0; index0<50; index0++) {
					userThresholds_F[index0][index4] = Gaussian.Uniform();
				}
			}
			// Create array for 'userTraits_marginal' Forwards messages.
			this.userTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			DistributionStructArray<Gaussian,double> itemBias_use_F_marginal;
			itemBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(itemBias_F);
			DistributionStructArray<Gaussian,double> itemBias_itemitemData_index3__F;
			// Create array for 'itemBias_itemitemData_index3_' Forwards messages.
			itemBias_itemitemData_index3__F = new DistributionStructArray<Gaussian,double>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				itemBias_itemitemData_index3__F[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble28_F'
			Gaussian[] vdouble28_F = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble28_F[index3] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_F_marginal;
			userThresholds_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(userThresholds_F);
			for(int index4 = 0; index4<2; index4++) {
				for(int index0 = 0; index0<50; index0++) {
					// Message to 'userThresholds' from Random factor
					userThresholds_F[index0][index4] = ArrayHelper.SetTo<Gaussian>(userThresholds_F[index0][index4], this.VGaussian____2[index0][index4]);
				}
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_itemuserData_index3__F;
			// Create array for 'userThresholds_itemuserData_index3_' Forwards messages.
			userThresholds_itemuserData_index3__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'userThresholds_itemuserData_index3_' Forwards messages.
				userThresholds_itemuserData_index3__F[index3] = new DistributionStructArray<Gaussian,double>(2);
				for(int index4 = 0; index4<2; index4++) {
					userThresholds_itemuserData_index3__F[index3][index4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__20_F'
			DistributionStructArray<Gaussian,double>[] vdouble__20_F = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble__20' Forwards messages.
				vdouble__20_F[index3] = new DistributionStructArray<Gaussian,double>(2);
				for(int index4 = 0; index4<2; index4++) {
					vdouble__20_F[index3][index4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble29_F'
			Gaussian[] vdouble29_F = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble29_F[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble30_F'
			Gaussian[] vdouble30_F = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble30_F[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble32_rep_F_marginal'
			Gaussian[] vdouble32_rep_F_marginal = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble32_rep_F_marginal[index3] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.vdouble32_F[index3]);
			}
			// Create array for replicates of 'vdouble32_rep_F'
			Gaussian[][] vdouble32_rep_F = new Gaussian[this.Vint0][];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble32_rep' Forwards messages.
				vdouble32_rep_F[index3] = new Gaussian[2];
				for(int index4 = 0; index4<2; index4++) {
					vdouble32_rep_F[index3][index4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__23_F'
			DistributionStructArray<Gaussian,double>[] vdouble__23_F = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble__23' Forwards messages.
				vdouble__23_F[index3] = new DistributionStructArray<Gaussian,double>(2);
				for(int index4 = 0; index4<2; index4++) {
					vdouble__23_F[index3][index4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__23_B'
			DistributionStructArray<Gaussian,double>[] vdouble__23_B = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble__23' Backwards messages.
				vdouble__23_B[index3] = new DistributionStructArray<Gaussian,double>(2);
				for(int index4 = 0; index4<2; index4++) {
					vdouble__23_B[index3][index4] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble30_B'
			Gaussian[] vdouble30_B = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble30_B[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble29_B'
			Gaussian[] vdouble29_B = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble29_B[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__16_B'
			DistributionStructArray<Gaussian,double>[] vdouble__16_B = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble__16' Backwards messages.
				vdouble__16_B[index3] = new DistributionStructArray<Gaussian,double>(2);
				for(int index2 = 0; index2<2; index2++) {
					vdouble__16_B[index3][index2] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble28_B'
			Gaussian[] vdouble28_B = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				vdouble28_B[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__20_use_B'
			DistributionStructArray<Gaussian,double>[] vdouble__20_use_B = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble__20_use' Backwards messages.
				vdouble__20_use_B[index3] = new DistributionStructArray<Gaussian,double>(2);
				for(int index4 = 0; index4<2; index4++) {
					vdouble__20_use_B[index3][index4] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.itemTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_F, this.itemTraits_use_B, this.itemTraits_use_F_marginal);
				for(int index3 = 0; index3<this.Vint0; index3++) {
					// Message to 'itemTraits_itemitemData_index3_' from GetItems factor
					this.itemTraits_itemitemData_index3__F[index3] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_itemitemData_index3__B[index3], this.itemTraits_F, this.itemTraits_use_F_marginal, this.ItemData, index3, this.itemTraits_itemitemData_index3__F[index3]);
				}
				itemBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__3, this.itemBias_use_B, itemBias_use_F_marginal);
				userThresholds_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(userThresholds_F, this.userThresholds_use_B, userThresholds_use_F_marginal);
				for(int index3 = 0; index3<this.Vint0; index3++) {
					// Message to 'itemBias_itemitemData_index3_' from GetItems factor
					itemBias_itemitemData_index3__F[index3] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBias_itemitemData_index3__B[index3], itemBias_F, itemBias_use_F_marginal, this.ItemData, index3, itemBias_itemitemData_index3__F[index3]);
					// Message to 'vdouble28' from Plus factor
					vdouble28_F[index3] = DoublePlusOp.SumAverageConditional(this.userBias_itemuserData_index3__F[index3], itemBias_itemitemData_index3__F[index3]);
					// Message to 'userThresholds_itemuserData_index3_' from GetItems factor
					userThresholds_itemuserData_index3__F[index3] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userThresholds_itemuserData_index3__B[index3], userThresholds_F, userThresholds_use_F_marginal, this.UserData, index3, userThresholds_itemuserData_index3__F[index3]);
					// Message to 'vdouble29' from Sum factor
					vdouble29_F[index3] = FastSumOp.SumAverageConditional(this.vdouble__16_F[index3]);
					// Message to 'vdouble30' from Plus factor
					vdouble30_F[index3] = DoublePlusOp.SumAverageConditional(vdouble28_F[index3], vdouble29_F[index3]);
					// Message to 'vdouble32' from GaussianFromMeanAndVariance factor
					this.vdouble32_F[index3] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(vdouble30_F[index3], 0.10000000000000001);
					vdouble32_rep_F_marginal[index3] = ReplicateOp_Divide.Marginal<Gaussian>(this.vdouble32_rep_B_toDef[index3], this.vdouble32_F[index3], vdouble32_rep_F_marginal[index3]);
					for(int index4 = 0; index4<2; index4++) {
						// Message to 'vdouble__20' from GaussianFromMeanAndVariance factor
						vdouble__20_F[index3][index4] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(userThresholds_itemuserData_index3__F[index3][index4], 0.10000000000000001);
						// Message to 'vdouble32_rep' from Replicate factor
						vdouble32_rep_F[index3][index4] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.vdouble32_rep_B[index3][index4], vdouble32_rep_F_marginal[index3], index4, vdouble32_rep_F[index3][index4]);
						// Message to 'vdouble__23' from Difference factor
						vdouble__23_F[index3][index4] = DoublePlusOp.AAverageConditional(vdouble32_rep_F[index3][index4], vdouble__20_F[index3][index4]);
						// Message to 'vdouble__23' from IsPositive factor
						vdouble__23_B[index3][index4] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.RatingData[index3][index4]), vdouble__23_F[index3][index4]);
						// Message to 'vdouble32_rep' from Difference factor
						this.vdouble32_rep_B[index3][index4] = DoublePlusOp.SumAverageConditional(vdouble__23_B[index3][index4], vdouble__20_F[index3][index4]);
						// Message to 'vdouble__20_use' from Difference factor
						vdouble__20_use_B[index3][index4] = DoublePlusOp.BAverageConditional(vdouble32_rep_F[index3][index4], vdouble__23_B[index3][index4]);
						// Message to 'userThresholds_itemuserData_index3_' from GaussianFromMeanAndVariance factor
						this.userThresholds_itemuserData_index3__B[index3][index4] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble__20_use_B[index3][index4], 0.10000000000000001);
					}
					this.vdouble32_rep_B_toDef[index3] = ReplicateOp_Divide.ToDef<Gaussian>(this.vdouble32_rep_B[index3], this.vdouble32_rep_B_toDef[index3]);
					// Message to 'vdouble30' from GaussianFromMeanAndVariance factor
					vdouble30_B[index3] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.vdouble32_rep_B_toDef[index3], 0.10000000000000001);
					// Message to 'vdouble29' from Plus factor
					vdouble29_B[index3] = DoublePlusOp.BAverageConditional(vdouble30_B[index3], vdouble28_F[index3]);
					// Message to 'vdouble__16' from Sum factor
					vdouble__16_B[index3] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble29_B[index3], vdouble29_F[index3], this.vdouble__16_F[index3], vdouble__16_B[index3]);
					// Message to 'vdouble28' from Plus factor
					vdouble28_B[index3] = DoublePlusOp.AAverageConditional(vdouble30_B[index3], vdouble29_F[index3]);
					// Message to 'userBias_itemuserData_index3_' from Plus factor
					this.userBias_itemuserData_index3__B[index3] = DoublePlusOp.AAverageConditional(vdouble28_B[index3], itemBias_itemitemData_index3__F[index3]);
					for(int index2 = 0; index2<2; index2++) {
						// Message to 'userTraits_itemuserData_index3_' from Product factor
						this.userTraits_itemuserData_index3__B[index3][index2] = GaussianProductOp_SHG09.AAverageConditional(vdouble__16_B[index3][index2], this.itemTraits_itemitemData_index3__F[index3][index2], this.itemTraits_itemitemData_index3__B[index3][index2]);
					}
				}
				// Message to 'userTraits_use' from GetItems factor
				this.userTraits_use_B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits_itemuserData_index3__B, this.UserData, this.userTraits_use_B);
				this.userTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_F, this.userTraits_use_B, this.userTraits_use_F_marginal);
				for(int index3 = 0; index3<this.Vint0; index3++) {
					// Message to 'userTraits_itemuserData_index3_' from GetItems factor
					this.userTraits_itemuserData_index3__F[index3] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_itemuserData_index3__B[index3], this.userTraits_F, this.userTraits_use_F_marginal, this.UserData, index3, this.userTraits_itemuserData_index3__F[index3]);
					for(int index2 = 0; index2<2; index2++) {
						// Message to 'itemTraits_itemitemData_index3_' from Product factor
						this.itemTraits_itemitemData_index3__B[index3][index2] = GaussianProductOp_SHG09.BAverageConditional(vdouble__16_B[index3][index2], this.userTraits_itemuserData_index3__F[index3][index2], this.userTraits_itemuserData_index3__B[index3][index2]);
						// Message to 'vdouble__16' from Product factor
						this.vdouble__16_F[index3][index2] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits_itemuserData_index3__F[index3][index2], this.itemTraits_itemitemData_index3__F[index3][index2], this.userTraits_itemuserData_index3__B[index3][index2], this.itemTraits_itemitemData_index3__B[index3][index2]);
					}
				}
				// Message to 'itemTraits_use' from GetItems factor
				this.itemTraits_use_B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits_itemitemData_index3__B, this.ItemData, this.itemTraits_use_B);
				// Message to 'userBias_use' from GetItems factor
				this.userBias_use_B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.userBias_itemuserData_index3__B, this.UserData, this.userBias_use_B);
				this.userBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__2, this.userBias_use_B, this.userBias_use_F_marginal);
				for(int index3 = 0; index3<this.Vint0; index3++) {
					// Message to 'userBias_itemuserData_index3_' from GetItems factor
					this.userBias_itemuserData_index3__F[index3] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias_itemuserData_index3__B[index3], this.userBias_F, this.userBias_use_F_marginal, this.UserData, index3, this.userBias_itemuserData_index3__F[index3]);
					// Message to 'itemBias_itemitemData_index3_' from Plus factor
					this.itemBias_itemitemData_index3__B[index3] = DoublePlusOp.BAverageConditional(vdouble28_B[index3], this.userBias_itemuserData_index3__F[index3]);
				}
				// Message to 'itemBias_use' from GetItems factor
				this.itemBias_use_B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.itemBias_itemitemData_index3__B, this.ItemData, this.itemBias_use_B);
				// Message to 'userThresholds_use' from GetItems factor
				this.userThresholds_use_B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userThresholds_itemuserData_index3__B, this.UserData, this.userThresholds_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int index0 = 0; index0<50; index0++) {
				// Create array for 'userTraits_marginal' Forwards messages.
				this.userTraits_marginal_F[index0] = new DistributionStructArray<Gaussian,double>(2);
				for(int index2 = 0; index2<2; index2++) {
					this.userTraits_marginal_F[index0][index2] = Gaussian.Uniform();
					// Message to 'userTraits_marginal' from Variable factor
					this.userTraits_marginal_F[index0][index2] = VariableOp.MarginalAverageConditional<Gaussian>(this.userTraits_use_B[index0][index2], this.VGaussian____0[index0][index2], this.userTraits_marginal_F[index0][index2]);
				}
			}
			// Create array for 'itemTraits_marginal' Forwards messages.
			this.itemTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int index1 = 0; index1<10; index1++) {
				// Create array for 'itemTraits_marginal' Forwards messages.
				this.itemTraits_marginal_F[index1] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int index2 = 0; index2<2; index2++) {
				for(int index1 = 0; index1<10; index1++) {
					this.itemTraits_marginal_F[index1][index2] = Gaussian.Uniform();
					// Message to 'itemTraits_marginal' from Variable factor
					this.itemTraits_marginal_F[index1][index2] = VariableOp.MarginalAverageConditional<Gaussian>(this.itemTraits_use_B[index1][index2], this.VGaussian____1[index1][index2], this.itemTraits_marginal_F[index1][index2]);
				}
			}
			// Create array for 'userBias_marginal' Forwards messages.
			this.userBias_marginal_F = new DistributionStructArray<Gaussian,double>(50);
			for(int index0 = 0; index0<50; index0++) {
				this.userBias_marginal_F[index0] = Gaussian.Uniform();
				// Message to 'userBias_marginal' from Variable factor
				this.userBias_marginal_F[index0] = VariableOp.MarginalAverageConditional<Gaussian>(this.userBias_use_B[index0], this.VGaussian__2[index0], this.userBias_marginal_F[index0]);
			}
			// Create array for 'itemBias_marginal' Forwards messages.
			this.itemBias_marginal_F = new DistributionStructArray<Gaussian,double>(10);
			for(int index1 = 0; index1<10; index1++) {
				this.itemBias_marginal_F[index1] = Gaussian.Uniform();
				// Message to 'itemBias_marginal' from Variable factor
				this.itemBias_marginal_F[index1] = VariableOp.MarginalAverageConditional<Gaussian>(this.itemBias_use_B[index1], this.VGaussian__3[index1], this.itemBias_marginal_F[index1]);
			}
			// Create array for 'userThresholds_marginal' Forwards messages.
			this.userThresholds_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index0 = 0; index0<50; index0++) {
				// Create array for 'userThresholds_marginal' Forwards messages.
				this.userThresholds_marginal_F[index0] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int index4 = 0; index4<2; index4++) {
				for(int index0 = 0; index0<50; index0++) {
					this.userThresholds_marginal_F[index0][index4] = Gaussian.Uniform();
					// Message to 'userThresholds_marginal' from Variable factor
					this.userThresholds_marginal_F[index0][index4] = VariableOp.MarginalAverageConditional<Gaussian>(this.userThresholds_use_B[index0][index4], this.VGaussian____2[index0][index4], this.userThresholds_marginal_F[index0][index4]);
				}
			}
			this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterationsDecreased and userData and vGaussian____0 and vGaussian____1 and vint0 and must reset on changes to ratingData and vGaussian____2 and vGaussian__2 and vGaussian__3</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11(bool initialise)
		{
			if (this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone&&((!initialise)||this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised)) {
				return ;
			}
			for(int index3 = 0; index3<this.Vint0; index3++) {
				for(int index2 = 0; index2<2; index2++) {
					// Message to 'vdouble__16' from Product factor
					this.vdouble__16_F[index3][index2] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits_itemuserData_index3__F[index3][index2], this.itemTraits_itemitemData_index3__F[index3][index2], this.userTraits_itemuserData_index3__B[index3][index2], this.itemTraits_itemitemData_index3__B[index3][index2]);
				}
			}
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = true;
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterationsDecreased and vGaussian____1 and vint0 and must reset on changes to ratingData and userData and vGaussian____0 and vGaussian____2 and vGaussian__2 and vGaussian__3</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7(bool initialise)
		{
			if (this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone&&((!initialise)||this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised)) {
				return ;
			}
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Message to 'itemTraits_itemitemData_index3_' from GetItems factor
				this.itemTraits_itemitemData_index3__F[index3] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_itemitemData_index3__B[index3], this.itemTraits_F, this.itemTraits_use_F_marginal, this.ItemData, index3, this.itemTraits_itemitemData_index3__F[index3]);
			}
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone = true;
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to itemData and ratingData and userData and vGaussian____0 and vGaussian____1 and vGaussian____2 and vGaussian__2 and vGaussian__3 and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised)) {
				return ;
			}
			this.itemTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits_F);
			for(int index2 = 0; index2<2; index2++) {
				for(int index1 = 0; index1<10; index1++) {
					this.itemTraits_use_B[index1][index2] = Gaussian.Uniform();
				}
			}
			this.userTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits_F);
			for(int index0 = 0; index0<50; index0++) {
				for(int index2 = 0; index2<2; index2++) {
					this.userTraits_use_B[index0][index2] = Gaussian.Uniform();
				}
			}
			for(int index1 = 0; index1<10; index1++) {
				this.itemBias_use_B[index1] = Gaussian.Uniform();
			}
			this.userBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.userBias_F);
			for(int index0 = 0; index0<50; index0++) {
				this.userBias_use_B[index0] = Gaussian.Uniform();
			}
			for(int index4 = 0; index4<2; index4++) {
				for(int index0 = 0; index0<50; index0++) {
					this.userThresholds_use_B[index0][index4] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userData and vGaussian____0 and vint0 and must reset on changes to itemData and ratingData and vGaussian____1 and vGaussian____2 and vGaussian__2 and vGaussian__3</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised)) {
				return ;
			}
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Message to 'userTraits_itemuserData_index3_' from GetItems factor
				this.userTraits_itemuserData_index3__F[index3] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_itemuserData_index3__B[index3], this.userTraits_F, this.userTraits_use_F_marginal, this.UserData, index3, this.userTraits_itemuserData_index3__F[index3]);
			}
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone = true;
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userData and vGaussian__2 and vint0 and must reset on changes to itemData and ratingData and vGaussian____0 and vGaussian____1 and vGaussian____2 and vGaussian__3</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised)) {
				return ;
			}
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Message to 'userBias_itemuserData_index3_' from GetItems factor
				this.userBias_itemuserData_index3__F[index3] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias_itemuserData_index3__B[index3], this.userBias_F, this.userBias_use_F_marginal, this.UserData, index3, this.userBias_itemuserData_index3__F[index3]);
			}
			this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone = true;
			this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian____0 and must reset on changes to itemData and ratingData and userData and vGaussian____1 and vGaussian____2 and vGaussian__2 and vGaussian__3 and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised)) {
				return ;
			}
			this.userTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_F, this.userTraits_use_B, this.userTraits_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian____1 and must reset on changes to itemData and ratingData and userData and vGaussian____0 and vGaussian____2 and vGaussian__2 and vGaussian__3 and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised)) {
				return ;
			}
			this.itemTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_F, this.itemTraits_use_B, this.itemTraits_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian__2 and must reset on changes to itemData and ratingData and userData and vGaussian____0 and vGaussian____1 and vGaussian____2 and vGaussian__3 and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised)) {
				return ;
			}
			this.userBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__2, this.userBias_use_B, this.userBias_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vint0 and must reset on changes to itemData and ratingData and userData and vGaussian____0 and vGaussian____1 and vGaussian____2 and vGaussian__2 and vGaussian__3</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised)) {
				return ;
			}
			for(int index3 = 0; index3<this.Vint0; index3++) {
				for(int index2 = 0; index2<2; index2++) {
					this.itemTraits_itemitemData_index3__F[index3][index2] = Gaussian.Uniform();
					this.itemTraits_itemitemData_index3__B[index3][index2] = Gaussian.Uniform();
					this.vdouble__16_F[index3][index2] = Gaussian.Uniform();
					this.userTraits_itemuserData_index3__B[index3][index2] = Gaussian.Uniform();
					this.userTraits_itemuserData_index3__F[index3][index2] = Gaussian.Uniform();
				}
				this.itemBias_itemitemData_index3__B[index3] = Gaussian.Uniform();
				this.userBias_itemuserData_index3__F[index3] = Gaussian.Uniform();
				this.userBias_itemuserData_index3__B[index3] = Gaussian.Uniform();
				for(int index4 = 0; index4<2; index4++) {
					this.userThresholds_itemuserData_index3__B[index3][index4] = Gaussian.Uniform();
				}
				this.vdouble32_rep_B_toDef[index3] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.vdouble32_F[index3]);
				for(int index4 = 0; index4<2; index4++) {
					this.vdouble32_rep_B[index3][index4] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isDone = true;
			this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ratingData and vint0</summary>
		private void Changed_ratingData_vint0()
		{
			if (this.Changed_ratingData_vint0_isDone) {
				return ;
			}
			// Create array for 'ratingData_marginal' Forwards messages.
			this.ratingData_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'ratingData_marginal' Forwards messages.
				this.ratingData_marginal_F[index3] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int index4 = 0; index4<2; index4++) {
					this.ratingData_marginal_F[index3][index4] = Bernoulli.Uniform();
				}
			}
			// Message to 'ratingData_marginal' from DerivedVariable factor
			this.ratingData_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.RatingData, this.ratingData_marginal_F);
			this.Changed_ratingData_vint0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userData</summary>
		private void Changed_userData()
		{
			if (this.Changed_userData_isDone) {
				return ;
			}
			// Create array for 'userData_marginal' Forwards messages.
			this.userData_marginal_F = new PointMass<int[]>(this.UserData);
			// Message to 'userData_marginal' from DerivedVariable factor
			this.userData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.UserData, this.userData_marginal_F);
			this.Changed_userData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____0</summary>
		private void Changed_vGaussian____0()
		{
			if (this.Changed_vGaussian____0_isDone) {
				return ;
			}
			for(int index0 = 0; index0<50; index0++) {
				for(int index2 = 0; index2<2; index2++) {
					// Message to 'userTraits' from Random factor
					this.userTraits_F[index0][index2] = ArrayHelper.SetTo<Gaussian>(this.userTraits_F[index0][index2], this.VGaussian____0[index0][index2]);
				}
			}
			// Create array for 'vGaussian____0_marginal' Forwards messages.
			this.vGaussian____0_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____0);
			// Message to 'vGaussian____0_marginal' from DerivedVariable factor
			this.vGaussian____0_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____0, this.vGaussian____0_marginal_F);
			this.Changed_vGaussian____0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____1</summary>
		private void Changed_vGaussian____1()
		{
			if (this.Changed_vGaussian____1_isDone) {
				return ;
			}
			for(int index2 = 0; index2<2; index2++) {
				for(int index1 = 0; index1<10; index1++) {
					// Message to 'itemTraits' from Random factor
					this.itemTraits_F[index1][index2] = ArrayHelper.SetTo<Gaussian>(this.itemTraits_F[index1][index2], this.VGaussian____1[index1][index2]);
				}
			}
			// Create array for 'vGaussian____1_marginal' Forwards messages.
			this.vGaussian____1_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____1);
			// Message to 'vGaussian____1_marginal' from DerivedVariable factor
			this.vGaussian____1_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____1, this.vGaussian____1_marginal_F);
			this.Changed_vGaussian____1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____2</summary>
		private void Changed_vGaussian____2()
		{
			if (this.Changed_vGaussian____2_isDone) {
				return ;
			}
			// Create array for 'vGaussian____2_marginal' Forwards messages.
			this.vGaussian____2_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____2);
			// Message to 'vGaussian____2_marginal' from DerivedVariable factor
			this.vGaussian____2_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____2, this.vGaussian____2_marginal_F);
			this.Changed_vGaussian____2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__2</summary>
		private void Changed_vGaussian__2()
		{
			if (this.Changed_vGaussian__2_isDone) {
				return ;
			}
			// Create array for 'vGaussian__2_marginal' Forwards messages.
			this.vGaussian__2_marginal_F = new PointMass<Gaussian[]>(this.VGaussian__2);
			// Message to 'vGaussian__2_marginal' from DerivedVariable factor
			this.vGaussian__2_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.VGaussian__2, this.vGaussian__2_marginal_F);
			this.Changed_vGaussian__2_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__3</summary>
		private void Changed_vGaussian__3()
		{
			if (this.Changed_vGaussian__3_isDone) {
				return ;
			}
			// Create array for 'vGaussian__3_marginal' Forwards messages.
			this.vGaussian__3_marginal_F = new PointMass<Gaussian[]>(this.VGaussian__3);
			// Message to 'vGaussian__3_marginal' from DerivedVariable factor
			this.vGaussian__3_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.VGaussian__3, this.vGaussian__3_marginal_F);
			this.Changed_vGaussian__3_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint0</summary>
		private void Changed_vint0()
		{
			if (this.Changed_vint0_isDone) {
				return ;
			}
			// Create array for 'itemTraits_itemitemData_index3_' Forwards messages.
			this.itemTraits_itemitemData_index3__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'itemTraits_itemitemData_index3_' Forwards messages.
				this.itemTraits_itemitemData_index3__F[index3] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemTraits_itemitemData_index3_' Backwards messages.
			this.itemTraits_itemitemData_index3__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'itemTraits_itemitemData_index3_' Backwards messages.
				this.itemTraits_itemitemData_index3__B[index3] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'vdouble__16_F'
			this.vdouble__16_F = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble__16' Forwards messages.
				this.vdouble__16_F[index3] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits_itemuserData_index3_' Backwards messages.
			this.userTraits_itemuserData_index3__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'userTraits_itemuserData_index3_' Backwards messages.
				this.userTraits_itemuserData_index3__B[index3] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits_itemuserData_index3_' Forwards messages.
			this.userTraits_itemuserData_index3__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'userTraits_itemuserData_index3_' Forwards messages.
				this.userTraits_itemuserData_index3__F[index3] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemBias_itemitemData_index3_' Backwards messages.
			this.itemBias_itemitemData_index3__B = new DistributionStructArray<Gaussian,double>(this.Vint0);
			// Create array for 'userBias_itemuserData_index3_' Forwards messages.
			this.userBias_itemuserData_index3__F = new DistributionStructArray<Gaussian,double>(this.Vint0);
			// Create array for 'userBias_itemuserData_index3_' Backwards messages.
			this.userBias_itemuserData_index3__B = new DistributionStructArray<Gaussian,double>(this.Vint0);
			// Create array for 'userThresholds_itemuserData_index3_' Backwards messages.
			this.userThresholds_itemuserData_index3__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'userThresholds_itemuserData_index3_' Backwards messages.
				this.userThresholds_itemuserData_index3__B[index3] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'vdouble32_F'
			this.vdouble32_F = new Gaussian[this.Vint0];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				this.vdouble32_F[index3] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble32_rep_B_toDef'
			this.vdouble32_rep_B_toDef = new Gaussian[this.Vint0];
			// Create array for replicates of 'vdouble32_rep_B'
			this.vdouble32_rep_B = new Gaussian[this.Vint0][];
			for(int index3 = 0; index3<this.Vint0; index3++) {
				// Create array for 'vdouble32_rep' Backwards messages.
				this.vdouble32_rep_B[index3] = new Gaussian[2];
			}
			this.vint0_marginal_F = new PointMass<int>(this.Vint0);
			// Message to 'vint0_marginal' from DerivedVariable factor
			this.vint0_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.Vint0, this.vint0_marginal_F);
			this.Changed_vint0_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'userTraits' Forwards messages.
			this.userTraits_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index0 = 0; index0<50; index0++) {
				// Create array for 'userTraits' Forwards messages.
				this.userTraits_F[index0] = new DistributionStructArray<Gaussian,double>(2);
				for(int index2 = 0; index2<2; index2++) {
					this.userTraits_F[index0][index2] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits' Forwards messages.
			this.itemTraits_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int index1 = 0; index1<10; index1++) {
				// Create array for 'itemTraits' Forwards messages.
				this.itemTraits_F[index1] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int index2 = 0; index2<2; index2++) {
				for(int index1 = 0; index1<10; index1++) {
					this.itemTraits_F[index1][index2] = Gaussian.Uniform();
				}
			}
			// Create array for 'userBias' Forwards messages.
			this.userBias_F = new DistributionStructArray<Gaussian,double>(50);
			for(int index0 = 0; index0<50; index0++) {
				this.userBias_F[index0] = Gaussian.Uniform();
			}
			// Create array for 'itemTraits_use' Backwards messages.
			this.itemTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(10);
			for(int index1 = 0; index1<10; index1++) {
				// Create array for 'itemTraits_use' Backwards messages.
				this.itemTraits_use_B[index1] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits_use' Backwards messages.
			this.userTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index0 = 0; index0<50; index0++) {
				// Create array for 'userTraits_use' Backwards messages.
				this.userTraits_use_B[index0] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemBias_use' Backwards messages.
			this.itemBias_use_B = new DistributionStructArray<Gaussian,double>(10);
			// Create array for 'userBias_use' Backwards messages.
			this.userBias_use_B = new DistributionStructArray<Gaussian,double>(50);
			// Create array for 'userThresholds_use' Backwards messages.
			this.userThresholds_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(50);
			for(int index0 = 0; index0<50; index0++) {
				// Create array for 'userThresholds_use' Backwards messages.
				this.userThresholds_use_B[index0] = new DistributionStructArray<Gaussian,double>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12_isDone = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9_isDone = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11_isDone = false;
				}
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21_isDone = false;
			}
			this.Changed_ratingData_vint0();
			this.Changed_itemData();
			this.Changed_userData();
			this.Changed_vGaussian____2();
			this.Changed_vGaussian__3();
			this.Changed_vGaussian__2();
			this.Constant();
			this.Changed_vGaussian____0();
			this.Changed_vint0();
			this.Changed_numberOfIterationsDecreased_vint0_Init_itemData_ratingData_userData_vGaussian____0_vGaussian5(initialise);
			this.Changed_vGaussian____1();
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____0_vGaussian____1_2(initialise);
			this.Changed_numberOfIterationsDecreased_vGaussian__2_Init_itemData_ratingData_userData_vGaussian____0_vG12(initialise);
			this.Changed_numberOfIterationsDecreased_userData_vGaussian__2_vint0_Init_itemData_ratingData_vGaussian__13(initialise);
			this.Changed_numberOfIterationsDecreased_vGaussian____0_Init_itemData_ratingData_userData_vGaussian____1_9(initialise);
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____0_vint0_Init_itemData_ratingData_vGaussian10(initialise);
			this.Changed_numberOfIterationsDecreased_vGaussian____1_Init_itemData_ratingData_userData_vGaussian____0_6(initialise);
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____1_vint0_Init_ratingData_userData_vGaussian7(initialise);
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____0_vGaussian____1_vint0_Init_ratin11(initialise);
			this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____0_vGaussian____1_vGaussian____21(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vint0") {
				return this.vint0;
			}
			if (variableName=="vGaussian____0") {
				return this.vGaussian____0;
			}
			if (variableName=="vGaussian____1") {
				return this.vGaussian____1;
			}
			if (variableName=="vGaussian__2") {
				return this.vGaussian__2;
			}
			if (variableName=="vGaussian__3") {
				return this.vGaussian__3;
			}
			if (variableName=="vGaussian____2") {
				return this.vGaussian____2;
			}
			if (variableName=="userData") {
				return this.userData;
			}
			if (variableName=="itemData") {
				return this.itemData;
			}
			if (variableName=="ratingData") {
				return this.ratingData;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ItemBiasMarginal()
		{
			return this.itemBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> ItemDataMarginal()
		{
			return this.itemData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsMarginal()
		{
			return this.itemTraits_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ratingData") {
				return this.RatingDataMarginal();
			}
			if (variableName=="itemData") {
				return this.ItemDataMarginal();
			}
			if (variableName=="userData") {
				return this.UserDataMarginal();
			}
			if (variableName=="vGaussian____2") {
				return this.VGaussian____2Marginal();
			}
			if (variableName=="vGaussian__3") {
				return this.VGaussian__3Marginal();
			}
			if (variableName=="vGaussian__2") {
				return this.VGaussian__2Marginal();
			}
			if (variableName=="vGaussian____0") {
				return this.VGaussian____0Marginal();
			}
			if (variableName=="vint0") {
				return this.Vint0Marginal();
			}
			if (variableName=="vGaussian____1") {
				return this.VGaussian____1Marginal();
			}
			if (variableName=="userTraits") {
				return this.UserTraitsMarginal();
			}
			if (variableName=="itemTraits") {
				return this.ItemTraitsMarginal();
			}
			if (variableName=="userBias") {
				return this.UserBiasMarginal();
			}
			if (variableName=="itemBias") {
				return this.ItemBiasMarginal();
			}
			if (variableName=="userThresholds") {
				return this.UserThresholdsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'ratingData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> RatingDataMarginal()
		{
			return this.ratingData_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vint0") {
				this.vint0 = (int)value;
				return ;
			}
			if (variableName=="vGaussian____0") {
				this.vGaussian____0 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="vGaussian____1") {
				this.vGaussian____1 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="vGaussian__2") {
				this.vGaussian__2 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGaussian__3") {
				this.vGaussian__3 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGaussian____2") {
				this.vGaussian____2 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userData") {
				this.userData = (int[])value;
				return ;
			}
			if (variableName=="itemData") {
				this.itemData = (int[])value;
				return ;
			}
			if (variableName=="ratingData") {
				this.ratingData = (bool[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> UserBiasMarginal()
		{
			return this.userBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> UserDataMarginal()
		{
			return this.userData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholds' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsMarginal()
		{
			return this.userThresholds_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsMarginal()
		{
			return this.userTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____0Marginal()
		{
			return this.vGaussian____0_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____1' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____1Marginal()
		{
			return this.vGaussian____1_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____2Marginal()
		{
			return this.vGaussian____2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__2' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__2Marginal()
		{
			return this.vGaussian__2_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__3' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__3Marginal()
		{
			return this.vGaussian__3_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint0Marginal()
		{
			return this.vint0_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
