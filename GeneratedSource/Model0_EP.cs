// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 14:06 on s√°bado, 7 de octubre de 2023.
	/// </remarks>
	public partial class Model0_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the affinityNoiseVariance property</summary>
		private double AffinityNoiseVariance;
		/// <summary>Message to marginal of 'affinityNoiseVariance'</summary>
		public Gaussian affinityNoiseVariance_marginal_F;
		/// <summary>True if Changed_affinityNoiseVariance has executed. Set this to false to force re-execution of Changed_affinityNoiseVariance</summary>
		public bool Changed_affinityNoiseVariance_isDone;
		/// <summary>True if Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0 has executed. Set this to false to force re-execution of Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0</summary>
		public bool Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone;
		/// <summary>True if Changed_itemBiasPrior has executed. Set this to false to force re-execution of Changed_itemBiasPrior</summary>
		public bool Changed_itemBiasPrior_isDone;
		/// <summary>True if Changed_itemData has executed. Set this to false to force re-execution of Changed_itemData</summary>
		public bool Changed_itemData_isDone;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8 has executed. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8 has performed initialisation. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11 has executed. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11 has performed initialisation. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised;
		/// <summary>True if Changed_itemTraitsPrior has executed. Set this to false to force re-execution of Changed_itemTraitsPrior</summary>
		public bool Changed_itemTraitsPrior_isDone;
		/// <summary>True if Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7 has executed. Set this to false to force re-execution of Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7</summary>
		public bool Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isDone;
		/// <summary>True if Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7 has performed initialisation. Set this to false to force re-execution of Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7</summary>
		public bool Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6</summary>
		public bool Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6</summary>
		public bool Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10</summary>
		public bool Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10</summary>
		public bool Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9</summary>
		public bool Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9</summary>
		public bool Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised;
		/// <summary>True if Changed_numObservations has executed. Set this to false to force re-execution of Changed_numObservations</summary>
		public bool Changed_numObservations_isDone;
		/// <summary>True if Changed_numObservations_ratingData has executed. Set this to false to force re-execution of Changed_numObservations_ratingData</summary>
		public bool Changed_numObservations_ratingData_isDone;
		/// <summary>True if Changed_thresholdsNoiseVariance has executed. Set this to false to force re-execution of Changed_thresholdsNoiseVariance</summary>
		public bool Changed_thresholdsNoiseVariance_isDone;
		/// <summary>True if Changed_userBiasPrior has executed. Set this to false to force re-execution of Changed_userBiasPrior</summary>
		public bool Changed_userBiasPrior_isDone;
		/// <summary>True if Changed_userData has executed. Set this to false to force re-execution of Changed_userData</summary>
		public bool Changed_userData_isDone;
		/// <summary>True if Changed_userThresholdsPrior has executed. Set this to false to force re-execution of Changed_userThresholdsPrior</summary>
		public bool Changed_userThresholdsPrior_isDone;
		/// <summary>True if Changed_userTraitsPrior has executed. Set this to false to force re-execution of Changed_userTraitsPrior</summary>
		public bool Changed_userTraitsPrior_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'evidence'</summary>
		public Bernoulli evidence_marginal_F;
		public DistributionStructArray<Gaussian,double> itemBias__0__B;
		public DistributionStructArray<Gaussian,double> itemBias__0__itemitemData_observation__B;
		/// <summary>Message to marginal of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_marginal_F;
		/// <summary>Field backing the itemBiasPrior property</summary>
		private Gaussian[] ItemBiasPrior;
		/// <summary>Message to marginal of 'itemBiasPrior'</summary>
		public PointMass<Gaussian[]> itemBiasPrior_marginal_F;
		/// <summary>Field backing the itemData property</summary>
		private int[] ItemData;
		/// <summary>Message to marginal of 'itemData'</summary>
		public PointMass<int[]> itemData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__F;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__itemitemData_observation__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__itemitemData_observation__F;
		/// <summary>Message to marginal of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_marginal_F;
		/// <summary>Field backing the itemTraitsPrior property</summary>
		private Gaussian[][] ItemTraitsPrior;
		/// <summary>Message to marginal of 'itemTraitsPrior'</summary>
		public PointMass<Gaussian[][]> itemTraitsPrior_marginal_F;
		public Gaussian[] noisyAffinity_F;
		public Gaussian[][] noisyAffinity_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] noisyAffinity_rep_B_toDef;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the numObservations property</summary>
		private int NumObservations;
		/// <summary>Message to marginal of 'numObservations'</summary>
		public PointMass<int> numObservations_marginal_F;
		public DistributionStructArray<Gaussian,double>[] products_F;
		/// <summary>Field backing the ratingData property</summary>
		private bool[][] RatingData;
		/// <summary>Message to marginal of 'ratingData'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ratingData_marginal_F;
		/// <summary>Field backing the thresholdsNoiseVariance property</summary>
		private double ThresholdsNoiseVariance;
		/// <summary>Message to marginal of 'thresholdsNoiseVariance'</summary>
		public Gaussian thresholdsNoiseVariance_marginal_F;
		public DistributionStructArray<Gaussian,double> userBias__0__B;
		public DistributionStructArray<Gaussian,double> userBias__0__itemuserData_observation__B;
		/// <summary>Message to marginal of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_marginal_F;
		/// <summary>Field backing the userBiasPrior property</summary>
		private Gaussian[] UserBiasPrior;
		/// <summary>Message to marginal of 'userBiasPrior'</summary>
		public PointMass<Gaussian[]> userBiasPrior_marginal_F;
		/// <summary>Field backing the userData property</summary>
		private int[] UserData;
		/// <summary>Message to marginal of 'userData'</summary>
		public PointMass<int[]> userData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__itemuserData_observation__B;
		/// <summary>Message to marginal of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_marginal_F;
		/// <summary>Field backing the userThresholdsPrior property</summary>
		private Gaussian[][] UserThresholdsPrior;
		/// <summary>Message to marginal of 'userThresholdsPrior'</summary>
		public PointMass<Gaussian[][]> userThresholdsPrior_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__F;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__itemuserData_observation__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__itemuserData_observation__F;
		/// <summary>Message to marginal of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_marginal_F;
		/// <summary>Field backing the userTraitsPrior property</summary>
		private Gaussian[][] UserTraitsPrior;
		/// <summary>Message to marginal of 'userTraitsPrior'</summary>
		public PointMass<Gaussian[][]> userTraitsPrior_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'affinityNoiseVariance'</summary>
		public double affinityNoiseVariance
		{
			get {
				return this.AffinityNoiseVariance;
			}
			set {
				if (this.AffinityNoiseVariance!=value) {
					this.AffinityNoiseVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_affinityNoiseVariance_isDone = false;
					this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = false;
					this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'itemBiasPrior'</summary>
		public Gaussian[] itemBiasPrior
		{
			get {
				return this.ItemBiasPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'itemBiasPrior\'");
				}
				this.ItemBiasPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemBiasPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'itemData'</summary>
		public int[] itemData
		{
			get {
				return this.ItemData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumObservations)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumObservations)+" was expected for variable \'itemData\'");
				}
				this.ItemData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemData_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'itemTraitsPrior'</summary>
		public Gaussian[][] itemTraitsPrior
		{
			get {
				return this.ItemTraitsPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'itemTraitsPrior\'");
				}
				this.ItemTraitsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemTraitsPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isDone = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'numObservations'</summary>
		public int numObservations
		{
			get {
				return this.NumObservations;
			}
			set {
				if (this.NumObservations!=value) {
					this.NumObservations = value;
					this.numberOfIterationsDone = 0;
					this.Changed_numObservations_ratingData_isDone = false;
					this.Changed_numObservations_isDone = false;
					this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = false;
					this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'ratingData'</summary>
		public bool[][] ratingData
		{
			get {
				return this.RatingData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumObservations)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumObservations)+" was expected for variable \'ratingData\'");
				}
				this.RatingData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numObservations_ratingData_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'thresholdsNoiseVariance'</summary>
		public double thresholdsNoiseVariance
		{
			get {
				return this.ThresholdsNoiseVariance;
			}
			set {
				if (this.ThresholdsNoiseVariance!=value) {
					this.ThresholdsNoiseVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_thresholdsNoiseVariance_isDone = false;
					this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = false;
					this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'userBiasPrior'</summary>
		public Gaussian[] userBiasPrior
		{
			get {
				return this.UserBiasPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'userBiasPrior\'");
				}
				this.UserBiasPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userBiasPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userData'</summary>
		public int[] userData
		{
			get {
				return this.UserData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.NumObservations)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.NumObservations)+" was expected for variable \'userData\'");
				}
				this.UserData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userData_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userThresholdsPrior'</summary>
		public Gaussian[][] userThresholdsPrior
		{
			get {
				return this.UserThresholdsPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'userThresholdsPrior\'");
				}
				this.UserThresholdsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userThresholdsPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userTraitsPrior'</summary>
		public Gaussian[][] userTraitsPrior
		{
			get {
				return this.UserTraitsPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'userTraitsPrior\'");
				}
				this.UserTraitsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = false;
				this.Changed_userTraitsPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone = false;
				this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'affinityNoiseVariance' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian AffinityNoiseVarianceMarginal()
		{
			return this.affinityNoiseVariance_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of affinityNoiseVariance</summary>
		private void Changed_affinityNoiseVariance()
		{
			if (this.Changed_affinityNoiseVariance_isDone) {
				return ;
			}
			this.affinityNoiseVariance_marginal_F = Gaussian.Uniform();
			// Message to 'affinityNoiseVariance_marginal' from DerivedVariable factor
			this.affinityNoiseVariance_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.AffinityNoiseVariance, this.affinityNoiseVariance_marginal_F);
			this.Changed_affinityNoiseVariance_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and numberOfIterations and numObservations and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0(int numberOfIterations)
		{
			if (this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone) {
				return ;
			}
			// Create array for 'userTraits_marginal' Forwards messages.
			this.userTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli[] evidence_selector_rep_F;
			// Create array for 'evidence_selector_rep' Forwards messages.
			evidence_selector_rep_F = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep_rep_B_toDef'
			Bernoulli[] evidence_selector_rep_rep_B_toDef = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep_rep_F_marginal'
			Bernoulli[] evidence_selector_rep_rep_F_marginal = new Bernoulli[200];
			Bernoulli evidence_selector_rep_F_marginal;
			Bernoulli[] evidence_selector_uses_F;
			// Create array for 'evidence_selector_uses' Forwards messages.
			evidence_selector_uses_F = new Bernoulli[6];
			evidence_selector_uses_F[1] = Bernoulli.Uniform();
			evidence_selector_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[1]);
			Bernoulli evidence_selector_rep_B_toDef;
			evidence_selector_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[1]);
			Bernoulli evidence_selector_uses_F_marginal;
			Bernoulli vBernoulli0 = Bernoulli.Uniform();
			evidence_selector_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(vBernoulli0);
			Bernoulli evidence_selector_uses_B_toDef;
			evidence_selector_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(vBernoulli0);
			Bernoulli[] evidence_selector_uses_B;
			// Create array for 'evidence_selector_uses' Backwards messages.
			evidence_selector_uses_B = new Bernoulli[6];
			evidence_selector_uses_B[0] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_B;
			// Create array for 'evidence_selector_cases' Backwards messages.
			evidence_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				evidence_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli evidence_selector_cases_0_B = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_uses_B;
			// Create array for 'evidence_selector_cases_0_uses' Backwards messages.
			evidence_selector_cases_0_uses_B = new Bernoulli[39];
			evidence_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			DistributionStructArray<Gaussian,double> userBias__0__F_marginal;
			DistributionStructArray<Gaussian,double> userBias__0__F;
			// Create array for 'userBias__0_' Forwards messages.
			userBias__0__F = new DistributionStructArray<Gaussian,double>(200);
			for(int user = 0; user<200; user++) {
				userBias__0__F[user] = Gaussian.Uniform();
			}
			userBias__0__F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(userBias__0__F);
			DistributionStructArray<Gaussian,double> userBias__0__itemuserData_observation__F;
			// Create array for 'userBias__0__itemuserData_observation_' Forwards messages.
			userBias__0__itemuserData_observation__F = new DistributionStructArray<Gaussian,double>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				userBias__0__itemuserData_observation__F[observation] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> itemBias__0__F_marginal;
			DistributionStructArray<Gaussian,double> itemBias__0__F;
			// Create array for 'itemBias__0_' Forwards messages.
			itemBias__0__F = new DistributionStructArray<Gaussian,double>(200);
			for(int item = 0; item<200; item++) {
				itemBias__0__F[item] = Gaussian.Uniform();
			}
			itemBias__0__F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(itemBias__0__F);
			DistributionStructArray<Gaussian,double> itemBias__0__itemitemData_observation__F;
			// Create array for 'itemBias__0__itemitemData_observation_' Forwards messages.
			itemBias__0__itemitemData_observation__F = new DistributionStructArray<Gaussian,double>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				itemBias__0__itemitemData_observation__F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'bias_F'
			Gaussian[] bias_F = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				bias_F[observation] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__F_marginal;
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__F;
			// Create array for 'userThresholds__0_' Forwards messages.
			userThresholds__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userThresholds__0_' Forwards messages.
				userThresholds__0__F[user] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					userThresholds__0__F[user][level] = Gaussian.Uniform();
				}
			}
			userThresholds__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(userThresholds__0__F);
			for(int user = 0; user<200; user++) {
				for(int level = 0; level<2; level++) {
					// Message to 'userThresholds__0_' from Copy factor
					userThresholds__0__F[user][level] = ArrayHelper.SetTo<Gaussian>(userThresholds__0__F[user][level], this.UserThresholdsPrior[user][level]);
				}
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__itemuserData_observation__F;
			// Create array for 'userThresholds__0__itemuserData_observation_' Forwards messages.
			userThresholds__0__itemuserData_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'userThresholds__0__itemuserData_observation_' Forwards messages.
				userThresholds__0__itemuserData_observation__F[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					userThresholds__0__itemuserData_observation__F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'noisyThresholds_F'
			DistributionStructArray<Gaussian,double>[] noisyThresholds_F = new DistributionStructArray<Gaussian,double>[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'noisyThresholds' Forwards messages.
				noisyThresholds_F[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					noisyThresholds_F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'productSum_F'
			Gaussian[] productSum_F = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				productSum_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'affinity_F'
			Gaussian[] affinity_F = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				affinity_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'noisyAffinity_rep_F_marginal'
			Gaussian[] noisyAffinity_rep_F_marginal = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				noisyAffinity_rep_F_marginal[observation] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.noisyAffinity_F[observation]);
			}
			// Create array for replicates of 'noisyAffinity_rep_F'
			Gaussian[][] noisyAffinity_rep_F = new Gaussian[this.NumObservations][];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'noisyAffinity_rep' Forwards messages.
				noisyAffinity_rep_F[observation] = new Gaussian[2];
				for(int level = 0; level<2; level++) {
					noisyAffinity_rep_F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__47_F'
			DistributionStructArray<Gaussian,double>[] vdouble__47_F = new DistributionStructArray<Gaussian,double>[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'vdouble__47' Forwards messages.
				vdouble__47_F[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					vdouble__47_F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__47_B'
			DistributionStructArray<Gaussian,double>[] vdouble__47_B = new DistributionStructArray<Gaussian,double>[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'vdouble__47' Backwards messages.
				vdouble__47_B[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					vdouble__47_B[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'affinity_B'
			Gaussian[] affinity_B = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				affinity_B[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'productSum_B'
			Gaussian[] productSum_B = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				productSum_B[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'products_B'
			DistributionStructArray<Gaussian,double>[] products_B = new DistributionStructArray<Gaussian,double>[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'products' Backwards messages.
				products_B[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int trait = 0; trait<2; trait++) {
					products_B[observation][trait] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'bias_B'
			Gaussian[] bias_B = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				bias_B[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'noisyThresholds_use_B'
			DistributionStructArray<Gaussian,double>[] noisyThresholds_use_B = new DistributionStructArray<Gaussian,double>[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'noisyThresholds_use' Backwards messages.
				noisyThresholds_use_B[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					noisyThresholds_use_B[observation][level] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.itemTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__F, this.itemTraits__0__B, this.itemTraits__0__F_marginal);
				for(int observation = 0; observation<this.NumObservations; observation++) {
					// Message to 'itemTraits__0__itemitemData_observation_' from GetItems factor
					this.itemTraits__0__itemitemData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_observation__B[observation], this.itemTraits__0__F, this.itemTraits__0__F_marginal, this.ItemData, observation, this.itemTraits__0__itemitemData_observation__F[observation]);
				}
				userBias__0__F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.UserBiasPrior, this.userBias__0__B, userBias__0__F_marginal);
				for(int observation = 0; observation<this.NumObservations; observation++) {
					// Message to 'userBias__0__itemuserData_observation_' from GetItems factor
					userBias__0__itemuserData_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias__0__itemuserData_observation__B[observation], userBias__0__F, userBias__0__F_marginal, this.UserData, observation, userBias__0__itemuserData_observation__F[observation]);
				}
				itemBias__0__F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.ItemBiasPrior, this.itemBias__0__B, itemBias__0__F_marginal);
				for(int observation = 0; observation<this.NumObservations; observation++) {
					// Message to 'itemBias__0__itemitemData_observation_' from GetItems factor
					itemBias__0__itemitemData_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBias__0__itemitemData_observation__B[observation], itemBias__0__F, itemBias__0__F_marginal, this.ItemData, observation, itemBias__0__itemitemData_observation__F[observation]);
				}
				userThresholds__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(userThresholds__0__F, this.userThresholds__0__B, userThresholds__0__F_marginal);
				for(int observation = 0; observation<this.NumObservations; observation++) {
					// Message to 'userThresholds__0__itemuserData_observation_' from GetItems factor
					userThresholds__0__itemuserData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userThresholds__0__itemuserData_observation__B[observation], userThresholds__0__F, userThresholds__0__F_marginal, this.UserData, observation, userThresholds__0__itemuserData_observation__F[observation]);
					// Message to 'bias' from Plus factor
					bias_F[observation] = DoublePlusOp.SumAverageConditional(userBias__0__itemuserData_observation__F[observation], itemBias__0__itemitemData_observation__F[observation]);
					// Message to 'productSum' from Sum factor
					productSum_F[observation] = FastSumOp.SumAverageConditional(this.products_F[observation]);
					// Message to 'affinity' from Plus factor
					affinity_F[observation] = DoublePlusOp.SumAverageConditional(bias_F[observation], productSum_F[observation]);
					// Message to 'noisyAffinity' from GaussianFromMeanAndVariance factor
					this.noisyAffinity_F[observation] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(affinity_F[observation], this.AffinityNoiseVariance);
					noisyAffinity_rep_F_marginal[observation] = ReplicateOp_Divide.Marginal<Gaussian>(this.noisyAffinity_rep_B_toDef[observation], this.noisyAffinity_F[observation], noisyAffinity_rep_F_marginal[observation]);
					for(int level = 0; level<2; level++) {
						// Message to 'noisyAffinity_rep' from Replicate factor
						noisyAffinity_rep_F[observation][level] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.noisyAffinity_rep_B[observation][level], noisyAffinity_rep_F_marginal[observation], level, noisyAffinity_rep_F[observation][level]);
						// Message to 'noisyThresholds' from GaussianFromMeanAndVariance factor
						noisyThresholds_F[observation][level] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(userThresholds__0__itemuserData_observation__F[observation][level], this.ThresholdsNoiseVariance);
						// Message to 'vdouble__47' from Difference factor
						vdouble__47_F[observation][level] = DoublePlusOp.AAverageConditional(noisyAffinity_rep_F[observation][level], noisyThresholds_F[observation][level]);
						// Message to 'vdouble__47' from IsPositive factor
						vdouble__47_B[observation][level] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.RatingData[observation][level]), vdouble__47_F[observation][level]);
						// Message to 'noisyAffinity_rep' from Difference factor
						this.noisyAffinity_rep_B[observation][level] = DoublePlusOp.SumAverageConditional(vdouble__47_B[observation][level], noisyThresholds_F[observation][level]);
						// Message to 'noisyThresholds_use' from Difference factor
						noisyThresholds_use_B[observation][level] = DoublePlusOp.BAverageConditional(noisyAffinity_rep_F[observation][level], vdouble__47_B[observation][level]);
						// Message to 'userThresholds__0__itemuserData_observation_' from GaussianFromMeanAndVariance factor
						this.userThresholds__0__itemuserData_observation__B[observation][level] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(noisyThresholds_use_B[observation][level], this.ThresholdsNoiseVariance);
					}
					this.noisyAffinity_rep_B_toDef[observation] = ReplicateOp_Divide.ToDef<Gaussian>(this.noisyAffinity_rep_B[observation], this.noisyAffinity_rep_B_toDef[observation]);
					// Message to 'affinity' from GaussianFromMeanAndVariance factor
					affinity_B[observation] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.noisyAffinity_rep_B_toDef[observation], this.AffinityNoiseVariance);
					// Message to 'productSum' from Plus factor
					productSum_B[observation] = DoublePlusOp.BAverageConditional(affinity_B[observation], bias_F[observation]);
					// Message to 'products' from Sum factor
					products_B[observation] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(productSum_B[observation], productSum_F[observation], this.products_F[observation], products_B[observation]);
					// Message to 'bias' from Plus factor
					bias_B[observation] = DoublePlusOp.AAverageConditional(affinity_B[observation], productSum_F[observation]);
					// Message to 'userBias__0__itemuserData_observation_' from Plus factor
					this.userBias__0__itemuserData_observation__B[observation] = DoublePlusOp.AAverageConditional(bias_B[observation], itemBias__0__itemitemData_observation__F[observation]);
					// Message to 'itemBias__0__itemitemData_observation_' from Plus factor
					this.itemBias__0__itemitemData_observation__B[observation] = DoublePlusOp.BAverageConditional(bias_B[observation], userBias__0__itemuserData_observation__F[observation]);
					for(int trait = 0; trait<2; trait++) {
						// Message to 'userTraits__0__itemuserData_observation_' from Product factor
						this.userTraits__0__itemuserData_observation__B[observation][trait] = GaussianProductOp_SHG09.AAverageConditional(products_B[observation][trait], this.itemTraits__0__itemitemData_observation__F[observation][trait], this.itemTraits__0__itemitemData_observation__B[observation][trait]);
					}
				}
				// Message to 'userTraits__0_' from GetItems factor
				this.userTraits__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits__0__itemuserData_observation__B, this.UserData, this.userTraits__0__B);
				this.userTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__F, this.userTraits__0__B, this.userTraits__0__F_marginal);
				for(int observation = 0; observation<this.NumObservations; observation++) {
					// Message to 'userTraits__0__itemuserData_observation_' from GetItems factor
					this.userTraits__0__itemuserData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_observation__B[observation], this.userTraits__0__F, this.userTraits__0__F_marginal, this.UserData, observation, this.userTraits__0__itemuserData_observation__F[observation]);
					for(int trait = 0; trait<2; trait++) {
						// Message to 'itemTraits__0__itemitemData_observation_' from Product factor
						this.itemTraits__0__itemitemData_observation__B[observation][trait] = GaussianProductOp_SHG09.BAverageConditional(products_B[observation][trait], this.userTraits__0__itemuserData_observation__F[observation][trait], this.userTraits__0__itemuserData_observation__B[observation][trait]);
					}
				}
				// Message to 'itemTraits__0_' from GetItems factor
				this.itemTraits__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits__0__itemitemData_observation__B, this.ItemData, this.itemTraits__0__B);
				// Message to 'userBias__0_' from GetItems factor
				this.userBias__0__B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.userBias__0__itemuserData_observation__B, this.UserData, this.userBias__0__B);
				// Message to 'itemBias__0_' from GetItems factor
				this.itemBias__0__B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.itemBias__0__itemitemData_observation__B, this.ItemData, this.itemBias__0__B);
				// Message to 'userThresholds__0_' from GetItems factor
				this.userThresholds__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userThresholds__0__itemuserData_observation__B, this.UserData, this.userThresholds__0__B);
				for(int observation = 0; observation<this.NumObservations; observation++) {
					for(int trait = 0; trait<2; trait++) {
						// Message to 'products' from Product factor
						this.products_F[observation][trait] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits__0__itemuserData_observation__F[observation][trait], this.itemTraits__0__itemitemData_observation__F[observation][trait], this.userTraits__0__itemuserData_observation__B[observation][trait], this.itemTraits__0__itemitemData_observation__B[observation][trait]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[8] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_observation__B, this.userTraits__0__F, this.UserData, this.userTraits__0__itemuserData_observation__F));
			evidence_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[10] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_observation__B, this.itemTraits__0__F, this.ItemData, this.itemTraits__0__itemitemData_observation__F));
			evidence_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_rep6_B;
			// Create array for 'evidence_selector_cases_0_rep6' Backwards messages.
			evidence_selector_cases_0_rep6_B = new Bernoulli[this.NumObservations];
			// Create array for replicates of 'evidence_selector_cases_0_rep6_rep_B'
			Bernoulli[][] evidence_selector_cases_0_rep6_rep_B = new Bernoulli[this.NumObservations][];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'evidence_selector_cases_0_rep6_rep' Backwards messages.
				evidence_selector_cases_0_rep6_rep_B[observation] = new Bernoulli[2];
				for(int trait = 0; trait<2; trait++) {
					evidence_selector_cases_0_rep6_rep_B[observation][trait] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep6_rep' from Product factor
					evidence_selector_cases_0_rep6_rep_B[observation][trait] = Bernoulli.FromLogOdds(GaussianProductOp_SHG09.LogEvidenceRatio(products_B[observation][trait], this.userTraits__0__itemuserData_observation__F[observation][trait], this.itemTraits__0__itemitemData_observation__F[observation][trait], this.userTraits__0__itemuserData_observation__B[observation][trait], this.itemTraits__0__itemitemData_observation__B[observation][trait], this.products_F[observation][trait]));
				}
				evidence_selector_cases_0_rep6_B[observation] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep6' from Replicate factor
				evidence_selector_cases_0_rep6_B[observation] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep6_rep_B[observation], evidence_selector_cases_0_rep6_B[observation]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[11] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep6_B, evidence_selector_cases_0_uses_B[11]);
			evidence_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[18] = Bernoulli.FromLogOdds(GetItemsOp<double>.LogEvidenceRatio<Gaussian>(this.userBias__0__itemuserData_observation__B, this.UserBiasPrior, this.UserData, userBias__0__itemuserData_observation__F));
			evidence_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[20] = Bernoulli.FromLogOdds(GetItemsOp<double>.LogEvidenceRatio<Gaussian>(this.itemBias__0__itemitemData_observation__B, this.ItemBiasPrior, this.ItemData, itemBias__0__itemitemData_observation__F));
			evidence_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[33] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.userThresholds__0__itemuserData_observation__B, userThresholds__0__F, this.UserData, userThresholds__0__itemuserData_observation__F));
			evidence_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_rep23_B;
			// Create array for 'evidence_selector_cases_0_rep23' Backwards messages.
			evidence_selector_cases_0_rep23_B = new Bernoulli[this.NumObservations];
			Bernoulli[][] evidence_selector_cases_0_rep23_uses_B;
			// Create array for 'evidence_selector_cases_0_rep23_uses' Backwards messages.
			evidence_selector_cases_0_rep23_uses_B = new Bernoulli[this.NumObservations][];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'evidence_selector_cases_0_rep23_uses' Backwards messages.
				evidence_selector_cases_0_rep23_uses_B[observation] = new Bernoulli[2];
				evidence_selector_cases_0_rep23_uses_B[observation][0] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep23_uses_B[observation][1] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23_uses' from Replicate factor
				evidence_selector_cases_0_rep23_uses_B[observation][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.noisyAffinity_rep_B[observation], this.noisyAffinity_F[observation], noisyAffinity_rep_F[observation]));
				evidence_selector_cases_0_rep23_B[observation] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23' from Replicate factor
				evidence_selector_cases_0_rep23_B[observation] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_uses_B[observation], evidence_selector_cases_0_rep23_B[observation]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[37] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_B, evidence_selector_cases_0_uses_B[37]);
			evidence_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			// Create array for replicates of 'evidence_selector_cases_0_rep24_rep_B'
			Bernoulli[][] evidence_selector_cases_0_rep24_rep_B = new Bernoulli[this.NumObservations][];
			Bernoulli[] evidence_selector_cases_0_rep24_B;
			// Create array for 'evidence_selector_cases_0_rep24' Backwards messages.
			evidence_selector_cases_0_rep24_B = new Bernoulli[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'evidence_selector_cases_0_rep24_rep' Backwards messages.
				evidence_selector_cases_0_rep24_rep_B[observation] = new Bernoulli[2];
				for(int level = 0; level<2; level++) {
					evidence_selector_cases_0_rep24_rep_B[observation][level] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep24_rep' from IsPositive factor
					evidence_selector_cases_0_rep24_rep_B[observation][level] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(this.RatingData[observation][level], vdouble__47_F[observation][level]));
				}
				evidence_selector_cases_0_rep24_B[observation] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep24' from Replicate factor
				evidence_selector_cases_0_rep24_B[observation] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_rep_B[observation], evidence_selector_cases_0_rep24_B[observation]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[38] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_B, evidence_selector_cases_0_uses_B[38]);
			// Message to 'evidence_selector_cases_0' from Replicate factor
			evidence_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_uses_B, evidence_selector_cases_0_B);
			// Message to 'evidence_selector_cases' from Copy factor
			evidence_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(evidence_selector_cases_B[0], evidence_selector_cases_0_B);
			// Message to 'evidence_selector_uses' from Cases factor
			evidence_selector_uses_B[0] = CasesOp.BAverageConditional(evidence_selector_cases_B);
			evidence_selector_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_uses_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(evidence_selector_uses_B, evidence_selector_uses_B_toDef);
			evidence_selector_uses_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_uses_B_toDef, vBernoulli0, evidence_selector_uses_F_marginal);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_B_toDef, evidence_selector_uses_F_marginal, 1, evidence_selector_uses_F[1]);
			evidence_selector_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep_B_toDef, evidence_selector_uses_F[1], evidence_selector_rep_F_marginal);
			// Create array for replicates of 'evidence_selector_rep_rep_F'
			Bernoulli[][] evidence_selector_rep_rep_F = new Bernoulli[200][];
			Gaussian[][][] userTraits__B;
			// Create array for 'userTraits_' Backwards messages.
			userTraits__B = new Gaussian[200][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_B;
			// Create array for 'userTraits_use' Backwards messages.
			userTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli evidence_selector_rep_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep_rep_B_reduced = Bernoulli.Uniform();
			for(int user = 0; user<200; user++) {
				// Create array for 'userTraits_marginal' Forwards messages.
				this.userTraits_marginal_F[user] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'userTraits_use' Backwards messages.
				userTraits_use_B[user] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'userTraits_' Backwards messages.
				userTraits__B[user] = new Gaussian[2][];
				// Create array for 'evidence_selector_rep_rep' Forwards messages.
				evidence_selector_rep_rep_F[user] = new Bernoulli[2];
				evidence_selector_rep_F[user] = Bernoulli.Uniform();
				evidence_selector_rep_rep_F_marginal[user] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep_F[user]);
				evidence_selector_rep_rep_B_toDef[user] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep_F[user]);
				// Message to 'evidence_selector_rep' from Replicate factor
				evidence_selector_rep_F[user] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_rep_B_toDef[user], evidence_selector_rep_F_marginal, user, evidence_selector_rep_F[user]);
				evidence_selector_rep_rep_F_marginal[user] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep_rep_B_toDef[user], evidence_selector_rep_F[user], evidence_selector_rep_rep_F_marginal[user]);
				for(int trait = 0; trait<2; trait++) {
					this.userTraits_marginal_F[user][trait] = Gaussian.Uniform();
					userTraits_use_B[user][trait] = Gaussian.Uniform();
					// Create array for 'userTraits_' Backwards messages.
					userTraits__B[user][trait] = new Gaussian[1];
					for(int _gateind = 0; _gateind<1; _gateind++) {
						userTraits__B[user][trait][_gateind] = Gaussian.Uniform();
					}
					evidence_selector_rep_rep_F[user][trait] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep_rep' from Replicate factor
					evidence_selector_rep_rep_F[user][trait] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_rep_B_reduced, evidence_selector_rep_rep_F_marginal[user], trait, evidence_selector_rep_rep_F[user][trait]);
					// Message to 'userTraits_' from Copy factor
					userTraits__B[user][trait][0] = ArrayHelper.SetTo<Gaussian>(userTraits__B[user][trait][0], this.userTraits__0__B[user][trait]);
					// Message to 'userTraits_use' from EnterPartial factor
					userTraits_use_B[user][trait] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userTraits__B[user][trait], evidence_selector_rep_rep_F[user][trait], this.UserTraitsPrior[user][trait], new int[1] {0}, userTraits_use_B[user][trait]);
					// Message to 'userTraits_marginal' from Variable factor
					this.userTraits_marginal_F[user][trait] = VariableOp.MarginalAverageConditional<Gaussian>(userTraits_use_B[user][trait], this.UserTraitsPrior[user][trait], this.userTraits_marginal_F[user][trait]);
				}
			}
			// Create array for 'itemTraits_marginal' Forwards messages.
			this.itemTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli[] evidence_selector_rep2_F;
			// Create array for 'evidence_selector_rep2' Forwards messages.
			evidence_selector_rep2_F = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep2_rep_B_toDef'
			Bernoulli[] evidence_selector_rep2_rep_B_toDef = new Bernoulli[200];
			Bernoulli evidence_selector_rep2_F_marginal;
			evidence_selector_uses_F[2] = Bernoulli.Uniform();
			evidence_selector_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[2]);
			Bernoulli evidence_selector_rep2_B_toDef;
			evidence_selector_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[2]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_B_toDef, evidence_selector_uses_F_marginal, 2, evidence_selector_uses_F[2]);
			evidence_selector_rep2_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep2_B_toDef, evidence_selector_uses_F[2], evidence_selector_rep2_F_marginal);
			// Create array for replicates of 'evidence_selector_rep2_rep_F_marginal'
			Bernoulli[] evidence_selector_rep2_rep_F_marginal = new Bernoulli[200];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_B;
			// Create array for 'itemTraits_use' Backwards messages.
			itemTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			// Create array for replicates of 'evidence_selector_rep2_rep_F'
			Bernoulli[][] evidence_selector_rep2_rep_F = new Bernoulli[200][];
			Gaussian[][][] itemTraits__B;
			// Create array for 'itemTraits_' Backwards messages.
			itemTraits__B = new Gaussian[200][][];
			Bernoulli evidence_selector_rep2_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep2_rep_B_reduced = Bernoulli.Uniform();
			for(int item = 0; item<200; item++) {
				// Create array for 'itemTraits_marginal' Forwards messages.
				this.itemTraits_marginal_F[item] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'itemTraits_use' Backwards messages.
				itemTraits_use_B[item] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'evidence_selector_rep2_rep' Forwards messages.
				evidence_selector_rep2_rep_F[item] = new Bernoulli[2];
				// Create array for 'itemTraits_' Backwards messages.
				itemTraits__B[item] = new Gaussian[2][];
				evidence_selector_rep2_F[item] = Bernoulli.Uniform();
				evidence_selector_rep2_rep_F_marginal[item] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep2_F[item]);
				evidence_selector_rep2_rep_B_toDef[item] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep2_F[item]);
				// Message to 'evidence_selector_rep2' from Replicate factor
				evidence_selector_rep2_F[item] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_rep_B_toDef[item], evidence_selector_rep2_F_marginal, item, evidence_selector_rep2_F[item]);
				evidence_selector_rep2_rep_F_marginal[item] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep2_rep_B_toDef[item], evidence_selector_rep2_F[item], evidence_selector_rep2_rep_F_marginal[item]);
			}
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					this.itemTraits_marginal_F[item][trait] = Gaussian.Uniform();
					itemTraits_use_B[item][trait] = Gaussian.Uniform();
					// Create array for 'itemTraits_' Backwards messages.
					itemTraits__B[item][trait] = new Gaussian[1];
					for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
						itemTraits__B[item][trait][_gateind2] = Gaussian.Uniform();
					}
					evidence_selector_rep2_rep_F[item][trait] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep2_rep' from Replicate factor
					evidence_selector_rep2_rep_F[item][trait] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_rep_B_reduced, evidence_selector_rep2_rep_F_marginal[item], trait, evidence_selector_rep2_rep_F[item][trait]);
					// Message to 'itemTraits_' from Copy factor
					itemTraits__B[item][trait][0] = ArrayHelper.SetTo<Gaussian>(itemTraits__B[item][trait][0], this.itemTraits__0__B[item][trait]);
					// Message to 'itemTraits_use' from EnterPartial factor
					itemTraits_use_B[item][trait] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(itemTraits__B[item][trait], evidence_selector_rep2_rep_F[item][trait], this.ItemTraitsPrior[item][trait], new int[1] {0}, itemTraits_use_B[item][trait]);
					// Message to 'itemTraits_marginal' from Variable factor
					this.itemTraits_marginal_F[item][trait] = VariableOp.MarginalAverageConditional<Gaussian>(itemTraits_use_B[item][trait], this.ItemTraitsPrior[item][trait], this.itemTraits_marginal_F[item][trait]);
				}
			}
			// Create array for 'userBias_marginal' Forwards messages.
			this.userBias_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			Gaussian[][] userBias__B;
			// Create array for 'userBias_' Backwards messages.
			userBias__B = new Gaussian[200][];
			DistributionStructArray<Gaussian,double> userBias_use_B;
			// Create array for 'userBias_use' Backwards messages.
			userBias_use_B = new DistributionStructArray<Gaussian,double>(200);
			Bernoulli[] evidence_selector_rep3_F;
			// Create array for 'evidence_selector_rep3' Forwards messages.
			evidence_selector_rep3_F = new Bernoulli[200];
			Bernoulli evidence_selector_rep3_B_reduced;
			evidence_selector_rep3_B_reduced = Bernoulli.Uniform();
			Bernoulli evidence_selector_rep3_F_marginal;
			evidence_selector_uses_F[3] = Bernoulli.Uniform();
			evidence_selector_rep3_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[3]);
			Bernoulli evidence_selector_rep3_B_toDef;
			evidence_selector_rep3_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[3]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep3_B_toDef, evidence_selector_uses_F_marginal, 3, evidence_selector_uses_F[3]);
			evidence_selector_rep3_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep3_B_toDef, evidence_selector_uses_F[3], evidence_selector_rep3_F_marginal);
			for(int user = 0; user<200; user++) {
				this.userBias_marginal_F[user] = Gaussian.Uniform();
				userBias_use_B[user] = Gaussian.Uniform();
				// Create array for 'userBias_' Backwards messages.
				userBias__B[user] = new Gaussian[1];
				for(int _gateind3 = 0; _gateind3<1; _gateind3++) {
					userBias__B[user][_gateind3] = Gaussian.Uniform();
				}
				evidence_selector_rep3_F[user] = Bernoulli.Uniform();
				// Message to 'evidence_selector_rep3' from Replicate factor
				evidence_selector_rep3_F[user] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep3_B_reduced, evidence_selector_rep3_F_marginal, user, evidence_selector_rep3_F[user]);
				// Message to 'userBias_' from Copy factor
				userBias__B[user][0] = ArrayHelper.SetTo<Gaussian>(userBias__B[user][0], this.userBias__0__B[user]);
				// Message to 'userBias_use' from EnterPartial factor
				userBias_use_B[user] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userBias__B[user], evidence_selector_rep3_F[user], this.UserBiasPrior[user], new int[1] {0}, userBias_use_B[user]);
				// Message to 'userBias_marginal' from Variable factor
				this.userBias_marginal_F[user] = VariableOp.MarginalAverageConditional<Gaussian>(userBias_use_B[user], this.UserBiasPrior[user], this.userBias_marginal_F[user]);
			}
			// Create array for 'itemBias_marginal' Forwards messages.
			this.itemBias_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			Bernoulli[] evidence_selector_rep4_F;
			// Create array for 'evidence_selector_rep4' Forwards messages.
			evidence_selector_rep4_F = new Bernoulli[200];
			Gaussian[][] itemBias__B;
			// Create array for 'itemBias_' Backwards messages.
			itemBias__B = new Gaussian[200][];
			Bernoulli evidence_selector_rep4_B_reduced;
			evidence_selector_rep4_B_reduced = Bernoulli.Uniform();
			Bernoulli evidence_selector_rep4_F_marginal;
			evidence_selector_uses_F[4] = Bernoulli.Uniform();
			evidence_selector_rep4_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[4]);
			Bernoulli evidence_selector_rep4_B_toDef;
			evidence_selector_rep4_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[4]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep4_B_toDef, evidence_selector_uses_F_marginal, 4, evidence_selector_uses_F[4]);
			evidence_selector_rep4_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep4_B_toDef, evidence_selector_uses_F[4], evidence_selector_rep4_F_marginal);
			DistributionStructArray<Gaussian,double> itemBias_use_B;
			// Create array for 'itemBias_use' Backwards messages.
			itemBias_use_B = new DistributionStructArray<Gaussian,double>(200);
			for(int item = 0; item<200; item++) {
				this.itemBias_marginal_F[item] = Gaussian.Uniform();
				itemBias_use_B[item] = Gaussian.Uniform();
				// Create array for 'itemBias_' Backwards messages.
				itemBias__B[item] = new Gaussian[1];
				for(int _gateind4 = 0; _gateind4<1; _gateind4++) {
					itemBias__B[item][_gateind4] = Gaussian.Uniform();
				}
				evidence_selector_rep4_F[item] = Bernoulli.Uniform();
				// Message to 'evidence_selector_rep4' from Replicate factor
				evidence_selector_rep4_F[item] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep4_B_reduced, evidence_selector_rep4_F_marginal, item, evidence_selector_rep4_F[item]);
				// Message to 'itemBias_' from Copy factor
				itemBias__B[item][0] = ArrayHelper.SetTo<Gaussian>(itemBias__B[item][0], this.itemBias__0__B[item]);
				// Message to 'itemBias_use' from EnterPartial factor
				itemBias_use_B[item] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(itemBias__B[item], evidence_selector_rep4_F[item], this.ItemBiasPrior[item], new int[1] {0}, itemBias_use_B[item]);
				// Message to 'itemBias_marginal' from Variable factor
				this.itemBias_marginal_F[item] = VariableOp.MarginalAverageConditional<Gaussian>(itemBias_use_B[item], this.ItemBiasPrior[item], this.itemBias_marginal_F[item]);
			}
			// Create array for 'userThresholds_marginal' Forwards messages.
			this.userThresholds_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_B;
			// Create array for 'userThresholds_use' Backwards messages.
			userThresholds_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli[] evidence_selector_rep5_F;
			// Create array for 'evidence_selector_rep5' Forwards messages.
			evidence_selector_rep5_F = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep5_rep_B_toDef'
			Bernoulli[] evidence_selector_rep5_rep_B_toDef = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep5_rep_F_marginal'
			Bernoulli[] evidence_selector_rep5_rep_F_marginal = new Bernoulli[200];
			Bernoulli evidence_selector_rep5_F_marginal;
			evidence_selector_uses_F[5] = Bernoulli.Uniform();
			evidence_selector_rep5_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[5]);
			Bernoulli evidence_selector_rep5_B_toDef;
			evidence_selector_rep5_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[5]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_B_toDef, evidence_selector_uses_F_marginal, 5, evidence_selector_uses_F[5]);
			evidence_selector_rep5_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep5_B_toDef, evidence_selector_uses_F[5], evidence_selector_rep5_F_marginal);
			// Create array for replicates of 'evidence_selector_rep5_rep_F'
			Bernoulli[][] evidence_selector_rep5_rep_F = new Bernoulli[200][];
			Gaussian[][][] userThresholds__B;
			// Create array for 'userThresholds_' Backwards messages.
			userThresholds__B = new Gaussian[200][][];
			Bernoulli evidence_selector_rep5_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep5_rep_B_reduced = Bernoulli.Uniform();
			for(int user = 0; user<200; user++) {
				// Create array for 'userThresholds_marginal' Forwards messages.
				this.userThresholds_marginal_F[user] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'evidence_selector_rep5_rep' Forwards messages.
				evidence_selector_rep5_rep_F[user] = new Bernoulli[2];
				// Create array for 'userThresholds_' Backwards messages.
				userThresholds__B[user] = new Gaussian[2][];
				evidence_selector_rep5_F[user] = Bernoulli.Uniform();
				evidence_selector_rep5_rep_F_marginal[user] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep5_F[user]);
				evidence_selector_rep5_rep_B_toDef[user] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep5_F[user]);
				// Message to 'evidence_selector_rep5' from Replicate factor
				evidence_selector_rep5_F[user] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_rep_B_toDef[user], evidence_selector_rep5_F_marginal, user, evidence_selector_rep5_F[user]);
				evidence_selector_rep5_rep_F_marginal[user] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep5_rep_B_toDef[user], evidence_selector_rep5_F[user], evidence_selector_rep5_rep_F_marginal[user]);
				// Create array for 'userThresholds_use' Backwards messages.
				userThresholds_use_B[user] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					this.userThresholds_marginal_F[user][level] = Gaussian.Uniform();
					userThresholds_use_B[user][level] = Gaussian.Uniform();
					// Create array for 'userThresholds_' Backwards messages.
					userThresholds__B[user][level] = new Gaussian[1];
					for(int _gateind5 = 0; _gateind5<1; _gateind5++) {
						userThresholds__B[user][level][_gateind5] = Gaussian.Uniform();
					}
					evidence_selector_rep5_rep_F[user][level] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep5_rep' from Replicate factor
					evidence_selector_rep5_rep_F[user][level] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_rep_B_reduced, evidence_selector_rep5_rep_F_marginal[user], level, evidence_selector_rep5_rep_F[user][level]);
					// Message to 'userThresholds_' from Copy factor
					userThresholds__B[user][level][0] = ArrayHelper.SetTo<Gaussian>(userThresholds__B[user][level][0], this.userThresholds__0__B[user][level]);
					// Message to 'userThresholds_use' from EnterPartial factor
					userThresholds_use_B[user][level] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userThresholds__B[user][level], evidence_selector_rep5_rep_F[user][level], this.UserThresholdsPrior[user][level], new int[1] {0}, userThresholds_use_B[user][level]);
					// Message to 'userThresholds_marginal' from Variable factor
					this.userThresholds_marginal_F[user][level] = VariableOp.MarginalAverageConditional<Gaussian>(userThresholds_use_B[user][level], this.UserThresholdsPrior[user][level], this.userThresholds_marginal_F[user][level]);
				}
			}
			this.evidence_marginal_F = Bernoulli.Uniform();
			// Message to 'evidence_marginal' from Variable factor
			this.evidence_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(evidence_selector_uses_B_toDef, vBernoulli0, this.evidence_marginal_F);
			this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemBiasPrior</summary>
		private void Changed_itemBiasPrior()
		{
			if (this.Changed_itemBiasPrior_isDone) {
				return ;
			}
			// Create array for 'itemBiasPrior_marginal' Forwards messages.
			this.itemBiasPrior_marginal_F = new PointMass<Gaussian[]>(this.ItemBiasPrior);
			// Message to 'itemBiasPrior_marginal' from DerivedVariable factor
			this.itemBiasPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.ItemBiasPrior, this.itemBiasPrior_marginal_F);
			this.Changed_itemBiasPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData</summary>
		private void Changed_itemData()
		{
			if (this.Changed_itemData_isDone) {
				return ;
			}
			// Create array for 'itemData_marginal' Forwards messages.
			this.itemData_marginal_F = new PointMass<int[]>(this.ItemData);
			// Message to 'itemData_marginal' from DerivedVariable factor
			this.itemData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.ItemData, this.itemData_marginal_F);
			this.Changed_itemData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and itemTraitsPrior and numberOfIterationsDecreased and numObservations and must reset on changes to affinityNoiseVariance and itemBiasPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8(bool initialise)
		{
			if (this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone&&((!initialise)||this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Message to 'itemTraits__0__itemitemData_observation_' from GetItems factor
				this.itemTraits__0__itemitemData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_observation__B[observation], this.itemTraits__0__F, this.itemTraits__0__F_marginal, this.ItemData, observation, this.itemTraits__0__itemitemData_observation__F[observation]);
			}
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone = true;
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and itemTraitsPrior and numberOfIterationsDecreased and numObservations and userData and userTraitsPrior and must reset on changes to affinityNoiseVariance and itemBiasPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userThresholdsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11(bool initialise)
		{
			if (this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone&&((!initialise)||this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.NumObservations; observation++) {
				for(int trait = 0; trait<2; trait++) {
					// Message to 'products' from Product factor
					this.products_F[observation][trait] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits__0__itemuserData_observation__F[observation][trait], this.itemTraits__0__itemitemData_observation__F[observation][trait], this.userTraits__0__itemuserData_observation__B[observation][trait], this.itemTraits__0__itemitemData_observation__B[observation][trait]);
				}
			}
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = true;
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemTraitsPrior</summary>
		private void Changed_itemTraitsPrior()
		{
			if (this.Changed_itemTraitsPrior_isDone) {
				return ;
			}
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					// Message to 'itemTraits__0_' from Copy factor
					this.itemTraits__0__F[item][trait] = ArrayHelper.SetTo<Gaussian>(this.itemTraits__0__F[item][trait], this.ItemTraitsPrior[item][trait]);
				}
			}
			// Create array for 'itemTraitsPrior_marginal' Forwards messages.
			this.itemTraitsPrior_marginal_F = new PointMass<Gaussian[][]>(this.ItemTraitsPrior);
			// Message to 'itemTraitsPrior_marginal' from DerivedVariable factor
			this.itemTraitsPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.ItemTraitsPrior, this.itemTraitsPrior_marginal_F);
			this.Changed_itemTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemTraitsPrior and numberOfIterationsDecreased and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and numObservations and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7(bool initialise)
		{
			if (this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isDone&&((!initialise)||this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised)) {
				return ;
			}
			this.itemTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__F, this.itemTraits__0__B, this.itemTraits__0__F_marginal);
			this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isDone = true;
			this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and numObservations and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised)) {
				return ;
			}
			this.itemTraits__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits__0__F);
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					this.itemTraits__0__B[item][trait] = Gaussian.Uniform();
				}
			}
			this.userTraits__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits__0__F);
			for(int user = 0; user<200; user++) {
				for(int trait = 0; trait<2; trait++) {
					this.userTraits__0__B[user][trait] = Gaussian.Uniform();
				}
				this.userBias__0__B[user] = Gaussian.Uniform();
			}
			for(int item = 0; item<200; item++) {
				this.itemBias__0__B[item] = Gaussian.Uniform();
			}
			for(int user = 0; user<200; user++) {
				for(int level = 0; level<2; level++) {
					this.userThresholds__0__B[user][level] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numObservations and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.NumObservations; observation++) {
				for(int trait = 0; trait<2; trait++) {
					this.itemTraits__0__itemitemData_observation__F[observation][trait] = Gaussian.Uniform();
					this.itemTraits__0__itemitemData_observation__B[observation][trait] = Gaussian.Uniform();
					this.products_F[observation][trait] = Gaussian.Uniform();
					this.userTraits__0__itemuserData_observation__B[observation][trait] = Gaussian.Uniform();
					this.userTraits__0__itemuserData_observation__F[observation][trait] = Gaussian.Uniform();
				}
				this.userBias__0__itemuserData_observation__B[observation] = Gaussian.Uniform();
				this.itemBias__0__itemitemData_observation__B[observation] = Gaussian.Uniform();
				for(int level = 0; level<2; level++) {
					this.userThresholds__0__itemuserData_observation__B[observation][level] = Gaussian.Uniform();
				}
				this.noisyAffinity_rep_B_toDef[observation] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.noisyAffinity_F[observation]);
				for(int level = 0; level<2; level++) {
					this.noisyAffinity_rep_B[observation][level] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone = true;
			this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and numObservations and userData and userTraitsPrior and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userThresholdsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Message to 'userTraits__0__itemuserData_observation_' from GetItems factor
				this.userTraits__0__itemuserData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_observation__B[observation], this.userTraits__0__F, this.userTraits__0__F_marginal, this.UserData, observation, this.userTraits__0__itemuserData_observation__F[observation]);
			}
			this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone = true;
			this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userTraitsPrior and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and numObservations and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised)) {
				return ;
			}
			this.userTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__F, this.userTraits__0__B, this.userTraits__0__F_marginal);
			this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone = true;
			this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numObservations</summary>
		private void Changed_numObservations()
		{
			if (this.Changed_numObservations_isDone) {
				return ;
			}
			// Create array for 'itemTraits__0__itemitemData_observation_' Forwards messages.
			this.itemTraits__0__itemitemData_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'itemTraits__0__itemitemData_observation_' Forwards messages.
				this.itemTraits__0__itemitemData_observation__F[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemTraits__0__itemitemData_observation_' Backwards messages.
			this.itemTraits__0__itemitemData_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'itemTraits__0__itemitemData_observation_' Backwards messages.
				this.itemTraits__0__itemitemData_observation__B[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'products_F'
			this.products_F = new DistributionStructArray<Gaussian,double>[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'products' Forwards messages.
				this.products_F[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0__itemuserData_observation_' Backwards messages.
			this.userTraits__0__itemuserData_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'userTraits__0__itemuserData_observation_' Backwards messages.
				this.userTraits__0__itemuserData_observation__B[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0__itemuserData_observation_' Forwards messages.
			this.userTraits__0__itemuserData_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'userTraits__0__itemuserData_observation_' Forwards messages.
				this.userTraits__0__itemuserData_observation__F[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userBias__0__itemuserData_observation_' Backwards messages.
			this.userBias__0__itemuserData_observation__B = new DistributionStructArray<Gaussian,double>(this.NumObservations);
			// Create array for 'itemBias__0__itemitemData_observation_' Backwards messages.
			this.itemBias__0__itemitemData_observation__B = new DistributionStructArray<Gaussian,double>(this.NumObservations);
			// Create array for 'userThresholds__0__itemuserData_observation_' Backwards messages.
			this.userThresholds__0__itemuserData_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'userThresholds__0__itemuserData_observation_' Backwards messages.
				this.userThresholds__0__itemuserData_observation__B[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'noisyAffinity_F'
			this.noisyAffinity_F = new Gaussian[this.NumObservations];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				this.noisyAffinity_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'noisyAffinity_rep_B_toDef'
			this.noisyAffinity_rep_B_toDef = new Gaussian[this.NumObservations];
			// Create array for replicates of 'noisyAffinity_rep_B'
			this.noisyAffinity_rep_B = new Gaussian[this.NumObservations][];
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'noisyAffinity_rep' Backwards messages.
				this.noisyAffinity_rep_B[observation] = new Gaussian[2];
			}
			this.numObservations_marginal_F = new PointMass<int>(this.NumObservations);
			// Message to 'numObservations_marginal' from DerivedVariable factor
			this.numObservations_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.NumObservations, this.numObservations_marginal_F);
			this.Changed_numObservations_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of numObservations and ratingData</summary>
		private void Changed_numObservations_ratingData()
		{
			if (this.Changed_numObservations_ratingData_isDone) {
				return ;
			}
			// Create array for 'ratingData_marginal' Forwards messages.
			this.ratingData_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.NumObservations);
			for(int observation = 0; observation<this.NumObservations; observation++) {
				// Create array for 'ratingData_marginal' Forwards messages.
				this.ratingData_marginal_F[observation] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int level = 0; level<2; level++) {
					this.ratingData_marginal_F[observation][level] = Bernoulli.Uniform();
				}
			}
			// Message to 'ratingData_marginal' from DerivedVariable factor
			this.ratingData_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.RatingData, this.ratingData_marginal_F);
			this.Changed_numObservations_ratingData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of thresholdsNoiseVariance</summary>
		private void Changed_thresholdsNoiseVariance()
		{
			if (this.Changed_thresholdsNoiseVariance_isDone) {
				return ;
			}
			this.thresholdsNoiseVariance_marginal_F = Gaussian.Uniform();
			// Message to 'thresholdsNoiseVariance_marginal' from DerivedVariable factor
			this.thresholdsNoiseVariance_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.ThresholdsNoiseVariance, this.thresholdsNoiseVariance_marginal_F);
			this.Changed_thresholdsNoiseVariance_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userBiasPrior</summary>
		private void Changed_userBiasPrior()
		{
			if (this.Changed_userBiasPrior_isDone) {
				return ;
			}
			// Create array for 'userBiasPrior_marginal' Forwards messages.
			this.userBiasPrior_marginal_F = new PointMass<Gaussian[]>(this.UserBiasPrior);
			// Message to 'userBiasPrior_marginal' from DerivedVariable factor
			this.userBiasPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.UserBiasPrior, this.userBiasPrior_marginal_F);
			this.Changed_userBiasPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userData</summary>
		private void Changed_userData()
		{
			if (this.Changed_userData_isDone) {
				return ;
			}
			// Create array for 'userData_marginal' Forwards messages.
			this.userData_marginal_F = new PointMass<int[]>(this.UserData);
			// Message to 'userData_marginal' from DerivedVariable factor
			this.userData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.UserData, this.userData_marginal_F);
			this.Changed_userData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userThresholdsPrior</summary>
		private void Changed_userThresholdsPrior()
		{
			if (this.Changed_userThresholdsPrior_isDone) {
				return ;
			}
			// Create array for 'userThresholdsPrior_marginal' Forwards messages.
			this.userThresholdsPrior_marginal_F = new PointMass<Gaussian[][]>(this.UserThresholdsPrior);
			// Message to 'userThresholdsPrior_marginal' from DerivedVariable factor
			this.userThresholdsPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.UserThresholdsPrior, this.userThresholdsPrior_marginal_F);
			this.Changed_userThresholdsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userTraitsPrior</summary>
		private void Changed_userTraitsPrior()
		{
			if (this.Changed_userTraitsPrior_isDone) {
				return ;
			}
			for(int user = 0; user<200; user++) {
				for(int trait = 0; trait<2; trait++) {
					// Message to 'userTraits__0_' from Copy factor
					this.userTraits__0__F[user][trait] = ArrayHelper.SetTo<Gaussian>(this.userTraits__0__F[user][trait], this.UserTraitsPrior[user][trait]);
				}
			}
			// Create array for 'userTraitsPrior_marginal' Forwards messages.
			this.userTraitsPrior_marginal_F = new PointMass<Gaussian[][]>(this.UserTraitsPrior);
			// Message to 'userTraitsPrior_marginal' from DerivedVariable factor
			this.userTraitsPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.UserTraitsPrior, this.userTraitsPrior_marginal_F);
			this.Changed_userTraitsPrior_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'userTraits__0_' Forwards messages.
			this.userTraits__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userTraits__0_' Forwards messages.
				this.userTraits__0__F[user] = new DistributionStructArray<Gaussian,double>(2);
				for(int trait = 0; trait<2; trait++) {
					this.userTraits__0__F[user][trait] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits__0_' Forwards messages.
			this.itemTraits__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int item = 0; item<200; item++) {
				// Create array for 'itemTraits__0_' Forwards messages.
				this.itemTraits__0__F[item] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					this.itemTraits__0__F[item][trait] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits__0_' Backwards messages.
			this.itemTraits__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int item = 0; item<200; item++) {
				// Create array for 'itemTraits__0_' Backwards messages.
				this.itemTraits__0__B[item] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0_' Backwards messages.
			this.userTraits__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userTraits__0_' Backwards messages.
				this.userTraits__0__B[user] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userBias__0_' Backwards messages.
			this.userBias__0__B = new DistributionStructArray<Gaussian,double>(200);
			// Create array for 'itemBias__0_' Backwards messages.
			this.itemBias__0__B = new DistributionStructArray<Gaussian,double>(200);
			// Create array for 'userThresholds__0_' Backwards messages.
			this.userThresholds__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userThresholds__0_' Backwards messages.
				this.userThresholds__0__B[user] = new DistributionStructArray<Gaussian,double>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'evidence' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli EvidenceMarginal()
		{
			return this.evidence_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3_isDone = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7_isDone = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8_isDone = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone = false;
					this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10_isDone = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11_isDone = false;
				}
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0_isDone = false;
			}
			this.Changed_thresholdsNoiseVariance();
			this.Changed_affinityNoiseVariance();
			this.Changed_numObservations_ratingData();
			this.Changed_itemData();
			this.Changed_userData();
			this.Changed_userThresholdsPrior();
			this.Changed_itemBiasPrior();
			this.Changed_userBiasPrior();
			this.Constant();
			this.Changed_numObservations();
			this.Changed_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVariance_itemBiasPrior_itemDat6(initialise);
			this.Changed_itemTraitsPrior();
			this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio3(initialise);
			this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat7(initialise);
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_Init_affinityNoiseVaria8(initialise);
			this.Changed_userTraitsPrior();
			this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9(initialise);
			this.Changed_numberOfIterationsDecreased_numObservations_userData_userTraitsPrior_Init_affinityNoiseVaria10(initialise);
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_numObservations_userData_userTraitsPrio11(initialise);
			this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_numObservati0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="numObservations") {
				return this.numObservations;
			}
			if (variableName=="userTraitsPrior") {
				return this.userTraitsPrior;
			}
			if (variableName=="itemTraitsPrior") {
				return this.itemTraitsPrior;
			}
			if (variableName=="userBiasPrior") {
				return this.userBiasPrior;
			}
			if (variableName=="itemBiasPrior") {
				return this.itemBiasPrior;
			}
			if (variableName=="userThresholdsPrior") {
				return this.userThresholdsPrior;
			}
			if (variableName=="userData") {
				return this.userData;
			}
			if (variableName=="itemData") {
				return this.itemData;
			}
			if (variableName=="ratingData") {
				return this.ratingData;
			}
			if (variableName=="affinityNoiseVariance") {
				return this.affinityNoiseVariance;
			}
			if (variableName=="thresholdsNoiseVariance") {
				return this.thresholdsNoiseVariance;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ItemBiasMarginal()
		{
			return this.itemBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBiasPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> ItemBiasPriorMarginal()
		{
			return this.itemBiasPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> ItemDataMarginal()
		{
			return this.itemData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsMarginal()
		{
			return this.itemTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraitsPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> ItemTraitsPriorMarginal()
		{
			return this.itemTraitsPrior_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="thresholdsNoiseVariance") {
				return this.ThresholdsNoiseVarianceMarginal();
			}
			if (variableName=="affinityNoiseVariance") {
				return this.AffinityNoiseVarianceMarginal();
			}
			if (variableName=="ratingData") {
				return this.RatingDataMarginal();
			}
			if (variableName=="itemData") {
				return this.ItemDataMarginal();
			}
			if (variableName=="userData") {
				return this.UserDataMarginal();
			}
			if (variableName=="userThresholdsPrior") {
				return this.UserThresholdsPriorMarginal();
			}
			if (variableName=="itemBiasPrior") {
				return this.ItemBiasPriorMarginal();
			}
			if (variableName=="userBiasPrior") {
				return this.UserBiasPriorMarginal();
			}
			if (variableName=="numObservations") {
				return this.NumObservationsMarginal();
			}
			if (variableName=="itemTraitsPrior") {
				return this.ItemTraitsPriorMarginal();
			}
			if (variableName=="userTraitsPrior") {
				return this.UserTraitsPriorMarginal();
			}
			if (variableName=="userTraits") {
				return this.UserTraitsMarginal();
			}
			if (variableName=="itemTraits") {
				return this.ItemTraitsMarginal();
			}
			if (variableName=="userBias") {
				return this.UserBiasMarginal();
			}
			if (variableName=="itemBias") {
				return this.ItemBiasMarginal();
			}
			if (variableName=="userThresholds") {
				return this.UserThresholdsMarginal();
			}
			if (variableName=="evidence") {
				return this.EvidenceMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>
		/// Returns the marginal distribution for 'numObservations' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> NumObservationsMarginal()
		{
			return this.numObservations_marginal_F;
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'ratingData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> RatingDataMarginal()
		{
			return this.ratingData_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="numObservations") {
				this.numObservations = (int)value;
				return ;
			}
			if (variableName=="userTraitsPrior") {
				this.userTraitsPrior = (Gaussian[][])value;
				return ;
			}
			if (variableName=="itemTraitsPrior") {
				this.itemTraitsPrior = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userBiasPrior") {
				this.userBiasPrior = (Gaussian[])value;
				return ;
			}
			if (variableName=="itemBiasPrior") {
				this.itemBiasPrior = (Gaussian[])value;
				return ;
			}
			if (variableName=="userThresholdsPrior") {
				this.userThresholdsPrior = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userData") {
				this.userData = (int[])value;
				return ;
			}
			if (variableName=="itemData") {
				this.itemData = (int[])value;
				return ;
			}
			if (variableName=="ratingData") {
				this.ratingData = (bool[][])value;
				return ;
			}
			if (variableName=="affinityNoiseVariance") {
				this.affinityNoiseVariance = (double)value;
				return ;
			}
			if (variableName=="thresholdsNoiseVariance") {
				this.thresholdsNoiseVariance = (double)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'thresholdsNoiseVariance' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian ThresholdsNoiseVarianceMarginal()
		{
			return this.thresholdsNoiseVariance_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> UserBiasMarginal()
		{
			return this.userBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBiasPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> UserBiasPriorMarginal()
		{
			return this.userBiasPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> UserDataMarginal()
		{
			return this.userData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholds' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsMarginal()
		{
			return this.userThresholds_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholdsPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> UserThresholdsPriorMarginal()
		{
			return this.userThresholdsPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsMarginal()
		{
			return this.userTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraitsPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> UserTraitsPriorMarginal()
		{
			return this.userTraitsPrior_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
