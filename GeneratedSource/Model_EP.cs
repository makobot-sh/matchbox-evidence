// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 01:00 on jueves, 12 de octubre de 2023.
	/// </remarks>
	public partial class Model_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the affinityNoiseVariance property</summary>
		private double AffinityNoiseVariance;
		/// <summary>Message to marginal of 'affinityNoiseVariance'</summary>
		public Gaussian affinityNoiseVariance_marginal_F;
		/// <summary>True if Changed_affinityNoiseVariance has executed. Set this to false to force re-execution of Changed_affinityNoiseVariance</summary>
		public bool Changed_affinityNoiseVariance_isDone;
		/// <summary>True if Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1 has executed. Set this to false to force re-execution of Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1</summary>
		public bool Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone;
		/// <summary>True if Changed_itemBiasPrior has executed. Set this to false to force re-execution of Changed_itemBiasPrior</summary>
		public bool Changed_itemBiasPrior_isDone;
		/// <summary>True if Changed_itemData has executed. Set this to false to force re-execution of Changed_itemData</summary>
		public bool Changed_itemData_isDone;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11 has executed. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11 has performed initialisation. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7 has executed. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone;
		/// <summary>True if Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7 has performed initialisation. Set this to false to force re-execution of Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7</summary>
		public bool Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised;
		/// <summary>True if Changed_itemTraitsPrior has executed. Set this to false to force re-execution of Changed_itemTraitsPrior</summary>
		public bool Changed_itemTraitsPrior_isDone;
		/// <summary>True if Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6 has executed. Set this to false to force re-execution of Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6</summary>
		public bool Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone;
		/// <summary>True if Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6 has performed initialisation. Set this to false to force re-execution of Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6</summary>
		public bool Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2</summary>
		public bool Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12</summary>
		public bool Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12</summary>
		public bool Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13</summary>
		public bool Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13</summary>
		public bool Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9</summary>
		public bool Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9</summary>
		public bool Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5</summary>
		public bool Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5</summary>
		public bool Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised;
		/// <summary>True if Changed_ratingData_vint0 has executed. Set this to false to force re-execution of Changed_ratingData_vint0</summary>
		public bool Changed_ratingData_vint0_isDone;
		/// <summary>True if Changed_thresholdsNoiseVariance has executed. Set this to false to force re-execution of Changed_thresholdsNoiseVariance</summary>
		public bool Changed_thresholdsNoiseVariance_isDone;
		/// <summary>True if Changed_userBiasPrior has executed. Set this to false to force re-execution of Changed_userBiasPrior</summary>
		public bool Changed_userBiasPrior_isDone;
		/// <summary>True if Changed_userData has executed. Set this to false to force re-execution of Changed_userData</summary>
		public bool Changed_userData_isDone;
		/// <summary>True if Changed_userThresholdsPrior has executed. Set this to false to force re-execution of Changed_userThresholdsPrior</summary>
		public bool Changed_userThresholdsPrior_isDone;
		/// <summary>True if Changed_userTraitsPrior has executed. Set this to false to force re-execution of Changed_userTraitsPrior</summary>
		public bool Changed_userTraitsPrior_isDone;
		/// <summary>True if Changed_vint0 has executed. Set this to false to force re-execution of Changed_vint0</summary>
		public bool Changed_vint0_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		public DistributionStructArray<Gaussian,double> itemBias_itemitemData_observation__B;
		/// <summary>Message to marginal of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_marginal_F;
		/// <summary>Message from use of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_use_B;
		/// <summary>Field backing the itemBiasPrior property</summary>
		private Gaussian[] ItemBiasPrior;
		/// <summary>Message to marginal of 'itemBiasPrior'</summary>
		public PointMass<Gaussian[]> itemBiasPrior_marginal_F;
		/// <summary>Field backing the itemData property</summary>
		private int[] ItemData;
		/// <summary>Message to marginal of 'itemData'</summary>
		public PointMass<int[]> itemData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_itemitemData_observation__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_itemitemData_observation__F;
		/// <summary>Message to marginal of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_marginal_F;
		/// <summary>Message from use of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_F_marginal;
		/// <summary>Field backing the itemTraitsPrior property</summary>
		private Gaussian[][] ItemTraitsPrior;
		/// <summary>Message to marginal of 'itemTraitsPrior'</summary>
		public PointMass<Gaussian[][]> itemTraitsPrior_marginal_F;
		public Gaussian[] noisyAffinity_F;
		public Gaussian[][] noisyAffinity_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] noisyAffinity_rep_B_toDef;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		public DistributionStructArray<Gaussian,double>[] products_F;
		/// <summary>Field backing the ratingData property</summary>
		private bool[][] RatingData;
		/// <summary>Message to marginal of 'ratingData'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ratingData_marginal_F;
		/// <summary>Field backing the thresholdsNoiseVariance property</summary>
		private double ThresholdsNoiseVariance;
		/// <summary>Message to marginal of 'thresholdsNoiseVariance'</summary>
		public Gaussian thresholdsNoiseVariance_marginal_F;
		public DistributionStructArray<Gaussian,double> userBias_F;
		public DistributionStructArray<Gaussian,double> userBias_itemuserData_observation__B;
		public DistributionStructArray<Gaussian,double> userBias_itemuserData_observation__F;
		/// <summary>Message to marginal of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_marginal_F;
		/// <summary>Message from use of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double&gt;.ItemsAverageConditional&lt;DistributionStructArray&lt;Gaussian, double&gt;, Gaussian&gt;</summary>
		public DistributionStructArray<Gaussian,double> userBias_use_F_marginal;
		/// <summary>Field backing the userBiasPrior property</summary>
		private Gaussian[] UserBiasPrior;
		/// <summary>Message to marginal of 'userBiasPrior'</summary>
		public PointMass<Gaussian[]> userBiasPrior_marginal_F;
		/// <summary>Field backing the userData property</summary>
		private int[] UserData;
		/// <summary>Message to marginal of 'userData'</summary>
		public PointMass<int[]> userData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_itemuserData_observation__B;
		/// <summary>Message to marginal of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_marginal_F;
		/// <summary>Message from use of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_B;
		/// <summary>Field backing the userThresholdsPrior property</summary>
		private Gaussian[][] UserThresholdsPrior;
		/// <summary>Message to marginal of 'userThresholdsPrior'</summary>
		public PointMass<Gaussian[][]> userThresholdsPrior_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_itemuserData_observation__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_itemuserData_observation__F;
		/// <summary>Message to marginal of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_marginal_F;
		/// <summary>Message from use of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_B;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_F_marginal;
		/// <summary>Field backing the userTraitsPrior property</summary>
		private Gaussian[][] UserTraitsPrior;
		/// <summary>Message to marginal of 'userTraitsPrior'</summary>
		public PointMass<Gaussian[][]> userTraitsPrior_marginal_F;
		/// <summary>Field backing the vint0 property</summary>
		private int Vint0;
		/// <summary>Message to marginal of 'vint0'</summary>
		public PointMass<int> vint0_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'affinityNoiseVariance'</summary>
		public double affinityNoiseVariance
		{
			get {
				return this.AffinityNoiseVariance;
			}
			set {
				if (this.AffinityNoiseVariance!=value) {
					this.AffinityNoiseVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_affinityNoiseVariance_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = false;
					this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'itemBiasPrior'</summary>
		public Gaussian[] itemBiasPrior
		{
			get {
				return this.ItemBiasPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'itemBiasPrior\'");
				}
				this.ItemBiasPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemBiasPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'itemData'</summary>
		public int[] itemData
		{
			get {
				return this.ItemData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint0)+" was expected for variable \'itemData\'");
				}
				this.ItemData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'itemTraitsPrior'</summary>
		public Gaussian[][] itemTraitsPrior
		{
			get {
				return this.ItemTraitsPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'itemTraitsPrior\'");
				}
				this.ItemTraitsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_itemTraitsPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'ratingData'</summary>
		public bool[][] ratingData
		{
			get {
				return this.RatingData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint0)+" was expected for variable \'ratingData\'");
				}
				this.RatingData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ratingData_vint0_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'thresholdsNoiseVariance'</summary>
		public double thresholdsNoiseVariance
		{
			get {
				return this.ThresholdsNoiseVariance;
			}
			set {
				if (this.ThresholdsNoiseVariance!=value) {
					this.ThresholdsNoiseVariance = value;
					this.numberOfIterationsDone = 0;
					this.Changed_thresholdsNoiseVariance_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = false;
					this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
				}
			}
		}

		/// <summary>The externally-specified value of 'userBiasPrior'</summary>
		public Gaussian[] userBiasPrior
		{
			get {
				return this.UserBiasPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'userBiasPrior\'");
				}
				this.UserBiasPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userBiasPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isDone = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userData'</summary>
		public int[] userData
		{
			get {
				return this.UserData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint0)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint0)+" was expected for variable \'userData\'");
				}
				this.UserData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userThresholdsPrior'</summary>
		public Gaussian[][] userThresholdsPrior
		{
			get {
				return this.UserThresholdsPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'userThresholdsPrior\'");
				}
				this.UserThresholdsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userThresholdsPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userTraitsPrior'</summary>
		public Gaussian[][] userTraitsPrior
		{
			get {
				return this.UserTraitsPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'userTraitsPrior\'");
				}
				this.UserTraitsPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userTraitsPrior_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone = false;
				this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone = false;
				this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = false;
				this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = false;
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint0'</summary>
		public int vint0
		{
			get {
				return this.Vint0;
			}
			set {
				if (this.Vint0!=value) {
					this.Vint0 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ratingData_vint0_isDone = false;
					this.Changed_vint0_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = false;
					this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>
		/// Returns the marginal distribution for 'affinityNoiseVariance' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian AffinityNoiseVarianceMarginal()
		{
			return this.affinityNoiseVariance_marginal_F;
		}

		/// <summary>Computations that depend on the observed value of affinityNoiseVariance</summary>
		private void Changed_affinityNoiseVariance()
		{
			if (this.Changed_affinityNoiseVariance_isDone) {
				return ;
			}
			this.affinityNoiseVariance_marginal_F = Gaussian.Uniform();
			// Message to 'affinityNoiseVariance_marginal' from DerivedVariable factor
			this.affinityNoiseVariance_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.AffinityNoiseVariance, this.affinityNoiseVariance_marginal_F);
			this.Changed_affinityNoiseVariance_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and numberOfIterations and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior and vint0</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1(int numberOfIterations)
		{
			if (this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone) {
				return ;
			}
			DistributionStructArray<Gaussian,double> itemBias_F;
			// Create array for 'itemBias' Forwards messages.
			itemBias_F = new DistributionStructArray<Gaussian,double>(200);
			for(int item = 0; item<200; item++) {
				itemBias_F[item] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_F;
			// Create array for 'userThresholds' Forwards messages.
			userThresholds_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userThresholds' Forwards messages.
				userThresholds_F[user] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int level = 0; level<2; level++) {
				for(int user = 0; user<200; user++) {
					userThresholds_F[user][level] = Gaussian.Uniform();
				}
			}
			// Create array for 'userTraits_marginal' Forwards messages.
			this.userTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			DistributionStructArray<Gaussian,double> itemBias_use_F_marginal;
			itemBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(itemBias_F);
			DistributionStructArray<Gaussian,double> itemBias_itemitemData_observation__F;
			// Create array for 'itemBias_itemitemData_observation_' Forwards messages.
			itemBias_itemitemData_observation__F = new DistributionStructArray<Gaussian,double>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				itemBias_itemitemData_observation__F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'bias_F'
			Gaussian[] bias_F = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				bias_F[observation] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_F_marginal;
			userThresholds_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(userThresholds_F);
			for(int level = 0; level<2; level++) {
				for(int user = 0; user<200; user++) {
					// Message to 'userThresholds' from Random factor
					userThresholds_F[user][level] = ArrayHelper.SetTo<Gaussian>(userThresholds_F[user][level], this.UserThresholdsPrior[user][level]);
				}
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_itemuserData_observation__F;
			// Create array for 'userThresholds_itemuserData_observation_' Forwards messages.
			userThresholds_itemuserData_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'userThresholds_itemuserData_observation_' Forwards messages.
				userThresholds_itemuserData_observation__F[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					userThresholds_itemuserData_observation__F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'noisyThresholds_F'
			DistributionStructArray<Gaussian,double>[] noisyThresholds_F = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'noisyThresholds' Forwards messages.
				noisyThresholds_F[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					noisyThresholds_F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'productSum_F'
			Gaussian[] productSum_F = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				productSum_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'affinity_F'
			Gaussian[] affinity_F = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				affinity_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'noisyAffinity_rep_F_marginal'
			Gaussian[] noisyAffinity_rep_F_marginal = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				noisyAffinity_rep_F_marginal[observation] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.noisyAffinity_F[observation]);
			}
			// Create array for replicates of 'noisyAffinity_rep_F'
			Gaussian[][] noisyAffinity_rep_F = new Gaussian[this.Vint0][];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'noisyAffinity_rep' Forwards messages.
				noisyAffinity_rep_F[observation] = new Gaussian[2];
				for(int level = 0; level<2; level++) {
					noisyAffinity_rep_F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__23_F'
			DistributionStructArray<Gaussian,double>[] vdouble__23_F = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'vdouble__23' Forwards messages.
				vdouble__23_F[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					vdouble__23_F[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__23_B'
			DistributionStructArray<Gaussian,double>[] vdouble__23_B = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'vdouble__23' Backwards messages.
				vdouble__23_B[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					vdouble__23_B[observation][level] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'affinity_B'
			Gaussian[] affinity_B = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				affinity_B[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'productSum_B'
			Gaussian[] productSum_B = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				productSum_B[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'products_B'
			DistributionStructArray<Gaussian,double>[] products_B = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'products' Backwards messages.
				products_B[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int trait = 0; trait<2; trait++) {
					products_B[observation][trait] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'bias_B'
			Gaussian[] bias_B = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				bias_B[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'noisyThresholds_use_B'
			DistributionStructArray<Gaussian,double>[] noisyThresholds_use_B = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'noisyThresholds_use' Backwards messages.
				noisyThresholds_use_B[observation] = new DistributionStructArray<Gaussian,double>(2);
				for(int level = 0; level<2; level++) {
					noisyThresholds_use_B[observation][level] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.itemTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_F, this.itemTraits_use_B, this.itemTraits_use_F_marginal);
				for(int observation = 0; observation<this.Vint0; observation++) {
					// Message to 'itemTraits_itemitemData_observation_' from GetItems factor
					this.itemTraits_itemitemData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_itemitemData_observation__B[observation], this.itemTraits_F, this.itemTraits_use_F_marginal, this.ItemData, observation, this.itemTraits_itemitemData_observation__F[observation]);
				}
				itemBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.ItemBiasPrior, this.itemBias_use_B, itemBias_use_F_marginal);
				userThresholds_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(userThresholds_F, this.userThresholds_use_B, userThresholds_use_F_marginal);
				for(int observation = 0; observation<this.Vint0; observation++) {
					// Message to 'itemBias_itemitemData_observation_' from GetItems factor
					itemBias_itemitemData_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBias_itemitemData_observation__B[observation], itemBias_F, itemBias_use_F_marginal, this.ItemData, observation, itemBias_itemitemData_observation__F[observation]);
					// Message to 'bias' from Plus factor
					bias_F[observation] = DoublePlusOp.SumAverageConditional(this.userBias_itemuserData_observation__F[observation], itemBias_itemitemData_observation__F[observation]);
					// Message to 'userThresholds_itemuserData_observation_' from GetItems factor
					userThresholds_itemuserData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userThresholds_itemuserData_observation__B[observation], userThresholds_F, userThresholds_use_F_marginal, this.UserData, observation, userThresholds_itemuserData_observation__F[observation]);
					// Message to 'productSum' from Sum factor
					productSum_F[observation] = FastSumOp.SumAverageConditional(this.products_F[observation]);
					// Message to 'affinity' from Plus factor
					affinity_F[observation] = DoublePlusOp.SumAverageConditional(bias_F[observation], productSum_F[observation]);
					// Message to 'noisyAffinity' from GaussianFromMeanAndVariance factor
					this.noisyAffinity_F[observation] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(affinity_F[observation], this.AffinityNoiseVariance);
					noisyAffinity_rep_F_marginal[observation] = ReplicateOp_Divide.Marginal<Gaussian>(this.noisyAffinity_rep_B_toDef[observation], this.noisyAffinity_F[observation], noisyAffinity_rep_F_marginal[observation]);
					for(int level = 0; level<2; level++) {
						// Message to 'noisyThresholds' from GaussianFromMeanAndVariance factor
						noisyThresholds_F[observation][level] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(userThresholds_itemuserData_observation__F[observation][level], this.ThresholdsNoiseVariance);
						// Message to 'noisyAffinity_rep' from Replicate factor
						noisyAffinity_rep_F[observation][level] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.noisyAffinity_rep_B[observation][level], noisyAffinity_rep_F_marginal[observation], level, noisyAffinity_rep_F[observation][level]);
						// Message to 'vdouble__23' from Difference factor
						vdouble__23_F[observation][level] = DoublePlusOp.AAverageConditional(noisyAffinity_rep_F[observation][level], noisyThresholds_F[observation][level]);
						// Message to 'vdouble__23' from IsPositive factor
						vdouble__23_B[observation][level] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.RatingData[observation][level]), vdouble__23_F[observation][level]);
						// Message to 'noisyAffinity_rep' from Difference factor
						this.noisyAffinity_rep_B[observation][level] = DoublePlusOp.SumAverageConditional(vdouble__23_B[observation][level], noisyThresholds_F[observation][level]);
						// Message to 'noisyThresholds_use' from Difference factor
						noisyThresholds_use_B[observation][level] = DoublePlusOp.BAverageConditional(noisyAffinity_rep_F[observation][level], vdouble__23_B[observation][level]);
						// Message to 'userThresholds_itemuserData_observation_' from GaussianFromMeanAndVariance factor
						this.userThresholds_itemuserData_observation__B[observation][level] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(noisyThresholds_use_B[observation][level], this.ThresholdsNoiseVariance);
					}
					this.noisyAffinity_rep_B_toDef[observation] = ReplicateOp_Divide.ToDef<Gaussian>(this.noisyAffinity_rep_B[observation], this.noisyAffinity_rep_B_toDef[observation]);
					// Message to 'affinity' from GaussianFromMeanAndVariance factor
					affinity_B[observation] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.noisyAffinity_rep_B_toDef[observation], this.AffinityNoiseVariance);
					// Message to 'productSum' from Plus factor
					productSum_B[observation] = DoublePlusOp.BAverageConditional(affinity_B[observation], bias_F[observation]);
					// Message to 'products' from Sum factor
					products_B[observation] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(productSum_B[observation], productSum_F[observation], this.products_F[observation], products_B[observation]);
					// Message to 'bias' from Plus factor
					bias_B[observation] = DoublePlusOp.AAverageConditional(affinity_B[observation], productSum_F[observation]);
					// Message to 'userBias_itemuserData_observation_' from Plus factor
					this.userBias_itemuserData_observation__B[observation] = DoublePlusOp.AAverageConditional(bias_B[observation], itemBias_itemitemData_observation__F[observation]);
					for(int trait = 0; trait<2; trait++) {
						// Message to 'userTraits_itemuserData_observation_' from Product factor
						this.userTraits_itemuserData_observation__B[observation][trait] = GaussianProductOp_SHG09.AAverageConditional(products_B[observation][trait], this.itemTraits_itemitemData_observation__F[observation][trait], this.itemTraits_itemitemData_observation__B[observation][trait]);
					}
				}
				// Message to 'userTraits_use' from GetItems factor
				this.userTraits_use_B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits_itemuserData_observation__B, this.UserData, this.userTraits_use_B);
				this.userTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_F, this.userTraits_use_B, this.userTraits_use_F_marginal);
				for(int observation = 0; observation<this.Vint0; observation++) {
					// Message to 'userTraits_itemuserData_observation_' from GetItems factor
					this.userTraits_itemuserData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_itemuserData_observation__B[observation], this.userTraits_F, this.userTraits_use_F_marginal, this.UserData, observation, this.userTraits_itemuserData_observation__F[observation]);
					for(int trait = 0; trait<2; trait++) {
						// Message to 'itemTraits_itemitemData_observation_' from Product factor
						this.itemTraits_itemitemData_observation__B[observation][trait] = GaussianProductOp_SHG09.BAverageConditional(products_B[observation][trait], this.userTraits_itemuserData_observation__F[observation][trait], this.userTraits_itemuserData_observation__B[observation][trait]);
						// Message to 'products' from Product factor
						this.products_F[observation][trait] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits_itemuserData_observation__F[observation][trait], this.itemTraits_itemitemData_observation__F[observation][trait], this.userTraits_itemuserData_observation__B[observation][trait], this.itemTraits_itemitemData_observation__B[observation][trait]);
					}
				}
				// Message to 'itemTraits_use' from GetItems factor
				this.itemTraits_use_B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits_itemitemData_observation__B, this.ItemData, this.itemTraits_use_B);
				// Message to 'userBias_use' from GetItems factor
				this.userBias_use_B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.userBias_itemuserData_observation__B, this.UserData, this.userBias_use_B);
				this.userBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.UserBiasPrior, this.userBias_use_B, this.userBias_use_F_marginal);
				for(int observation = 0; observation<this.Vint0; observation++) {
					// Message to 'userBias_itemuserData_observation_' from GetItems factor
					this.userBias_itemuserData_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias_itemuserData_observation__B[observation], this.userBias_F, this.userBias_use_F_marginal, this.UserData, observation, this.userBias_itemuserData_observation__F[observation]);
					// Message to 'itemBias_itemitemData_observation_' from Plus factor
					this.itemBias_itemitemData_observation__B[observation] = DoublePlusOp.BAverageConditional(bias_B[observation], this.userBias_itemuserData_observation__F[observation]);
				}
				// Message to 'itemBias_use' from GetItems factor
				this.itemBias_use_B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.itemBias_itemitemData_observation__B, this.ItemData, this.itemBias_use_B);
				// Message to 'userThresholds_use' from GetItems factor
				this.userThresholds_use_B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userThresholds_itemuserData_observation__B, this.UserData, this.userThresholds_use_B);
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			for(int user = 0; user<200; user++) {
				// Create array for 'userTraits_marginal' Forwards messages.
				this.userTraits_marginal_F[user] = new DistributionStructArray<Gaussian,double>(2);
				for(int trait = 0; trait<2; trait++) {
					this.userTraits_marginal_F[user][trait] = Gaussian.Uniform();
					// Message to 'userTraits_marginal' from Variable factor
					this.userTraits_marginal_F[user][trait] = VariableOp.MarginalAverageConditional<Gaussian>(this.userTraits_use_B[user][trait], this.UserTraitsPrior[user][trait], this.userTraits_marginal_F[user][trait]);
				}
			}
			// Create array for 'itemTraits_marginal' Forwards messages.
			this.itemTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int item = 0; item<200; item++) {
				// Create array for 'itemTraits_marginal' Forwards messages.
				this.itemTraits_marginal_F[item] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					this.itemTraits_marginal_F[item][trait] = Gaussian.Uniform();
					// Message to 'itemTraits_marginal' from Variable factor
					this.itemTraits_marginal_F[item][trait] = VariableOp.MarginalAverageConditional<Gaussian>(this.itemTraits_use_B[item][trait], this.ItemTraitsPrior[item][trait], this.itemTraits_marginal_F[item][trait]);
				}
			}
			// Create array for 'userBias_marginal' Forwards messages.
			this.userBias_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			for(int user = 0; user<200; user++) {
				this.userBias_marginal_F[user] = Gaussian.Uniform();
				// Message to 'userBias_marginal' from Variable factor
				this.userBias_marginal_F[user] = VariableOp.MarginalAverageConditional<Gaussian>(this.userBias_use_B[user], this.UserBiasPrior[user], this.userBias_marginal_F[user]);
			}
			// Create array for 'itemBias_marginal' Forwards messages.
			this.itemBias_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			for(int item = 0; item<200; item++) {
				this.itemBias_marginal_F[item] = Gaussian.Uniform();
				// Message to 'itemBias_marginal' from Variable factor
				this.itemBias_marginal_F[item] = VariableOp.MarginalAverageConditional<Gaussian>(this.itemBias_use_B[item], this.ItemBiasPrior[item], this.itemBias_marginal_F[item]);
			}
			// Create array for 'userThresholds_marginal' Forwards messages.
			this.userThresholds_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userThresholds_marginal' Forwards messages.
				this.userThresholds_marginal_F[user] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int level = 0; level<2; level++) {
				for(int user = 0; user<200; user++) {
					this.userThresholds_marginal_F[user][level] = Gaussian.Uniform();
					// Message to 'userThresholds_marginal' from Variable factor
					this.userThresholds_marginal_F[user][level] = VariableOp.MarginalAverageConditional<Gaussian>(this.userThresholds_use_B[user][level], this.UserThresholdsPrior[user][level], this.userThresholds_marginal_F[user][level]);
				}
			}
			this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemBiasPrior</summary>
		private void Changed_itemBiasPrior()
		{
			if (this.Changed_itemBiasPrior_isDone) {
				return ;
			}
			// Create array for 'itemBiasPrior_marginal' Forwards messages.
			this.itemBiasPrior_marginal_F = new PointMass<Gaussian[]>(this.ItemBiasPrior);
			// Message to 'itemBiasPrior_marginal' from DerivedVariable factor
			this.itemBiasPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.ItemBiasPrior, this.itemBiasPrior_marginal_F);
			this.Changed_itemBiasPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData</summary>
		private void Changed_itemData()
		{
			if (this.Changed_itemData_isDone) {
				return ;
			}
			// Create array for 'itemData_marginal' Forwards messages.
			this.itemData_marginal_F = new PointMass<int[]>(this.ItemData);
			// Message to 'itemData_marginal' from DerivedVariable factor
			this.itemData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.ItemData, this.itemData_marginal_F);
			this.Changed_itemData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and itemTraitsPrior and numberOfIterationsDecreased and userData and userTraitsPrior and vint0 and must reset on changes to affinityNoiseVariance and itemBiasPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userThresholdsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11(bool initialise)
		{
			if (this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone&&((!initialise)||this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.Vint0; observation++) {
				for(int trait = 0; trait<2; trait++) {
					// Message to 'products' from Product factor
					this.products_F[observation][trait] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits_itemuserData_observation__F[observation][trait], this.itemTraits_itemitemData_observation__F[observation][trait], this.userTraits_itemuserData_observation__B[observation][trait], this.itemTraits_itemitemData_observation__B[observation][trait]);
				}
			}
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = true;
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and itemTraitsPrior and numberOfIterationsDecreased and vint0 and must reset on changes to affinityNoiseVariance and itemBiasPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7(bool initialise)
		{
			if (this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone&&((!initialise)||this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Message to 'itemTraits_itemitemData_observation_' from GetItems factor
				this.itemTraits_itemitemData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_itemitemData_observation__B[observation], this.itemTraits_F, this.itemTraits_use_F_marginal, this.ItemData, observation, this.itemTraits_itemitemData_observation__F[observation]);
			}
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone = true;
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemTraitsPrior</summary>
		private void Changed_itemTraitsPrior()
		{
			if (this.Changed_itemTraitsPrior_isDone) {
				return ;
			}
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					// Message to 'itemTraits' from Random factor
					this.itemTraits_F[item][trait] = ArrayHelper.SetTo<Gaussian>(this.itemTraits_F[item][trait], this.ItemTraitsPrior[item][trait]);
				}
			}
			// Create array for 'itemTraitsPrior_marginal' Forwards messages.
			this.itemTraitsPrior_marginal_F = new PointMass<Gaussian[][]>(this.ItemTraitsPrior);
			// Message to 'itemTraitsPrior_marginal' from DerivedVariable factor
			this.itemTraitsPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.ItemTraitsPrior, this.itemTraitsPrior_marginal_F);
			this.Changed_itemTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemTraitsPrior and numberOfIterationsDecreased and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6(bool initialise)
		{
			if (this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone&&((!initialise)||this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised)) {
				return ;
			}
			this.itemTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits_F, this.itemTraits_use_B, this.itemTraits_use_F_marginal);
			this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone = true;
			this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised)) {
				return ;
			}
			this.itemTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits_F);
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					this.itemTraits_use_B[item][trait] = Gaussian.Uniform();
				}
			}
			this.userTraits_use_F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits_F);
			for(int user = 0; user<200; user++) {
				for(int trait = 0; trait<2; trait++) {
					this.userTraits_use_B[user][trait] = Gaussian.Uniform();
				}
			}
			for(int item = 0; item<200; item++) {
				this.itemBias_use_B[item] = Gaussian.Uniform();
			}
			this.userBias_use_F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(this.userBias_F);
			for(int user = 0; user<200; user++) {
				this.userBias_use_B[user] = Gaussian.Uniform();
			}
			for(int level = 0; level<2; level++) {
				for(int user = 0; user<200; user++) {
					this.userThresholds_use_B[user][level] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userBiasPrior and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userData and userThresholdsPrior and userTraitsPrior and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised)) {
				return ;
			}
			this.userBias_use_F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.UserBiasPrior, this.userBias_use_B, this.userBias_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isDone = true;
			this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userBiasPrior and userData and vint0 and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Message to 'userBias_itemuserData_observation_' from GetItems factor
				this.userBias_itemuserData_observation__F[observation] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias_itemuserData_observation__B[observation], this.userBias_F, this.userBias_use_F_marginal, this.UserData, observation, this.userBias_itemuserData_observation__F[observation]);
			}
			this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone = true;
			this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userData and userTraitsPrior and vint0 and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userThresholdsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Message to 'userTraits_itemuserData_observation_' from GetItems factor
				this.userTraits_itemuserData_observation__F[observation] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_itemuserData_observation__B[observation], this.userTraits_F, this.userTraits_use_F_marginal, this.UserData, observation, this.userTraits_itemuserData_observation__F[observation]);
			}
			this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone = true;
			this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userTraitsPrior and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and vint0</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised)) {
				return ;
			}
			this.userTraits_use_F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits_F, this.userTraits_use_B, this.userTraits_use_F_marginal);
			this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone = true;
			this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vint0 and must reset on changes to affinityNoiseVariance and itemBiasPrior and itemData and itemTraitsPrior and ratingData and thresholdsNoiseVariance and userBiasPrior and userData and userThresholdsPrior and userTraitsPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised)) {
				return ;
			}
			for(int observation = 0; observation<this.Vint0; observation++) {
				for(int trait = 0; trait<2; trait++) {
					this.itemTraits_itemitemData_observation__F[observation][trait] = Gaussian.Uniform();
					this.itemTraits_itemitemData_observation__B[observation][trait] = Gaussian.Uniform();
					this.products_F[observation][trait] = Gaussian.Uniform();
					this.userTraits_itemuserData_observation__B[observation][trait] = Gaussian.Uniform();
					this.userTraits_itemuserData_observation__F[observation][trait] = Gaussian.Uniform();
				}
				this.itemBias_itemitemData_observation__B[observation] = Gaussian.Uniform();
				this.userBias_itemuserData_observation__F[observation] = Gaussian.Uniform();
				this.userBias_itemuserData_observation__B[observation] = Gaussian.Uniform();
				for(int level = 0; level<2; level++) {
					this.userThresholds_itemuserData_observation__B[observation][level] = Gaussian.Uniform();
				}
				this.noisyAffinity_rep_B_toDef[observation] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.noisyAffinity_F[observation]);
				for(int level = 0; level<2; level++) {
					this.noisyAffinity_rep_B[observation][level] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isDone = true;
			this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ratingData and vint0</summary>
		private void Changed_ratingData_vint0()
		{
			if (this.Changed_ratingData_vint0_isDone) {
				return ;
			}
			// Create array for 'ratingData_marginal' Forwards messages.
			this.ratingData_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'ratingData_marginal' Forwards messages.
				this.ratingData_marginal_F[observation] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int level = 0; level<2; level++) {
					this.ratingData_marginal_F[observation][level] = Bernoulli.Uniform();
				}
			}
			// Message to 'ratingData_marginal' from DerivedVariable factor
			this.ratingData_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.RatingData, this.ratingData_marginal_F);
			this.Changed_ratingData_vint0_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of thresholdsNoiseVariance</summary>
		private void Changed_thresholdsNoiseVariance()
		{
			if (this.Changed_thresholdsNoiseVariance_isDone) {
				return ;
			}
			this.thresholdsNoiseVariance_marginal_F = Gaussian.Uniform();
			// Message to 'thresholdsNoiseVariance_marginal' from DerivedVariable factor
			this.thresholdsNoiseVariance_marginal_F = DerivedVariableOp.MarginalAverageConditional<Gaussian,double>(this.ThresholdsNoiseVariance, this.thresholdsNoiseVariance_marginal_F);
			this.Changed_thresholdsNoiseVariance_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userBiasPrior</summary>
		private void Changed_userBiasPrior()
		{
			if (this.Changed_userBiasPrior_isDone) {
				return ;
			}
			// Create array for 'userBiasPrior_marginal' Forwards messages.
			this.userBiasPrior_marginal_F = new PointMass<Gaussian[]>(this.UserBiasPrior);
			// Message to 'userBiasPrior_marginal' from DerivedVariable factor
			this.userBiasPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.UserBiasPrior, this.userBiasPrior_marginal_F);
			this.Changed_userBiasPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userData</summary>
		private void Changed_userData()
		{
			if (this.Changed_userData_isDone) {
				return ;
			}
			// Create array for 'userData_marginal' Forwards messages.
			this.userData_marginal_F = new PointMass<int[]>(this.UserData);
			// Message to 'userData_marginal' from DerivedVariable factor
			this.userData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.UserData, this.userData_marginal_F);
			this.Changed_userData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userThresholdsPrior</summary>
		private void Changed_userThresholdsPrior()
		{
			if (this.Changed_userThresholdsPrior_isDone) {
				return ;
			}
			// Create array for 'userThresholdsPrior_marginal' Forwards messages.
			this.userThresholdsPrior_marginal_F = new PointMass<Gaussian[][]>(this.UserThresholdsPrior);
			// Message to 'userThresholdsPrior_marginal' from DerivedVariable factor
			this.userThresholdsPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.UserThresholdsPrior, this.userThresholdsPrior_marginal_F);
			this.Changed_userThresholdsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userTraitsPrior</summary>
		private void Changed_userTraitsPrior()
		{
			if (this.Changed_userTraitsPrior_isDone) {
				return ;
			}
			for(int user = 0; user<200; user++) {
				for(int trait = 0; trait<2; trait++) {
					// Message to 'userTraits' from Random factor
					this.userTraits_F[user][trait] = ArrayHelper.SetTo<Gaussian>(this.userTraits_F[user][trait], this.UserTraitsPrior[user][trait]);
				}
			}
			// Create array for 'userTraitsPrior_marginal' Forwards messages.
			this.userTraitsPrior_marginal_F = new PointMass<Gaussian[][]>(this.UserTraitsPrior);
			// Message to 'userTraitsPrior_marginal' from DerivedVariable factor
			this.userTraitsPrior_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.UserTraitsPrior, this.userTraitsPrior_marginal_F);
			this.Changed_userTraitsPrior_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint0</summary>
		private void Changed_vint0()
		{
			if (this.Changed_vint0_isDone) {
				return ;
			}
			// Create array for 'itemTraits_itemitemData_observation_' Forwards messages.
			this.itemTraits_itemitemData_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'itemTraits_itemitemData_observation_' Forwards messages.
				this.itemTraits_itemitemData_observation__F[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemTraits_itemitemData_observation_' Backwards messages.
			this.itemTraits_itemitemData_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'itemTraits_itemitemData_observation_' Backwards messages.
				this.itemTraits_itemitemData_observation__B[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'products_F'
			this.products_F = new DistributionStructArray<Gaussian,double>[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'products' Forwards messages.
				this.products_F[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits_itemuserData_observation_' Backwards messages.
			this.userTraits_itemuserData_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'userTraits_itemuserData_observation_' Backwards messages.
				this.userTraits_itemuserData_observation__B[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits_itemuserData_observation_' Forwards messages.
			this.userTraits_itemuserData_observation__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'userTraits_itemuserData_observation_' Forwards messages.
				this.userTraits_itemuserData_observation__F[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemBias_itemitemData_observation_' Backwards messages.
			this.itemBias_itemitemData_observation__B = new DistributionStructArray<Gaussian,double>(this.Vint0);
			// Create array for 'userBias_itemuserData_observation_' Forwards messages.
			this.userBias_itemuserData_observation__F = new DistributionStructArray<Gaussian,double>(this.Vint0);
			// Create array for 'userBias_itemuserData_observation_' Backwards messages.
			this.userBias_itemuserData_observation__B = new DistributionStructArray<Gaussian,double>(this.Vint0);
			// Create array for 'userThresholds_itemuserData_observation_' Backwards messages.
			this.userThresholds_itemuserData_observation__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint0);
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'userThresholds_itemuserData_observation_' Backwards messages.
				this.userThresholds_itemuserData_observation__B[observation] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'noisyAffinity_F'
			this.noisyAffinity_F = new Gaussian[this.Vint0];
			for(int observation = 0; observation<this.Vint0; observation++) {
				this.noisyAffinity_F[observation] = Gaussian.Uniform();
			}
			// Create array for replicates of 'noisyAffinity_rep_B_toDef'
			this.noisyAffinity_rep_B_toDef = new Gaussian[this.Vint0];
			// Create array for replicates of 'noisyAffinity_rep_B'
			this.noisyAffinity_rep_B = new Gaussian[this.Vint0][];
			for(int observation = 0; observation<this.Vint0; observation++) {
				// Create array for 'noisyAffinity_rep' Backwards messages.
				this.noisyAffinity_rep_B[observation] = new Gaussian[2];
			}
			this.vint0_marginal_F = new PointMass<int>(this.Vint0);
			// Message to 'vint0_marginal' from DerivedVariable factor
			this.vint0_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.Vint0, this.vint0_marginal_F);
			this.Changed_vint0_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'userTraits' Forwards messages.
			this.userTraits_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userTraits' Forwards messages.
				this.userTraits_F[user] = new DistributionStructArray<Gaussian,double>(2);
				for(int trait = 0; trait<2; trait++) {
					this.userTraits_F[user][trait] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits' Forwards messages.
			this.itemTraits_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int item = 0; item<200; item++) {
				// Create array for 'itemTraits' Forwards messages.
				this.itemTraits_F[item] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int trait = 0; trait<2; trait++) {
				for(int item = 0; item<200; item++) {
					this.itemTraits_F[item][trait] = Gaussian.Uniform();
				}
			}
			// Create array for 'userBias' Forwards messages.
			this.userBias_F = new DistributionStructArray<Gaussian,double>(200);
			for(int user = 0; user<200; user++) {
				this.userBias_F[user] = Gaussian.Uniform();
			}
			// Create array for 'itemTraits_use' Backwards messages.
			this.itemTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int item = 0; item<200; item++) {
				// Create array for 'itemTraits_use' Backwards messages.
				this.itemTraits_use_B[item] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits_use' Backwards messages.
			this.userTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userTraits_use' Backwards messages.
				this.userTraits_use_B[user] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemBias_use' Backwards messages.
			this.itemBias_use_B = new DistributionStructArray<Gaussian,double>(200);
			// Create array for 'userBias_use' Backwards messages.
			this.userBias_use_B = new DistributionStructArray<Gaussian,double>(200);
			// Create array for 'userThresholds_use' Backwards messages.
			this.userThresholds_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int user = 0; user<200; user++) {
				// Create array for 'userThresholds_use' Backwards messages.
				this.userThresholds_use_B[user] = new DistributionStructArray<Gaussian,double>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2_isDone = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12_isDone = false;
					this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13_isDone = false;
					this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9_isDone = false;
					this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10_isDone = false;
					this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6_isDone = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7_isDone = false;
					this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11_isDone = false;
				}
				this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1_isDone = false;
			}
			this.Changed_thresholdsNoiseVariance();
			this.Changed_affinityNoiseVariance();
			this.Changed_ratingData_vint0();
			this.Changed_itemData();
			this.Changed_userData();
			this.Changed_userThresholdsPrior();
			this.Changed_itemBiasPrior();
			this.Changed_userBiasPrior();
			this.Constant();
			this.Changed_userTraitsPrior();
			this.Changed_vint0();
			this.Changed_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTrai5(initialise);
			this.Changed_itemTraitsPrior();
			this.Changed_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrio2(initialise);
			this.Changed_numberOfIterationsDecreased_userBiasPrior_Init_affinityNoiseVariance_itemBiasPrior_itemData_12(initialise);
			this.Changed_numberOfIterationsDecreased_userBiasPrior_userData_vint0_Init_affinityNoiseVariance_itemBias13(initialise);
			this.Changed_numberOfIterationsDecreased_userTraitsPrior_Init_affinityNoiseVariance_itemBiasPrior_itemDat9(initialise);
			this.Changed_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_affinityNoiseVariance_itemBi10(initialise);
			this.Changed_itemTraitsPrior_numberOfIterationsDecreased_Init_affinityNoiseVariance_itemBiasPrior_itemDat6(initialise);
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_vint0_Init_affinityNoiseVariance_itemBi7(initialise);
			this.Changed_itemData_itemTraitsPrior_numberOfIterationsDecreased_userData_userTraitsPrior_vint0_Init_aff11(initialise);
			this.Changed_affinityNoiseVariance_itemBiasPrior_itemData_itemTraitsPrior_numberOfIterations_ratingData_t1(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vint0") {
				return this.vint0;
			}
			if (variableName=="userTraitsPrior") {
				return this.userTraitsPrior;
			}
			if (variableName=="itemTraitsPrior") {
				return this.itemTraitsPrior;
			}
			if (variableName=="userBiasPrior") {
				return this.userBiasPrior;
			}
			if (variableName=="itemBiasPrior") {
				return this.itemBiasPrior;
			}
			if (variableName=="userThresholdsPrior") {
				return this.userThresholdsPrior;
			}
			if (variableName=="userData") {
				return this.userData;
			}
			if (variableName=="itemData") {
				return this.itemData;
			}
			if (variableName=="ratingData") {
				return this.ratingData;
			}
			if (variableName=="affinityNoiseVariance") {
				return this.affinityNoiseVariance;
			}
			if (variableName=="thresholdsNoiseVariance") {
				return this.thresholdsNoiseVariance;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ItemBiasMarginal()
		{
			return this.itemBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBiasPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> ItemBiasPriorMarginal()
		{
			return this.itemBiasPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> ItemDataMarginal()
		{
			return this.itemData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsMarginal()
		{
			return this.itemTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraitsPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> ItemTraitsPriorMarginal()
		{
			return this.itemTraitsPrior_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="thresholdsNoiseVariance") {
				return this.ThresholdsNoiseVarianceMarginal();
			}
			if (variableName=="affinityNoiseVariance") {
				return this.AffinityNoiseVarianceMarginal();
			}
			if (variableName=="ratingData") {
				return this.RatingDataMarginal();
			}
			if (variableName=="itemData") {
				return this.ItemDataMarginal();
			}
			if (variableName=="userData") {
				return this.UserDataMarginal();
			}
			if (variableName=="userThresholdsPrior") {
				return this.UserThresholdsPriorMarginal();
			}
			if (variableName=="itemBiasPrior") {
				return this.ItemBiasPriorMarginal();
			}
			if (variableName=="userBiasPrior") {
				return this.UserBiasPriorMarginal();
			}
			if (variableName=="userTraitsPrior") {
				return this.UserTraitsPriorMarginal();
			}
			if (variableName=="vint0") {
				return this.Vint0Marginal();
			}
			if (variableName=="itemTraitsPrior") {
				return this.ItemTraitsPriorMarginal();
			}
			if (variableName=="userTraits") {
				return this.UserTraitsMarginal();
			}
			if (variableName=="itemTraits") {
				return this.ItemTraitsMarginal();
			}
			if (variableName=="userBias") {
				return this.UserBiasMarginal();
			}
			if (variableName=="itemBias") {
				return this.ItemBiasMarginal();
			}
			if (variableName=="userThresholds") {
				return this.UserThresholdsMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'ratingData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> RatingDataMarginal()
		{
			return this.ratingData_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vint0") {
				this.vint0 = (int)value;
				return ;
			}
			if (variableName=="userTraitsPrior") {
				this.userTraitsPrior = (Gaussian[][])value;
				return ;
			}
			if (variableName=="itemTraitsPrior") {
				this.itemTraitsPrior = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userBiasPrior") {
				this.userBiasPrior = (Gaussian[])value;
				return ;
			}
			if (variableName=="itemBiasPrior") {
				this.itemBiasPrior = (Gaussian[])value;
				return ;
			}
			if (variableName=="userThresholdsPrior") {
				this.userThresholdsPrior = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userData") {
				this.userData = (int[])value;
				return ;
			}
			if (variableName=="itemData") {
				this.itemData = (int[])value;
				return ;
			}
			if (variableName=="ratingData") {
				this.ratingData = (bool[][])value;
				return ;
			}
			if (variableName=="affinityNoiseVariance") {
				this.affinityNoiseVariance = (double)value;
				return ;
			}
			if (variableName=="thresholdsNoiseVariance") {
				this.thresholdsNoiseVariance = (double)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'thresholdsNoiseVariance' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Gaussian ThresholdsNoiseVarianceMarginal()
		{
			return this.thresholdsNoiseVariance_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> UserBiasMarginal()
		{
			return this.userBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBiasPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> UserBiasPriorMarginal()
		{
			return this.userBiasPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> UserDataMarginal()
		{
			return this.userData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholds' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsMarginal()
		{
			return this.userThresholds_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholdsPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> UserThresholdsPriorMarginal()
		{
			return this.userThresholdsPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsMarginal()
		{
			return this.userTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraitsPrior' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> UserTraitsPriorMarginal()
		{
			return this.userTraitsPrior_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint0' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint0Marginal()
		{
			return this.vint0_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
