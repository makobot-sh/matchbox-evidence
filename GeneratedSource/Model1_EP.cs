// <auto-generated />
#pragma warning disable 1570, 1591

using System;
using Microsoft.ML.Probabilistic;
using Microsoft.ML.Probabilistic.Distributions;
using Microsoft.ML.Probabilistic.Factors;
using Microsoft.ML.Probabilistic.Collections;

namespace Models
{
	/// <summary>
	/// Generated algorithm for performing inference.
	/// </summary>
	/// <remarks>
	/// If you wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class.
	/// 2) Set the value of any externally-set fields e.g. data, priors.
	/// 3) Call the Execute(numberOfIterations) method.
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 0.4.2203.202 at 14:06 on s√°bado, 7 de octubre de 2023.
	/// </remarks>
	public partial class Model1_EP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>True if Changed_itemData has executed. Set this to false to force re-execution of Changed_itemData</summary>
		public bool Changed_itemData_isDone;
		/// <summary>True if Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80</summary>
		public bool Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11 has performed initialisation. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8 has executed. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone;
		/// <summary>True if Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8 has performed initialisation. Set this to false to force re-execution of Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8</summary>
		public bool Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3</summary>
		public bool Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10</summary>
		public bool Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7</summary>
		public bool Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6 has executed. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6</summary>
		public bool Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isDone;
		/// <summary>True if Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6 has performed initialisation. Set this to false to force re-execution of Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6</summary>
		public bool Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised;
		/// <summary>True if Changed_ratingData_vint26 has executed. Set this to false to force re-execution of Changed_ratingData_vint26</summary>
		public bool Changed_ratingData_vint26_isDone;
		/// <summary>True if Changed_userData has executed. Set this to false to force re-execution of Changed_userData</summary>
		public bool Changed_userData_isDone;
		/// <summary>True if Changed_vGaussian____6 has executed. Set this to false to force re-execution of Changed_vGaussian____6</summary>
		public bool Changed_vGaussian____6_isDone;
		/// <summary>True if Changed_vGaussian____7 has executed. Set this to false to force re-execution of Changed_vGaussian____7</summary>
		public bool Changed_vGaussian____7_isDone;
		/// <summary>True if Changed_vGaussian____8 has executed. Set this to false to force re-execution of Changed_vGaussian____8</summary>
		public bool Changed_vGaussian____8_isDone;
		/// <summary>True if Changed_vGaussian__18 has executed. Set this to false to force re-execution of Changed_vGaussian__18</summary>
		public bool Changed_vGaussian__18_isDone;
		/// <summary>True if Changed_vGaussian__19 has executed. Set this to false to force re-execution of Changed_vGaussian__19</summary>
		public bool Changed_vGaussian__19_isDone;
		/// <summary>True if Changed_vint26 has executed. Set this to false to force re-execution of Changed_vint26</summary>
		public bool Changed_vint26_isDone;
		/// <summary>True if Constant has executed. Set this to false to force re-execution of Constant</summary>
		public bool Constant_isDone;
		/// <summary>Message to marginal of 'evidence'</summary>
		public Bernoulli evidence_marginal_F;
		public DistributionStructArray<Gaussian,double> itemBias__0__B;
		public DistributionStructArray<Gaussian,double> itemBias__0__itemitemData_index13__B;
		/// <summary>Message to marginal of 'itemBias'</summary>
		public DistributionStructArray<Gaussian,double> itemBias_marginal_F;
		/// <summary>Field backing the itemData property</summary>
		private int[] ItemData;
		/// <summary>Message to marginal of 'itemData'</summary>
		public PointMass<int[]> itemData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__F;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__itemitemData_index13__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits__0__itemitemData_index13__F;
		/// <summary>Message to marginal of 'itemTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_marginal_F;
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the ratingData property</summary>
		private bool[][] RatingData;
		/// <summary>Message to marginal of 'ratingData'</summary>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> ratingData_marginal_F;
		public DistributionStructArray<Gaussian,double> userBias__0__B;
		public DistributionStructArray<Gaussian,double> userBias__0__itemuserData_index13__B;
		/// <summary>Message to marginal of 'userBias'</summary>
		public DistributionStructArray<Gaussian,double> userBias_marginal_F;
		/// <summary>Field backing the userData property</summary>
		private int[] UserData;
		/// <summary>Message to marginal of 'userData'</summary>
		public PointMass<int[]> userData_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__itemuserData_index13__B;
		/// <summary>Message to marginal of 'userThresholds'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_marginal_F;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__F;
		/// <summary>Buffer for GetItemsOp&lt;double[]&gt;.ItemsAverageConditional&lt;DistributionRefArray&lt;DistributionStructArray&lt;Gaussian, double&gt;, double[]&gt;, DistributionStructArray&lt;Gaussian, double&gt;&gt;</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__F_marginal;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__itemuserData_index13__B;
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits__0__itemuserData_index13__F;
		/// <summary>Message to marginal of 'userTraits'</summary>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_marginal_F;
		public DistributionStructArray<Gaussian,double>[] vdouble__64_F;
		public Gaussian[] vdouble114_F;
		public Gaussian[][] vdouble114_rep_B;
		/// <summary>Buffer for ReplicateOp_Divide.Marginal&lt;Gaussian&gt;</summary>
		public Gaussian[] vdouble114_rep_B_toDef;
		/// <summary>Field backing the vGaussian____6 property</summary>
		private Gaussian[][] VGaussian____6;
		/// <summary>Message to marginal of 'vGaussian____6'</summary>
		public PointMass<Gaussian[][]> vGaussian____6_marginal_F;
		/// <summary>Field backing the vGaussian____7 property</summary>
		private Gaussian[][] VGaussian____7;
		/// <summary>Message to marginal of 'vGaussian____7'</summary>
		public PointMass<Gaussian[][]> vGaussian____7_marginal_F;
		/// <summary>Field backing the vGaussian____8 property</summary>
		private Gaussian[][] VGaussian____8;
		/// <summary>Message to marginal of 'vGaussian____8'</summary>
		public PointMass<Gaussian[][]> vGaussian____8_marginal_F;
		/// <summary>Field backing the vGaussian__18 property</summary>
		private Gaussian[] VGaussian__18;
		/// <summary>Message to marginal of 'vGaussian__18'</summary>
		public PointMass<Gaussian[]> vGaussian__18_marginal_F;
		/// <summary>Field backing the vGaussian__19 property</summary>
		private Gaussian[] VGaussian__19;
		/// <summary>Message to marginal of 'vGaussian__19'</summary>
		public PointMass<Gaussian[]> vGaussian__19_marginal_F;
		/// <summary>Field backing the vint26 property</summary>
		private int Vint26;
		/// <summary>Message to marginal of 'vint26'</summary>
		public PointMass<int> vint26_marginal_F;
		#endregion

		#region Properties
		/// <summary>The externally-specified value of 'itemData'</summary>
		public int[] itemData
		{
			get {
				return this.ItemData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint26)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint26)+" was expected for variable \'itemData\'");
				}
				this.ItemData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_itemData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{
			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'ratingData'</summary>
		public bool[][] ratingData
		{
			get {
				return this.RatingData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint26)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint26)+" was expected for variable \'ratingData\'");
				}
				this.RatingData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_ratingData_vint26_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'userData'</summary>
		public int[] userData
		{
			get {
				return this.UserData;
			}
			set {
				if ((value!=null)&&(value.Length!=this.Vint26)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.Vint26)+" was expected for variable \'userData\'");
				}
				this.UserData = value;
				this.numberOfIterationsDone = 0;
				this.Changed_userData_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____6'</summary>
		public Gaussian[][] vGaussian____6
		{
			get {
				return this.VGaussian____6;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vGaussian____6\'");
				}
				this.VGaussian____6 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = false;
				this.Changed_vGaussian____6_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isDone = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____7'</summary>
		public Gaussian[][] vGaussian____7
		{
			get {
				return this.VGaussian____7;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vGaussian____7\'");
				}
				this.VGaussian____7 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_vGaussian____7_isDone = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isDone = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian____8'</summary>
		public Gaussian[][] vGaussian____8
		{
			get {
				return this.VGaussian____8;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vGaussian____8\'");
				}
				this.VGaussian____8 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian____8_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__18'</summary>
		public Gaussian[] vGaussian__18
		{
			get {
				return this.VGaussian__18;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vGaussian__18\'");
				}
				this.VGaussian__18 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian__18_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vGaussian__19'</summary>
		public Gaussian[] vGaussian__19
		{
			get {
				return this.VGaussian__19;
			}
			set {
				if ((value!=null)&&(value.Length!=200)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+200)+" was expected for variable \'vGaussian__19\'");
				}
				this.VGaussian__19 = value;
				this.numberOfIterationsDone = 0;
				this.Changed_vGaussian__19_isDone = false;
				this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = false;
				this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised = false;
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
		}

		/// <summary>The externally-specified value of 'vint26'</summary>
		public int vint26
		{
			get {
				return this.Vint26;
			}
			set {
				if (this.Vint26!=value) {
					this.Vint26 = value;
					this.numberOfIterationsDone = 0;
					this.Changed_ratingData_vint26_isDone = false;
					this.Changed_vint26_isDone = false;
					this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = false;
					this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = false;
					this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
				}
			}
		}

		#endregion

		#region Methods
		/// <summary>Computations that depend on the observed value of itemData</summary>
		private void Changed_itemData()
		{
			if (this.Changed_itemData_isDone) {
				return ;
			}
			// Create array for 'itemData_marginal' Forwards messages.
			this.itemData_marginal_F = new PointMass<int[]>(this.ItemData);
			// Message to 'itemData_marginal' from DerivedVariable factor
			this.itemData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.ItemData, this.itemData_marginal_F);
			this.Changed_itemData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterations and ratingData and userData and vGaussian____6 and vGaussian____7 and vGaussian____8 and vGaussian__18 and vGaussian__19 and vint26</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		private void Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80(int numberOfIterations)
		{
			if (this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone) {
				return ;
			}
			// Create array for 'userTraits_marginal' Forwards messages.
			this.userTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli[] evidence_selector_rep_F;
			// Create array for 'evidence_selector_rep' Forwards messages.
			evidence_selector_rep_F = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep_rep_B_toDef'
			Bernoulli[] evidence_selector_rep_rep_B_toDef = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep_rep_F_marginal'
			Bernoulli[] evidence_selector_rep_rep_F_marginal = new Bernoulli[200];
			Bernoulli evidence_selector_rep_F_marginal;
			Bernoulli[] evidence_selector_uses_F;
			// Create array for 'evidence_selector_uses' Forwards messages.
			evidence_selector_uses_F = new Bernoulli[6];
			evidence_selector_uses_F[1] = Bernoulli.Uniform();
			evidence_selector_rep_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[1]);
			Bernoulli evidence_selector_rep_B_toDef;
			evidence_selector_rep_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[1]);
			Bernoulli evidence_selector_uses_F_marginal;
			Bernoulli vBernoulli1 = Bernoulli.Uniform();
			evidence_selector_uses_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(vBernoulli1);
			Bernoulli evidence_selector_uses_B_toDef;
			evidence_selector_uses_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(vBernoulli1);
			Bernoulli[] evidence_selector_uses_B;
			// Create array for 'evidence_selector_uses' Backwards messages.
			evidence_selector_uses_B = new Bernoulli[6];
			evidence_selector_uses_B[0] = Bernoulli.Uniform();
			DistributionStructArray<Bernoulli,bool> evidence_selector_cases_B;
			// Create array for 'evidence_selector_cases' Backwards messages.
			evidence_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				evidence_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			Bernoulli evidence_selector_cases_0_B = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_uses_B;
			// Create array for 'evidence_selector_cases_0_uses' Backwards messages.
			evidence_selector_cases_0_uses_B = new Bernoulli[39];
			evidence_selector_cases_0_uses_B[36] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[32] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[29] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[19] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[17] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[15] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[13] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[9] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[7] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[35] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[34] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[31] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[30] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[28] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[8] = Bernoulli.Uniform();
			DistributionStructArray<Gaussian,double> userBias__0__F_marginal;
			DistributionStructArray<Gaussian,double> userBias__0__F;
			// Create array for 'userBias__0_' Forwards messages.
			userBias__0__F = new DistributionStructArray<Gaussian,double>(200);
			for(int index10 = 0; index10<200; index10++) {
				userBias__0__F[index10] = Gaussian.Uniform();
			}
			userBias__0__F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(userBias__0__F);
			DistributionStructArray<Gaussian,double> userBias__0__itemuserData_index13__F;
			// Create array for 'userBias__0__itemuserData_index13_' Forwards messages.
			userBias__0__itemuserData_index13__F = new DistributionStructArray<Gaussian,double>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				userBias__0__itemuserData_index13__F[index13] = Gaussian.Uniform();
			}
			DistributionStructArray<Gaussian,double> itemBias__0__F_marginal;
			DistributionStructArray<Gaussian,double> itemBias__0__F;
			// Create array for 'itemBias__0_' Forwards messages.
			itemBias__0__F = new DistributionStructArray<Gaussian,double>(200);
			for(int index11 = 0; index11<200; index11++) {
				itemBias__0__F[index11] = Gaussian.Uniform();
			}
			itemBias__0__F_marginal = GetItemsOp<double>.MarginalInit<DistributionStructArray<Gaussian,double>>(itemBias__0__F);
			DistributionStructArray<Gaussian,double> itemBias__0__itemitemData_index13__F;
			// Create array for 'itemBias__0__itemitemData_index13_' Forwards messages.
			itemBias__0__itemitemData_index13__F = new DistributionStructArray<Gaussian,double>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				itemBias__0__itemitemData_index13__F[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble110_F'
			Gaussian[] vdouble110_F = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble110_F[index13] = Gaussian.Uniform();
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__F_marginal;
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__F;
			// Create array for 'userThresholds__0_' Forwards messages.
			userThresholds__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int index10 = 0; index10<200; index10++) {
				// Create array for 'userThresholds__0_' Forwards messages.
				userThresholds__0__F[index10] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					userThresholds__0__F[index10][index14] = Gaussian.Uniform();
				}
			}
			userThresholds__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(userThresholds__0__F);
			for(int index10 = 0; index10<200; index10++) {
				for(int index14 = 0; index14<2; index14++) {
					// Message to 'userThresholds__0_' from Copy factor
					userThresholds__0__F[index10][index14] = ArrayHelper.SetTo<Gaussian>(userThresholds__0__F[index10][index14], this.VGaussian____8[index10][index14]);
				}
			}
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds__0__itemuserData_index13__F;
			// Create array for 'userThresholds__0__itemuserData_index13_' Forwards messages.
			userThresholds__0__itemuserData_index13__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'userThresholds__0__itemuserData_index13_' Forwards messages.
				userThresholds__0__itemuserData_index13__F[index13] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					userThresholds__0__itemuserData_index13__F[index13][index14] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__68_F'
			DistributionStructArray<Gaussian,double>[] vdouble__68_F = new DistributionStructArray<Gaussian,double>[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble__68' Forwards messages.
				vdouble__68_F[index13] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					vdouble__68_F[index13][index14] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble111_F'
			Gaussian[] vdouble111_F = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble111_F[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble112_F'
			Gaussian[] vdouble112_F = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble112_F[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble114_rep_F_marginal'
			Gaussian[] vdouble114_rep_F_marginal = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble114_rep_F_marginal[index13] = ReplicateOp_Divide.MarginalInit<Gaussian>(this.vdouble114_F[index13]);
			}
			// Create array for replicates of 'vdouble114_rep_F'
			Gaussian[][] vdouble114_rep_F = new Gaussian[this.Vint26][];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble114_rep' Forwards messages.
				vdouble114_rep_F[index13] = new Gaussian[2];
				for(int index14 = 0; index14<2; index14++) {
					vdouble114_rep_F[index13][index14] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__71_F'
			DistributionStructArray<Gaussian,double>[] vdouble__71_F = new DistributionStructArray<Gaussian,double>[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble__71' Forwards messages.
				vdouble__71_F[index13] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					vdouble__71_F[index13][index14] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble__71_B'
			DistributionStructArray<Gaussian,double>[] vdouble__71_B = new DistributionStructArray<Gaussian,double>[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble__71' Backwards messages.
				vdouble__71_B[index13] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					vdouble__71_B[index13][index14] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble112_B'
			Gaussian[] vdouble112_B = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble112_B[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble111_B'
			Gaussian[] vdouble111_B = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble111_B[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__64_B'
			DistributionStructArray<Gaussian,double>[] vdouble__64_B = new DistributionStructArray<Gaussian,double>[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble__64' Backwards messages.
				vdouble__64_B[index13] = new DistributionStructArray<Gaussian,double>(2);
				for(int index12 = 0; index12<2; index12++) {
					vdouble__64_B[index13][index12] = Gaussian.Uniform();
				}
			}
			// Create array for replicates of 'vdouble110_B'
			Gaussian[] vdouble110_B = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				vdouble110_B[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble__68_use_B'
			DistributionStructArray<Gaussian,double>[] vdouble__68_use_B = new DistributionStructArray<Gaussian,double>[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble__68_use' Backwards messages.
				vdouble__68_use_B[index13] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					vdouble__68_use_B[index13][index14] = Gaussian.Uniform();
				}
			}
			for(int iteration = this.numberOfIterationsDone; iteration<numberOfIterations; iteration++) {
				this.itemTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__F, this.itemTraits__0__B, this.itemTraits__0__F_marginal);
				for(int index13 = 0; index13<this.Vint26; index13++) {
					// Message to 'itemTraits__0__itemitemData_index13_' from GetItems factor
					this.itemTraits__0__itemitemData_index13__F[index13] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_index13__B[index13], this.itemTraits__0__F, this.itemTraits__0__F_marginal, this.ItemData, index13, this.itemTraits__0__itemitemData_index13__F[index13]);
				}
				userBias__0__F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__18, this.userBias__0__B, userBias__0__F_marginal);
				for(int index13 = 0; index13<this.Vint26; index13++) {
					// Message to 'userBias__0__itemuserData_index13_' from GetItems factor
					userBias__0__itemuserData_index13__F[index13] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.userBias__0__itemuserData_index13__B[index13], userBias__0__F, userBias__0__F_marginal, this.UserData, index13, userBias__0__itemuserData_index13__F[index13]);
				}
				itemBias__0__F_marginal = GetItemsOp<double>.Marginal<DistributionStructArray<Gaussian,double>,Gaussian>(this.VGaussian__19, this.itemBias__0__B, itemBias__0__F_marginal);
				for(int index13 = 0; index13<this.Vint26; index13++) {
					// Message to 'itemBias__0__itemitemData_index13_' from GetItems factor
					itemBias__0__itemitemData_index13__F[index13] = GetItemsOp<double>.ItemsAverageConditional<DistributionStructArray<Gaussian,double>,Gaussian>(this.itemBias__0__itemitemData_index13__B[index13], itemBias__0__F, itemBias__0__F_marginal, this.ItemData, index13, itemBias__0__itemitemData_index13__F[index13]);
				}
				userThresholds__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(userThresholds__0__F, this.userThresholds__0__B, userThresholds__0__F_marginal);
				for(int index13 = 0; index13<this.Vint26; index13++) {
					// Message to 'userThresholds__0__itemuserData_index13_' from GetItems factor
					userThresholds__0__itemuserData_index13__F[index13] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userThresholds__0__itemuserData_index13__B[index13], userThresholds__0__F, userThresholds__0__F_marginal, this.UserData, index13, userThresholds__0__itemuserData_index13__F[index13]);
					// Message to 'vdouble110' from Plus factor
					vdouble110_F[index13] = DoublePlusOp.SumAverageConditional(userBias__0__itemuserData_index13__F[index13], itemBias__0__itemitemData_index13__F[index13]);
					// Message to 'vdouble111' from Sum factor
					vdouble111_F[index13] = FastSumOp.SumAverageConditional(this.vdouble__64_F[index13]);
					// Message to 'vdouble112' from Plus factor
					vdouble112_F[index13] = DoublePlusOp.SumAverageConditional(vdouble110_F[index13], vdouble111_F[index13]);
					// Message to 'vdouble114' from GaussianFromMeanAndVariance factor
					this.vdouble114_F[index13] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(vdouble112_F[index13], 0.10000000000000001);
					vdouble114_rep_F_marginal[index13] = ReplicateOp_Divide.Marginal<Gaussian>(this.vdouble114_rep_B_toDef[index13], this.vdouble114_F[index13], vdouble114_rep_F_marginal[index13]);
					for(int index14 = 0; index14<2; index14++) {
						// Message to 'vdouble114_rep' from Replicate factor
						vdouble114_rep_F[index13][index14] = ReplicateOp_Divide.UsesAverageConditional<Gaussian>(this.vdouble114_rep_B[index13][index14], vdouble114_rep_F_marginal[index13], index14, vdouble114_rep_F[index13][index14]);
						// Message to 'vdouble__68' from GaussianFromMeanAndVariance factor
						vdouble__68_F[index13][index14] = GaussianFromMeanAndVarianceOp.SampleAverageConditional(userThresholds__0__itemuserData_index13__F[index13][index14], 0.10000000000000001);
						// Message to 'vdouble__71' from Difference factor
						vdouble__71_F[index13][index14] = DoublePlusOp.AAverageConditional(vdouble114_rep_F[index13][index14], vdouble__68_F[index13][index14]);
						// Message to 'vdouble__71' from IsPositive factor
						vdouble__71_B[index13][index14] = IsPositiveOp_Proper.XAverageConditional(Bernoulli.PointMass(this.RatingData[index13][index14]), vdouble__71_F[index13][index14]);
						// Message to 'vdouble114_rep' from Difference factor
						this.vdouble114_rep_B[index13][index14] = DoublePlusOp.SumAverageConditional(vdouble__71_B[index13][index14], vdouble__68_F[index13][index14]);
						// Message to 'vdouble__68_use' from Difference factor
						vdouble__68_use_B[index13][index14] = DoublePlusOp.BAverageConditional(vdouble114_rep_F[index13][index14], vdouble__71_B[index13][index14]);
						// Message to 'userThresholds__0__itemuserData_index13_' from GaussianFromMeanAndVariance factor
						this.userThresholds__0__itemuserData_index13__B[index13][index14] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(vdouble__68_use_B[index13][index14], 0.10000000000000001);
					}
					this.vdouble114_rep_B_toDef[index13] = ReplicateOp_Divide.ToDef<Gaussian>(this.vdouble114_rep_B[index13], this.vdouble114_rep_B_toDef[index13]);
					// Message to 'vdouble112' from GaussianFromMeanAndVariance factor
					vdouble112_B[index13] = GaussianFromMeanAndVarianceOp.MeanAverageConditional(this.vdouble114_rep_B_toDef[index13], 0.10000000000000001);
					// Message to 'vdouble111' from Plus factor
					vdouble111_B[index13] = DoublePlusOp.BAverageConditional(vdouble112_B[index13], vdouble110_F[index13]);
					// Message to 'vdouble__64' from Sum factor
					vdouble__64_B[index13] = FastSumOp.ArrayAverageConditional<DistributionStructArray<Gaussian,double>>(vdouble111_B[index13], vdouble111_F[index13], this.vdouble__64_F[index13], vdouble__64_B[index13]);
					// Message to 'vdouble110' from Plus factor
					vdouble110_B[index13] = DoublePlusOp.AAverageConditional(vdouble112_B[index13], vdouble111_F[index13]);
					// Message to 'userBias__0__itemuserData_index13_' from Plus factor
					this.userBias__0__itemuserData_index13__B[index13] = DoublePlusOp.AAverageConditional(vdouble110_B[index13], itemBias__0__itemitemData_index13__F[index13]);
					// Message to 'itemBias__0__itemitemData_index13_' from Plus factor
					this.itemBias__0__itemitemData_index13__B[index13] = DoublePlusOp.BAverageConditional(vdouble110_B[index13], userBias__0__itemuserData_index13__F[index13]);
					for(int index12 = 0; index12<2; index12++) {
						// Message to 'userTraits__0__itemuserData_index13_' from Product factor
						this.userTraits__0__itemuserData_index13__B[index13][index12] = GaussianProductOp_SHG09.AAverageConditional(vdouble__64_B[index13][index12], this.itemTraits__0__itemitemData_index13__F[index13][index12], this.itemTraits__0__itemitemData_index13__B[index13][index12]);
					}
				}
				// Message to 'userTraits__0_' from GetItems factor
				this.userTraits__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits__0__itemuserData_index13__B, this.UserData, this.userTraits__0__B);
				this.userTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__F, this.userTraits__0__B, this.userTraits__0__F_marginal);
				for(int index13 = 0; index13<this.Vint26; index13++) {
					// Message to 'userTraits__0__itemuserData_index13_' from GetItems factor
					this.userTraits__0__itemuserData_index13__F[index13] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_index13__B[index13], this.userTraits__0__F, this.userTraits__0__F_marginal, this.UserData, index13, this.userTraits__0__itemuserData_index13__F[index13]);
					for(int index12 = 0; index12<2; index12++) {
						// Message to 'itemTraits__0__itemitemData_index13_' from Product factor
						this.itemTraits__0__itemitemData_index13__B[index13][index12] = GaussianProductOp_SHG09.BAverageConditional(vdouble__64_B[index13][index12], this.userTraits__0__itemuserData_index13__F[index13][index12], this.userTraits__0__itemuserData_index13__B[index13][index12]);
					}
				}
				// Message to 'itemTraits__0_' from GetItems factor
				this.itemTraits__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits__0__itemitemData_index13__B, this.ItemData, this.itemTraits__0__B);
				// Message to 'userBias__0_' from GetItems factor
				this.userBias__0__B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.userBias__0__itemuserData_index13__B, this.UserData, this.userBias__0__B);
				// Message to 'itemBias__0_' from GetItems factor
				this.itemBias__0__B = GetItemsOp<double>.ArrayAverageConditional<Gaussian,DistributionStructArray<Gaussian,double>>(this.itemBias__0__itemitemData_index13__B, this.ItemData, this.itemBias__0__B);
				// Message to 'userThresholds__0_' from GetItems factor
				this.userThresholds__0__B = GetItemsOp<double[]>.ArrayAverageConditional<DistributionStructArray<Gaussian,double>,DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userThresholds__0__itemuserData_index13__B, this.UserData, this.userThresholds__0__B);
				for(int index13 = 0; index13<this.Vint26; index13++) {
					for(int index12 = 0; index12<2; index12++) {
						// Message to 'vdouble__64' from Product factor
						this.vdouble__64_F[index13][index12] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits__0__itemuserData_index13__F[index13][index12], this.itemTraits__0__itemitemData_index13__F[index13][index12], this.userTraits__0__itemuserData_index13__B[index13][index12], this.itemTraits__0__itemitemData_index13__B[index13][index12]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[8] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_index13__B, this.userTraits__0__F, this.UserData, this.userTraits__0__itemuserData_index13__F));
			evidence_selector_cases_0_uses_B[10] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[10] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_index13__B, this.itemTraits__0__F, this.ItemData, this.itemTraits__0__itemitemData_index13__F));
			evidence_selector_cases_0_uses_B[11] = Bernoulli.Uniform();
			Bernoulli[] evidence_selector_cases_0_rep6_B;
			// Create array for 'evidence_selector_cases_0_rep6' Backwards messages.
			evidence_selector_cases_0_rep6_B = new Bernoulli[this.Vint26];
			// Create array for replicates of 'evidence_selector_cases_0_rep6_rep_B'
			Bernoulli[][] evidence_selector_cases_0_rep6_rep_B = new Bernoulli[this.Vint26][];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'evidence_selector_cases_0_rep6_rep' Backwards messages.
				evidence_selector_cases_0_rep6_rep_B[index13] = new Bernoulli[2];
				for(int index12 = 0; index12<2; index12++) {
					evidence_selector_cases_0_rep6_rep_B[index13][index12] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep6_rep' from Product factor
					evidence_selector_cases_0_rep6_rep_B[index13][index12] = Bernoulli.FromLogOdds(GaussianProductOp_SHG09.LogEvidenceRatio(vdouble__64_B[index13][index12], this.userTraits__0__itemuserData_index13__F[index13][index12], this.itemTraits__0__itemitemData_index13__F[index13][index12], this.userTraits__0__itemuserData_index13__B[index13][index12], this.itemTraits__0__itemitemData_index13__B[index13][index12], this.vdouble__64_F[index13][index12]));
				}
				evidence_selector_cases_0_rep6_B[index13] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep6' from Replicate factor
				evidence_selector_cases_0_rep6_B[index13] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep6_rep_B[index13], evidence_selector_cases_0_rep6_B[index13]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[11] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep6_B, evidence_selector_cases_0_uses_B[11]);
			evidence_selector_cases_0_uses_B[27] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[26] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[25] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[18] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[18] = Bernoulli.FromLogOdds(GetItemsOp<double>.LogEvidenceRatio<Gaussian>(this.userBias__0__itemuserData_index13__B, this.VGaussian__18, this.UserData, userBias__0__itemuserData_index13__F));
			evidence_selector_cases_0_uses_B[20] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[20] = Bernoulli.FromLogOdds(GetItemsOp<double>.LogEvidenceRatio<Gaussian>(this.itemBias__0__itemitemData_index13__B, this.VGaussian__19, this.ItemData, itemBias__0__itemitemData_index13__F));
			evidence_selector_cases_0_uses_B[24] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[23] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[22] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[21] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[16] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[14] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[12] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[6] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[33] = Bernoulli.Uniform();
			// Message to 'evidence_selector_cases_0_uses' from GetItems factor
			evidence_selector_cases_0_uses_B[33] = Bernoulli.FromLogOdds(GetItemsOp<double[]>.LogEvidenceRatio<DistributionStructArray<Gaussian,double>>(this.userThresholds__0__itemuserData_index13__B, userThresholds__0__F, this.UserData, userThresholds__0__itemuserData_index13__F));
			evidence_selector_cases_0_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[0] = Bernoulli.Uniform();
			evidence_selector_cases_0_uses_B[37] = Bernoulli.Uniform();
			Bernoulli[][] evidence_selector_cases_0_rep23_uses_B;
			// Create array for 'evidence_selector_cases_0_rep23_uses' Backwards messages.
			evidence_selector_cases_0_rep23_uses_B = new Bernoulli[this.Vint26][];
			Bernoulli[] evidence_selector_cases_0_rep23_B;
			// Create array for 'evidence_selector_cases_0_rep23' Backwards messages.
			evidence_selector_cases_0_rep23_B = new Bernoulli[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'evidence_selector_cases_0_rep23_uses' Backwards messages.
				evidence_selector_cases_0_rep23_uses_B[index13] = new Bernoulli[2];
				evidence_selector_cases_0_rep23_uses_B[index13][0] = Bernoulli.Uniform();
				evidence_selector_cases_0_rep23_uses_B[index13][1] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23_uses' from Replicate factor
				evidence_selector_cases_0_rep23_uses_B[index13][1] = Bernoulli.FromLogOdds(ReplicateOp.LogEvidenceRatio<Gaussian>(this.vdouble114_rep_B[index13], this.vdouble114_F[index13], vdouble114_rep_F[index13]));
				evidence_selector_cases_0_rep23_B[index13] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep23' from Replicate factor
				evidence_selector_cases_0_rep23_B[index13] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_uses_B[index13], evidence_selector_cases_0_rep23_B[index13]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[37] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep23_B, evidence_selector_cases_0_uses_B[37]);
			evidence_selector_cases_0_uses_B[38] = Bernoulli.Uniform();
			// Create array for replicates of 'evidence_selector_cases_0_rep24_rep_B'
			Bernoulli[][] evidence_selector_cases_0_rep24_rep_B = new Bernoulli[this.Vint26][];
			Bernoulli[] evidence_selector_cases_0_rep24_B;
			// Create array for 'evidence_selector_cases_0_rep24' Backwards messages.
			evidence_selector_cases_0_rep24_B = new Bernoulli[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'evidence_selector_cases_0_rep24_rep' Backwards messages.
				evidence_selector_cases_0_rep24_rep_B[index13] = new Bernoulli[2];
				for(int index14 = 0; index14<2; index14++) {
					evidence_selector_cases_0_rep24_rep_B[index13][index14] = Bernoulli.Uniform();
					// Message to 'evidence_selector_cases_0_rep24_rep' from IsPositive factor
					evidence_selector_cases_0_rep24_rep_B[index13][index14] = Bernoulli.FromLogOdds(IsPositiveOp.LogEvidenceRatio(this.RatingData[index13][index14], vdouble__71_F[index13][index14]));
				}
				evidence_selector_cases_0_rep24_B[index13] = Bernoulli.Uniform();
				// Message to 'evidence_selector_cases_0_rep24' from Replicate factor
				evidence_selector_cases_0_rep24_B[index13] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_rep_B[index13], evidence_selector_cases_0_rep24_B[index13]);
			}
			// Message to 'evidence_selector_cases_0_uses' from Replicate factor
			evidence_selector_cases_0_uses_B[38] = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_rep24_B, evidence_selector_cases_0_uses_B[38]);
			// Message to 'evidence_selector_cases_0' from Replicate factor
			evidence_selector_cases_0_B = ReplicateOp_NoDivide.DefAverageConditional<Bernoulli>(evidence_selector_cases_0_uses_B, evidence_selector_cases_0_B);
			// Message to 'evidence_selector_cases' from Copy factor
			evidence_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(evidence_selector_cases_B[0], evidence_selector_cases_0_B);
			// Message to 'evidence_selector_uses' from Cases factor
			evidence_selector_uses_B[0] = CasesOp.BAverageConditional(evidence_selector_cases_B);
			evidence_selector_uses_B[5] = Bernoulli.Uniform();
			evidence_selector_uses_B[4] = Bernoulli.Uniform();
			evidence_selector_uses_B[3] = Bernoulli.Uniform();
			evidence_selector_uses_B[2] = Bernoulli.Uniform();
			evidence_selector_uses_B[1] = Bernoulli.Uniform();
			evidence_selector_uses_B_toDef = ReplicateOp_Divide.ToDef<Bernoulli>(evidence_selector_uses_B, evidence_selector_uses_B_toDef);
			evidence_selector_uses_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_uses_B_toDef, vBernoulli1, evidence_selector_uses_F_marginal);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[1] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_B_toDef, evidence_selector_uses_F_marginal, 1, evidence_selector_uses_F[1]);
			evidence_selector_rep_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep_B_toDef, evidence_selector_uses_F[1], evidence_selector_rep_F_marginal);
			// Create array for replicates of 'evidence_selector_rep_rep_F'
			Bernoulli[][] evidence_selector_rep_rep_F = new Bernoulli[200][];
			Gaussian[][][] userTraits__B;
			// Create array for 'userTraits_' Backwards messages.
			userTraits__B = new Gaussian[200][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userTraits_use_B;
			// Create array for 'userTraits_use' Backwards messages.
			userTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli evidence_selector_rep_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep_rep_B_reduced = Bernoulli.Uniform();
			for(int index10 = 0; index10<200; index10++) {
				// Create array for 'userTraits_marginal' Forwards messages.
				this.userTraits_marginal_F[index10] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'userTraits_use' Backwards messages.
				userTraits_use_B[index10] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'evidence_selector_rep_rep' Forwards messages.
				evidence_selector_rep_rep_F[index10] = new Bernoulli[2];
				// Create array for 'userTraits_' Backwards messages.
				userTraits__B[index10] = new Gaussian[2][];
				evidence_selector_rep_F[index10] = Bernoulli.Uniform();
				evidence_selector_rep_rep_F_marginal[index10] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep_F[index10]);
				evidence_selector_rep_rep_B_toDef[index10] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep_F[index10]);
				// Message to 'evidence_selector_rep' from Replicate factor
				evidence_selector_rep_F[index10] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_rep_B_toDef[index10], evidence_selector_rep_F_marginal, index10, evidence_selector_rep_F[index10]);
				evidence_selector_rep_rep_F_marginal[index10] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep_rep_B_toDef[index10], evidence_selector_rep_F[index10], evidence_selector_rep_rep_F_marginal[index10]);
				for(int index12 = 0; index12<2; index12++) {
					this.userTraits_marginal_F[index10][index12] = Gaussian.Uniform();
					userTraits_use_B[index10][index12] = Gaussian.Uniform();
					// Create array for 'userTraits_' Backwards messages.
					userTraits__B[index10][index12] = new Gaussian[1];
					for(int _gateind = 0; _gateind<1; _gateind++) {
						userTraits__B[index10][index12][_gateind] = Gaussian.Uniform();
					}
					evidence_selector_rep_rep_F[index10][index12] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep_rep' from Replicate factor
					evidence_selector_rep_rep_F[index10][index12] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep_rep_B_reduced, evidence_selector_rep_rep_F_marginal[index10], index12, evidence_selector_rep_rep_F[index10][index12]);
					// Message to 'userTraits_' from Copy factor
					userTraits__B[index10][index12][0] = ArrayHelper.SetTo<Gaussian>(userTraits__B[index10][index12][0], this.userTraits__0__B[index10][index12]);
					// Message to 'userTraits_use' from EnterPartial factor
					userTraits_use_B[index10][index12] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userTraits__B[index10][index12], evidence_selector_rep_rep_F[index10][index12], this.VGaussian____6[index10][index12], new int[1] {0}, userTraits_use_B[index10][index12]);
					// Message to 'userTraits_marginal' from Variable factor
					this.userTraits_marginal_F[index10][index12] = VariableOp.MarginalAverageConditional<Gaussian>(userTraits_use_B[index10][index12], this.VGaussian____6[index10][index12], this.userTraits_marginal_F[index10][index12]);
				}
			}
			// Create array for 'itemTraits_marginal' Forwards messages.
			this.itemTraits_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli[] evidence_selector_rep2_F;
			// Create array for 'evidence_selector_rep2' Forwards messages.
			evidence_selector_rep2_F = new Bernoulli[200];
			Gaussian[][][] itemTraits__B;
			// Create array for 'itemTraits_' Backwards messages.
			itemTraits__B = new Gaussian[200][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> itemTraits_use_B;
			// Create array for 'itemTraits_use' Backwards messages.
			itemTraits_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			// Create array for replicates of 'evidence_selector_rep2_rep_F_marginal'
			Bernoulli[] evidence_selector_rep2_rep_F_marginal = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep2_rep_B_toDef'
			Bernoulli[] evidence_selector_rep2_rep_B_toDef = new Bernoulli[200];
			Bernoulli evidence_selector_rep2_F_marginal;
			evidence_selector_uses_F[2] = Bernoulli.Uniform();
			evidence_selector_rep2_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[2]);
			Bernoulli evidence_selector_rep2_B_toDef;
			evidence_selector_rep2_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[2]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[2] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_B_toDef, evidence_selector_uses_F_marginal, 2, evidence_selector_uses_F[2]);
			evidence_selector_rep2_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep2_B_toDef, evidence_selector_uses_F[2], evidence_selector_rep2_F_marginal);
			// Create array for replicates of 'evidence_selector_rep2_rep_F'
			Bernoulli[][] evidence_selector_rep2_rep_F = new Bernoulli[200][];
			Bernoulli evidence_selector_rep2_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep2_rep_B_reduced = Bernoulli.Uniform();
			for(int index11 = 0; index11<200; index11++) {
				// Create array for 'itemTraits_marginal' Forwards messages.
				this.itemTraits_marginal_F[index11] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'itemTraits_use' Backwards messages.
				itemTraits_use_B[index11] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'itemTraits_' Backwards messages.
				itemTraits__B[index11] = new Gaussian[2][];
				// Create array for 'evidence_selector_rep2_rep' Forwards messages.
				evidence_selector_rep2_rep_F[index11] = new Bernoulli[2];
				evidence_selector_rep2_F[index11] = Bernoulli.Uniform();
				evidence_selector_rep2_rep_F_marginal[index11] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep2_F[index11]);
				evidence_selector_rep2_rep_B_toDef[index11] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep2_F[index11]);
				// Message to 'evidence_selector_rep2' from Replicate factor
				evidence_selector_rep2_F[index11] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_rep_B_toDef[index11], evidence_selector_rep2_F_marginal, index11, evidence_selector_rep2_F[index11]);
				evidence_selector_rep2_rep_F_marginal[index11] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep2_rep_B_toDef[index11], evidence_selector_rep2_F[index11], evidence_selector_rep2_rep_F_marginal[index11]);
			}
			for(int index12 = 0; index12<2; index12++) {
				for(int index11 = 0; index11<200; index11++) {
					this.itemTraits_marginal_F[index11][index12] = Gaussian.Uniform();
					itemTraits_use_B[index11][index12] = Gaussian.Uniform();
					// Create array for 'itemTraits_' Backwards messages.
					itemTraits__B[index11][index12] = new Gaussian[1];
					for(int _gateind2 = 0; _gateind2<1; _gateind2++) {
						itemTraits__B[index11][index12][_gateind2] = Gaussian.Uniform();
					}
					evidence_selector_rep2_rep_F[index11][index12] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep2_rep' from Replicate factor
					evidence_selector_rep2_rep_F[index11][index12] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep2_rep_B_reduced, evidence_selector_rep2_rep_F_marginal[index11], index12, evidence_selector_rep2_rep_F[index11][index12]);
					// Message to 'itemTraits_' from Copy factor
					itemTraits__B[index11][index12][0] = ArrayHelper.SetTo<Gaussian>(itemTraits__B[index11][index12][0], this.itemTraits__0__B[index11][index12]);
					// Message to 'itemTraits_use' from EnterPartial factor
					itemTraits_use_B[index11][index12] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(itemTraits__B[index11][index12], evidence_selector_rep2_rep_F[index11][index12], this.VGaussian____7[index11][index12], new int[1] {0}, itemTraits_use_B[index11][index12]);
					// Message to 'itemTraits_marginal' from Variable factor
					this.itemTraits_marginal_F[index11][index12] = VariableOp.MarginalAverageConditional<Gaussian>(itemTraits_use_B[index11][index12], this.VGaussian____7[index11][index12], this.itemTraits_marginal_F[index11][index12]);
				}
			}
			// Create array for 'userBias_marginal' Forwards messages.
			this.userBias_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			Bernoulli[] evidence_selector_rep3_F;
			// Create array for 'evidence_selector_rep3' Forwards messages.
			evidence_selector_rep3_F = new Bernoulli[200];
			Gaussian[][] userBias__B;
			// Create array for 'userBias_' Backwards messages.
			userBias__B = new Gaussian[200][];
			Bernoulli evidence_selector_rep3_B_reduced;
			evidence_selector_rep3_B_reduced = Bernoulli.Uniform();
			Bernoulli evidence_selector_rep3_F_marginal;
			evidence_selector_uses_F[3] = Bernoulli.Uniform();
			evidence_selector_rep3_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[3]);
			Bernoulli evidence_selector_rep3_B_toDef;
			evidence_selector_rep3_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[3]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[3] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep3_B_toDef, evidence_selector_uses_F_marginal, 3, evidence_selector_uses_F[3]);
			evidence_selector_rep3_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep3_B_toDef, evidence_selector_uses_F[3], evidence_selector_rep3_F_marginal);
			DistributionStructArray<Gaussian,double> userBias_use_B;
			// Create array for 'userBias_use' Backwards messages.
			userBias_use_B = new DistributionStructArray<Gaussian,double>(200);
			for(int index10 = 0; index10<200; index10++) {
				this.userBias_marginal_F[index10] = Gaussian.Uniform();
				userBias_use_B[index10] = Gaussian.Uniform();
				// Create array for 'userBias_' Backwards messages.
				userBias__B[index10] = new Gaussian[1];
				for(int _gateind3 = 0; _gateind3<1; _gateind3++) {
					userBias__B[index10][_gateind3] = Gaussian.Uniform();
				}
				evidence_selector_rep3_F[index10] = Bernoulli.Uniform();
				// Message to 'evidence_selector_rep3' from Replicate factor
				evidence_selector_rep3_F[index10] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep3_B_reduced, evidence_selector_rep3_F_marginal, index10, evidence_selector_rep3_F[index10]);
				// Message to 'userBias_' from Copy factor
				userBias__B[index10][0] = ArrayHelper.SetTo<Gaussian>(userBias__B[index10][0], this.userBias__0__B[index10]);
				// Message to 'userBias_use' from EnterPartial factor
				userBias_use_B[index10] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userBias__B[index10], evidence_selector_rep3_F[index10], this.VGaussian__18[index10], new int[1] {0}, userBias_use_B[index10]);
				// Message to 'userBias_marginal' from Variable factor
				this.userBias_marginal_F[index10] = VariableOp.MarginalAverageConditional<Gaussian>(userBias_use_B[index10], this.VGaussian__18[index10], this.userBias_marginal_F[index10]);
			}
			// Create array for 'itemBias_marginal' Forwards messages.
			this.itemBias_marginal_F = new DistributionStructArray<Gaussian,double>(200);
			Gaussian[][] itemBias__B;
			// Create array for 'itemBias_' Backwards messages.
			itemBias__B = new Gaussian[200][];
			DistributionStructArray<Gaussian,double> itemBias_use_B;
			// Create array for 'itemBias_use' Backwards messages.
			itemBias_use_B = new DistributionStructArray<Gaussian,double>(200);
			Bernoulli[] evidence_selector_rep4_F;
			// Create array for 'evidence_selector_rep4' Forwards messages.
			evidence_selector_rep4_F = new Bernoulli[200];
			Bernoulli evidence_selector_rep4_B_reduced;
			evidence_selector_rep4_B_reduced = Bernoulli.Uniform();
			Bernoulli evidence_selector_rep4_F_marginal;
			evidence_selector_uses_F[4] = Bernoulli.Uniform();
			evidence_selector_rep4_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[4]);
			Bernoulli evidence_selector_rep4_B_toDef;
			evidence_selector_rep4_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[4]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[4] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep4_B_toDef, evidence_selector_uses_F_marginal, 4, evidence_selector_uses_F[4]);
			evidence_selector_rep4_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep4_B_toDef, evidence_selector_uses_F[4], evidence_selector_rep4_F_marginal);
			for(int index11 = 0; index11<200; index11++) {
				this.itemBias_marginal_F[index11] = Gaussian.Uniform();
				itemBias_use_B[index11] = Gaussian.Uniform();
				// Create array for 'itemBias_' Backwards messages.
				itemBias__B[index11] = new Gaussian[1];
				for(int _gateind4 = 0; _gateind4<1; _gateind4++) {
					itemBias__B[index11][_gateind4] = Gaussian.Uniform();
				}
				evidence_selector_rep4_F[index11] = Bernoulli.Uniform();
				// Message to 'evidence_selector_rep4' from Replicate factor
				evidence_selector_rep4_F[index11] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep4_B_reduced, evidence_selector_rep4_F_marginal, index11, evidence_selector_rep4_F[index11]);
				// Message to 'itemBias_' from Copy factor
				itemBias__B[index11][0] = ArrayHelper.SetTo<Gaussian>(itemBias__B[index11][0], this.itemBias__0__B[index11]);
				// Message to 'itemBias_use' from EnterPartial factor
				itemBias_use_B[index11] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(itemBias__B[index11], evidence_selector_rep4_F[index11], this.VGaussian__19[index11], new int[1] {0}, itemBias_use_B[index11]);
				// Message to 'itemBias_marginal' from Variable factor
				this.itemBias_marginal_F[index11] = VariableOp.MarginalAverageConditional<Gaussian>(itemBias_use_B[index11], this.VGaussian__19[index11], this.itemBias_marginal_F[index11]);
			}
			// Create array for 'userThresholds_marginal' Forwards messages.
			this.userThresholds_marginal_F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Gaussian[][][] userThresholds__B;
			// Create array for 'userThresholds_' Backwards messages.
			userThresholds__B = new Gaussian[200][][];
			DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> userThresholds_use_B;
			// Create array for 'userThresholds_use' Backwards messages.
			userThresholds_use_B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			Bernoulli[] evidence_selector_rep5_F;
			// Create array for 'evidence_selector_rep5' Forwards messages.
			evidence_selector_rep5_F = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep5_rep_F_marginal'
			Bernoulli[] evidence_selector_rep5_rep_F_marginal = new Bernoulli[200];
			// Create array for replicates of 'evidence_selector_rep5_rep_B_toDef'
			Bernoulli[] evidence_selector_rep5_rep_B_toDef = new Bernoulli[200];
			Bernoulli evidence_selector_rep5_F_marginal;
			evidence_selector_uses_F[5] = Bernoulli.Uniform();
			evidence_selector_rep5_F_marginal = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_uses_F[5]);
			Bernoulli evidence_selector_rep5_B_toDef;
			evidence_selector_rep5_B_toDef = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_uses_F[5]);
			// Message to 'evidence_selector_uses' from Replicate factor
			evidence_selector_uses_F[5] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_B_toDef, evidence_selector_uses_F_marginal, 5, evidence_selector_uses_F[5]);
			evidence_selector_rep5_F_marginal = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep5_B_toDef, evidence_selector_uses_F[5], evidence_selector_rep5_F_marginal);
			// Create array for replicates of 'evidence_selector_rep5_rep_F'
			Bernoulli[][] evidence_selector_rep5_rep_F = new Bernoulli[200][];
			Bernoulli evidence_selector_rep5_rep_B_reduced = default(Bernoulli);
			evidence_selector_rep5_rep_B_reduced = Bernoulli.Uniform();
			for(int index10 = 0; index10<200; index10++) {
				// Create array for 'userThresholds_marginal' Forwards messages.
				this.userThresholds_marginal_F[index10] = new DistributionStructArray<Gaussian,double>(2);
				// Create array for 'evidence_selector_rep5_rep' Forwards messages.
				evidence_selector_rep5_rep_F[index10] = new Bernoulli[2];
				// Create array for 'userThresholds_' Backwards messages.
				userThresholds__B[index10] = new Gaussian[2][];
				evidence_selector_rep5_F[index10] = Bernoulli.Uniform();
				evidence_selector_rep5_rep_F_marginal[index10] = ReplicateOp_Divide.MarginalInit<Bernoulli>(evidence_selector_rep5_F[index10]);
				evidence_selector_rep5_rep_B_toDef[index10] = ReplicateOp_Divide.ToDefInit<Bernoulli>(evidence_selector_rep5_F[index10]);
				// Message to 'evidence_selector_rep5' from Replicate factor
				evidence_selector_rep5_F[index10] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_rep_B_toDef[index10], evidence_selector_rep5_F_marginal, index10, evidence_selector_rep5_F[index10]);
				evidence_selector_rep5_rep_F_marginal[index10] = ReplicateOp_Divide.Marginal<Bernoulli>(evidence_selector_rep5_rep_B_toDef[index10], evidence_selector_rep5_F[index10], evidence_selector_rep5_rep_F_marginal[index10]);
				// Create array for 'userThresholds_use' Backwards messages.
				userThresholds_use_B[index10] = new DistributionStructArray<Gaussian,double>(2);
				for(int index14 = 0; index14<2; index14++) {
					this.userThresholds_marginal_F[index10][index14] = Gaussian.Uniform();
					userThresholds_use_B[index10][index14] = Gaussian.Uniform();
					// Create array for 'userThresholds_' Backwards messages.
					userThresholds__B[index10][index14] = new Gaussian[1];
					for(int _gateind5 = 0; _gateind5<1; _gateind5++) {
						userThresholds__B[index10][index14][_gateind5] = Gaussian.Uniform();
					}
					evidence_selector_rep5_rep_F[index10][index14] = Bernoulli.Uniform();
					// Message to 'evidence_selector_rep5_rep' from Replicate factor
					evidence_selector_rep5_rep_F[index10][index14] = ReplicateOp_Divide.UsesAverageConditional<Bernoulli>(evidence_selector_rep5_rep_B_reduced, evidence_selector_rep5_rep_F_marginal[index10], index14, evidence_selector_rep5_rep_F[index10][index14]);
					// Message to 'userThresholds_' from Copy factor
					userThresholds__B[index10][index14][0] = ArrayHelper.SetTo<Gaussian>(userThresholds__B[index10][index14][0], this.userThresholds__0__B[index10][index14]);
					// Message to 'userThresholds_use' from EnterPartial factor
					userThresholds_use_B[index10][index14] = GateEnterPartialOp<double>.ValueAverageConditional<Gaussian>(userThresholds__B[index10][index14], evidence_selector_rep5_rep_F[index10][index14], this.VGaussian____8[index10][index14], new int[1] {0}, userThresholds_use_B[index10][index14]);
					// Message to 'userThresholds_marginal' from Variable factor
					this.userThresholds_marginal_F[index10][index14] = VariableOp.MarginalAverageConditional<Gaussian>(userThresholds_use_B[index10][index14], this.VGaussian____8[index10][index14], this.userThresholds_marginal_F[index10][index14]);
				}
			}
			this.evidence_marginal_F = Bernoulli.Uniform();
			// Message to 'evidence_marginal' from Variable factor
			this.evidence_marginal_F = VariableOp.MarginalAverageConditional<Bernoulli>(evidence_selector_uses_B_toDef, vBernoulli1, this.evidence_marginal_F);
			this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterationsDecreased and userData and vGaussian____6 and vGaussian____7 and vint26 and must reset on changes to ratingData and vGaussian____8 and vGaussian__18 and vGaussian__19</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11(bool initialise)
		{
			if (this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone&&((!initialise)||this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised)) {
				return ;
			}
			for(int index13 = 0; index13<this.Vint26; index13++) {
				for(int index12 = 0; index12<2; index12++) {
					// Message to 'vdouble__64' from Product factor
					this.vdouble__64_F[index13][index12] = GaussianProductOp_SHG09.ProductAverageConditional(this.userTraits__0__itemuserData_index13__F[index13][index12], this.itemTraits__0__itemitemData_index13__F[index13][index12], this.userTraits__0__itemuserData_index13__B[index13][index12], this.itemTraits__0__itemitemData_index13__B[index13][index12]);
				}
			}
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = true;
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of itemData and numberOfIterationsDecreased and vGaussian____7 and vint26 and must reset on changes to ratingData and userData and vGaussian____6 and vGaussian____8 and vGaussian__18 and vGaussian__19</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8(bool initialise)
		{
			if (this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone&&((!initialise)||this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised)) {
				return ;
			}
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Message to 'itemTraits__0__itemitemData_index13_' from GetItems factor
				this.itemTraits__0__itemitemData_index13__F[index13] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__itemitemData_index13__B[index13], this.itemTraits__0__F, this.itemTraits__0__F_marginal, this.ItemData, index13, this.itemTraits__0__itemitemData_index13__F[index13]);
			}
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone = true;
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and must reset on changes to itemData and ratingData and userData and vGaussian____6 and vGaussian____7 and vGaussian____8 and vGaussian__18 and vGaussian__19 and vint26</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised)) {
				return ;
			}
			this.itemTraits__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.itemTraits__0__F);
			for(int index12 = 0; index12<2; index12++) {
				for(int index11 = 0; index11<200; index11++) {
					this.itemTraits__0__B[index11][index12] = Gaussian.Uniform();
				}
			}
			this.userTraits__0__F_marginal = GetItemsOp<double[]>.MarginalInit<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>>(this.userTraits__0__F);
			for(int index10 = 0; index10<200; index10++) {
				for(int index12 = 0; index12<2; index12++) {
					this.userTraits__0__B[index10][index12] = Gaussian.Uniform();
				}
				this.userBias__0__B[index10] = Gaussian.Uniform();
			}
			for(int index11 = 0; index11<200; index11++) {
				this.itemBias__0__B[index11] = Gaussian.Uniform();
			}
			for(int index10 = 0; index10<200; index10++) {
				for(int index14 = 0; index14<2; index14++) {
					this.userThresholds__0__B[index10][index14] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isDone = true;
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and userData and vGaussian____6 and vint26 and must reset on changes to itemData and ratingData and vGaussian____7 and vGaussian____8 and vGaussian__18 and vGaussian__19</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised)) {
				return ;
			}
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Message to 'userTraits__0__itemuserData_index13_' from GetItems factor
				this.userTraits__0__itemuserData_index13__F[index13] = GetItemsOp<double[]>.ItemsAverageConditional<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__itemuserData_index13__B[index13], this.userTraits__0__F, this.userTraits__0__F_marginal, this.UserData, index13, this.userTraits__0__itemuserData_index13__F[index13]);
			}
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone = true;
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian____6 and must reset on changes to itemData and ratingData and userData and vGaussian____7 and vGaussian____8 and vGaussian__18 and vGaussian__19 and vint26</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised)) {
				return ;
			}
			this.userTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.userTraits__0__F, this.userTraits__0__B, this.userTraits__0__F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vGaussian____7 and must reset on changes to itemData and ratingData and userData and vGaussian____6 and vGaussian____8 and vGaussian__18 and vGaussian__19 and vint26</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised)) {
				return ;
			}
			this.itemTraits__0__F_marginal = GetItemsOp<double[]>.Marginal<DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>,DistributionStructArray<Gaussian,double>>(this.itemTraits__0__F, this.itemTraits__0__B, this.itemTraits__0__F_marginal);
			this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isDone = true;
			this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and vint26 and must reset on changes to itemData and ratingData and userData and vGaussian____6 and vGaussian____7 and vGaussian____8 and vGaussian__18 and vGaussian__19</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		private void Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6(bool initialise)
		{
			if (this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isDone&&((!initialise)||this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised)) {
				return ;
			}
			for(int index13 = 0; index13<this.Vint26; index13++) {
				for(int index12 = 0; index12<2; index12++) {
					this.itemTraits__0__itemitemData_index13__F[index13][index12] = Gaussian.Uniform();
					this.itemTraits__0__itemitemData_index13__B[index13][index12] = Gaussian.Uniform();
					this.vdouble__64_F[index13][index12] = Gaussian.Uniform();
					this.userTraits__0__itemuserData_index13__B[index13][index12] = Gaussian.Uniform();
					this.userTraits__0__itemuserData_index13__F[index13][index12] = Gaussian.Uniform();
				}
				this.userBias__0__itemuserData_index13__B[index13] = Gaussian.Uniform();
				this.itemBias__0__itemitemData_index13__B[index13] = Gaussian.Uniform();
				for(int index14 = 0; index14<2; index14++) {
					this.userThresholds__0__itemuserData_index13__B[index13][index14] = Gaussian.Uniform();
				}
				this.vdouble114_rep_B_toDef[index13] = ReplicateOp_Divide.ToDefInit<Gaussian>(this.vdouble114_F[index13]);
				for(int index14 = 0; index14<2; index14++) {
					this.vdouble114_rep_B[index13][index14] = Gaussian.Uniform();
				}
			}
			this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isDone = true;
			this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isInitialised = true;
		}

		/// <summary>Computations that depend on the observed value of ratingData and vint26</summary>
		private void Changed_ratingData_vint26()
		{
			if (this.Changed_ratingData_vint26_isDone) {
				return ;
			}
			// Create array for 'ratingData_marginal' Forwards messages.
			this.ratingData_marginal_F = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'ratingData_marginal' Forwards messages.
				this.ratingData_marginal_F[index13] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int index14 = 0; index14<2; index14++) {
					this.ratingData_marginal_F[index13][index14] = Bernoulli.Uniform();
				}
			}
			// Message to 'ratingData_marginal' from DerivedVariable factor
			this.ratingData_marginal_F = DerivedVariableOp.MarginalAverageConditional<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.RatingData, this.ratingData_marginal_F);
			this.Changed_ratingData_vint26_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of userData</summary>
		private void Changed_userData()
		{
			if (this.Changed_userData_isDone) {
				return ;
			}
			// Create array for 'userData_marginal' Forwards messages.
			this.userData_marginal_F = new PointMass<int[]>(this.UserData);
			// Message to 'userData_marginal' from DerivedVariable factor
			this.userData_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int[]>,int[]>(this.UserData, this.userData_marginal_F);
			this.Changed_userData_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____6</summary>
		private void Changed_vGaussian____6()
		{
			if (this.Changed_vGaussian____6_isDone) {
				return ;
			}
			for(int index10 = 0; index10<200; index10++) {
				for(int index12 = 0; index12<2; index12++) {
					// Message to 'userTraits__0_' from Copy factor
					this.userTraits__0__F[index10][index12] = ArrayHelper.SetTo<Gaussian>(this.userTraits__0__F[index10][index12], this.VGaussian____6[index10][index12]);
				}
			}
			// Create array for 'vGaussian____6_marginal' Forwards messages.
			this.vGaussian____6_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____6);
			// Message to 'vGaussian____6_marginal' from DerivedVariable factor
			this.vGaussian____6_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____6, this.vGaussian____6_marginal_F);
			this.Changed_vGaussian____6_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____7</summary>
		private void Changed_vGaussian____7()
		{
			if (this.Changed_vGaussian____7_isDone) {
				return ;
			}
			for(int index12 = 0; index12<2; index12++) {
				for(int index11 = 0; index11<200; index11++) {
					// Message to 'itemTraits__0_' from Copy factor
					this.itemTraits__0__F[index11][index12] = ArrayHelper.SetTo<Gaussian>(this.itemTraits__0__F[index11][index12], this.VGaussian____7[index11][index12]);
				}
			}
			// Create array for 'vGaussian____7_marginal' Forwards messages.
			this.vGaussian____7_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____7);
			// Message to 'vGaussian____7_marginal' from DerivedVariable factor
			this.vGaussian____7_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____7, this.vGaussian____7_marginal_F);
			this.Changed_vGaussian____7_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian____8</summary>
		private void Changed_vGaussian____8()
		{
			if (this.Changed_vGaussian____8_isDone) {
				return ;
			}
			// Create array for 'vGaussian____8_marginal' Forwards messages.
			this.vGaussian____8_marginal_F = new PointMass<Gaussian[][]>(this.VGaussian____8);
			// Message to 'vGaussian____8_marginal' from DerivedVariable factor
			this.vGaussian____8_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[][]>,Gaussian[][]>(this.VGaussian____8, this.vGaussian____8_marginal_F);
			this.Changed_vGaussian____8_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__18</summary>
		private void Changed_vGaussian__18()
		{
			if (this.Changed_vGaussian__18_isDone) {
				return ;
			}
			// Create array for 'vGaussian__18_marginal' Forwards messages.
			this.vGaussian__18_marginal_F = new PointMass<Gaussian[]>(this.VGaussian__18);
			// Message to 'vGaussian__18_marginal' from DerivedVariable factor
			this.vGaussian__18_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.VGaussian__18, this.vGaussian__18_marginal_F);
			this.Changed_vGaussian__18_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vGaussian__19</summary>
		private void Changed_vGaussian__19()
		{
			if (this.Changed_vGaussian__19_isDone) {
				return ;
			}
			// Create array for 'vGaussian__19_marginal' Forwards messages.
			this.vGaussian__19_marginal_F = new PointMass<Gaussian[]>(this.VGaussian__19);
			// Message to 'vGaussian__19_marginal' from DerivedVariable factor
			this.vGaussian__19_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<Gaussian[]>,Gaussian[]>(this.VGaussian__19, this.vGaussian__19_marginal_F);
			this.Changed_vGaussian__19_isDone = true;
		}

		/// <summary>Computations that depend on the observed value of vint26</summary>
		private void Changed_vint26()
		{
			if (this.Changed_vint26_isDone) {
				return ;
			}
			// Create array for 'itemTraits__0__itemitemData_index13_' Forwards messages.
			this.itemTraits__0__itemitemData_index13__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'itemTraits__0__itemitemData_index13_' Forwards messages.
				this.itemTraits__0__itemitemData_index13__F[index13] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'itemTraits__0__itemitemData_index13_' Backwards messages.
			this.itemTraits__0__itemitemData_index13__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'itemTraits__0__itemitemData_index13_' Backwards messages.
				this.itemTraits__0__itemitemData_index13__B[index13] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'vdouble__64_F'
			this.vdouble__64_F = new DistributionStructArray<Gaussian,double>[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble__64' Forwards messages.
				this.vdouble__64_F[index13] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0__itemuserData_index13_' Backwards messages.
			this.userTraits__0__itemuserData_index13__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'userTraits__0__itemuserData_index13_' Backwards messages.
				this.userTraits__0__itemuserData_index13__B[index13] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0__itemuserData_index13_' Forwards messages.
			this.userTraits__0__itemuserData_index13__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'userTraits__0__itemuserData_index13_' Forwards messages.
				this.userTraits__0__itemuserData_index13__F[index13] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userBias__0__itemuserData_index13_' Backwards messages.
			this.userBias__0__itemuserData_index13__B = new DistributionStructArray<Gaussian,double>(this.Vint26);
			// Create array for 'itemBias__0__itemitemData_index13_' Backwards messages.
			this.itemBias__0__itemitemData_index13__B = new DistributionStructArray<Gaussian,double>(this.Vint26);
			// Create array for 'userThresholds__0__itemuserData_index13_' Backwards messages.
			this.userThresholds__0__itemuserData_index13__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(this.Vint26);
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'userThresholds__0__itemuserData_index13_' Backwards messages.
				this.userThresholds__0__itemuserData_index13__B[index13] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for replicates of 'vdouble114_F'
			this.vdouble114_F = new Gaussian[this.Vint26];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				this.vdouble114_F[index13] = Gaussian.Uniform();
			}
			// Create array for replicates of 'vdouble114_rep_B_toDef'
			this.vdouble114_rep_B_toDef = new Gaussian[this.Vint26];
			// Create array for replicates of 'vdouble114_rep_B'
			this.vdouble114_rep_B = new Gaussian[this.Vint26][];
			for(int index13 = 0; index13<this.Vint26; index13++) {
				// Create array for 'vdouble114_rep' Backwards messages.
				this.vdouble114_rep_B[index13] = new Gaussian[2];
			}
			this.vint26_marginal_F = new PointMass<int>(this.Vint26);
			// Message to 'vint26_marginal' from DerivedVariable factor
			this.vint26_marginal_F = DerivedVariableOp.MarginalAverageConditional<PointMass<int>,int>(this.Vint26, this.vint26_marginal_F);
			this.Changed_vint26_isDone = true;
		}

		/// <summary>Computations that do not depend on observed values</summary>
		private void Constant()
		{
			if (this.Constant_isDone) {
				return ;
			}
			// Create array for 'userTraits__0_' Forwards messages.
			this.userTraits__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int index10 = 0; index10<200; index10++) {
				// Create array for 'userTraits__0_' Forwards messages.
				this.userTraits__0__F[index10] = new DistributionStructArray<Gaussian,double>(2);
				for(int index12 = 0; index12<2; index12++) {
					this.userTraits__0__F[index10][index12] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits__0_' Forwards messages.
			this.itemTraits__0__F = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int index11 = 0; index11<200; index11++) {
				// Create array for 'itemTraits__0_' Forwards messages.
				this.itemTraits__0__F[index11] = new DistributionStructArray<Gaussian,double>(2);
			}
			for(int index12 = 0; index12<2; index12++) {
				for(int index11 = 0; index11<200; index11++) {
					this.itemTraits__0__F[index11][index12] = Gaussian.Uniform();
				}
			}
			// Create array for 'itemTraits__0_' Backwards messages.
			this.itemTraits__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int index11 = 0; index11<200; index11++) {
				// Create array for 'itemTraits__0_' Backwards messages.
				this.itemTraits__0__B[index11] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userTraits__0_' Backwards messages.
			this.userTraits__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int index10 = 0; index10<200; index10++) {
				// Create array for 'userTraits__0_' Backwards messages.
				this.userTraits__0__B[index10] = new DistributionStructArray<Gaussian,double>(2);
			}
			// Create array for 'userBias__0_' Backwards messages.
			this.userBias__0__B = new DistributionStructArray<Gaussian,double>(200);
			// Create array for 'itemBias__0_' Backwards messages.
			this.itemBias__0__B = new DistributionStructArray<Gaussian,double>(200);
			// Create array for 'userThresholds__0_' Backwards messages.
			this.userThresholds__0__B = new DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]>(200);
			for(int index10 = 0; index10<200; index10++) {
				// Create array for 'userThresholds__0_' Backwards messages.
				this.userThresholds__0__B[index10] = new DistributionStructArray<Gaussian,double>(2);
			}
			this.Constant_isDone = true;
		}

		/// <summary>
		/// Returns the marginal distribution for 'evidence' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli EvidenceMarginal()
		{
			return this.evidence_marginal_F;
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations!=this.numberOfIterationsDone) {
				if (numberOfIterations<this.numberOfIterationsDone) {
					this.numberOfIterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6_isDone = false;
					this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8_isDone = false;
					this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9_isDone = false;
					this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10_isDone = false;
					this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11_isDone = false;
				}
				this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80_isDone = false;
			}
			this.Changed_ratingData_vint26();
			this.Changed_itemData();
			this.Changed_userData();
			this.Changed_vGaussian____8();
			this.Changed_vGaussian__19();
			this.Changed_vGaussian__18();
			this.Constant();
			this.Changed_vint26();
			this.Changed_numberOfIterationsDecreased_vint26_Init_itemData_ratingData_userData_vGaussian____6_vGaussia6(initialise);
			this.Changed_vGaussian____7();
			this.Changed_numberOfIterationsDecreased_Init_itemData_ratingData_userData_vGaussian____6_vGaussian____7_3(initialise);
			this.Changed_numberOfIterationsDecreased_vGaussian____7_Init_itemData_ratingData_userData_vGaussian____6_7(initialise);
			this.Changed_itemData_numberOfIterationsDecreased_vGaussian____7_vint26_Init_ratingData_userData_vGaussia8(initialise);
			this.Changed_vGaussian____6();
			this.Changed_numberOfIterationsDecreased_vGaussian____6_Init_itemData_ratingData_userData_vGaussian____7_9(initialise);
			this.Changed_numberOfIterationsDecreased_userData_vGaussian____6_vint26_Init_itemData_ratingData_vGaussia10(initialise);
			this.Changed_itemData_numberOfIterationsDecreased_userData_vGaussian____6_vGaussian____7_vint26_Init_rati11(initialise);
			this.Changed_itemData_numberOfIterations_ratingData_userData_vGaussian____6_vGaussian____7_vGaussian____80(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		/// <summary>Update all marginals, by iterating message-passing the given number of times</summary>
		/// <param name="numberOfIterations">The total number of iterations that should be executed for the current set of observed values.  If this is more than the number already done, only the extra iterations are done.  If this is less than the number already done, message-passing is restarted from the beginning.  Changing the observed values resets the iteration count to 0.</param>
		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="vint26") {
				return this.vint26;
			}
			if (variableName=="vGaussian____6") {
				return this.vGaussian____6;
			}
			if (variableName=="vGaussian____7") {
				return this.vGaussian____7;
			}
			if (variableName=="vGaussian__18") {
				return this.vGaussian__18;
			}
			if (variableName=="vGaussian__19") {
				return this.vGaussian__19;
			}
			if (variableName=="vGaussian____8") {
				return this.vGaussian____8;
			}
			if (variableName=="userData") {
				return this.userData;
			}
			if (variableName=="itemData") {
				return this.itemData;
			}
			if (variableName=="ratingData") {
				return this.ratingData;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> ItemBiasMarginal()
		{
			return this.itemBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> ItemDataMarginal()
		{
			return this.itemData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'itemTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> ItemTraitsMarginal()
		{
			return this.itemTraits_marginal_F;
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName)
		{
			if (variableName=="ratingData") {
				return this.RatingDataMarginal();
			}
			if (variableName=="itemData") {
				return this.ItemDataMarginal();
			}
			if (variableName=="userData") {
				return this.UserDataMarginal();
			}
			if (variableName=="vGaussian____8") {
				return this.VGaussian____8Marginal();
			}
			if (variableName=="vGaussian__19") {
				return this.VGaussian__19Marginal();
			}
			if (variableName=="vGaussian__18") {
				return this.VGaussian__18Marginal();
			}
			if (variableName=="vint26") {
				return this.Vint26Marginal();
			}
			if (variableName=="vGaussian____7") {
				return this.VGaussian____7Marginal();
			}
			if (variableName=="vGaussian____6") {
				return this.VGaussian____6Marginal();
			}
			if (variableName=="userTraits") {
				return this.UserTraitsMarginal();
			}
			if (variableName=="itemTraits") {
				return this.ItemTraitsMarginal();
			}
			if (variableName=="userBias") {
				return this.UserBiasMarginal();
			}
			if (variableName=="itemBias") {
				return this.ItemBiasMarginal();
			}
			if (variableName=="userThresholds") {
				return this.UserThresholdsMarginal();
			}
			if (variableName=="evidence") {
				return this.EvidenceMarginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		/// <summary>Get the marginal distribution (computed up to this point) of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <returns>The marginal distribution computed up to this point</returns>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>Get the query-specific marginal distribution of a variable.</summary>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		/// <summary>Get the query-specific marginal distribution of a variable, converted to type T</summary>
		/// <typeparam name="T">The distribution type.</typeparam>
		/// <param name="variableName">Name of the variable in the generated code</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		/// <remarks>Execute, Update, or Reset must be called first to set the value of the marginal.</remarks>
		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>
		/// Returns the marginal distribution for 'ratingData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> RatingDataMarginal()
		{
			return this.ratingData_marginal_F;
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="vint26") {
				this.vint26 = (int)value;
				return ;
			}
			if (variableName=="vGaussian____6") {
				this.vGaussian____6 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="vGaussian____7") {
				this.vGaussian____7 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="vGaussian__18") {
				this.vGaussian__18 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGaussian__19") {
				this.vGaussian__19 = (Gaussian[])value;
				return ;
			}
			if (variableName=="vGaussian____8") {
				this.vGaussian____8 = (Gaussian[][])value;
				return ;
			}
			if (variableName=="userData") {
				this.userData = (int[])value;
				return ;
			}
			if (variableName=="itemData") {
				this.itemData = (int[])value;
				return ;
			}
			if (variableName=="ratingData") {
				this.ratingData = (bool[][])value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Update all marginals, by iterating message-passing an additional number of times</summary>
		/// <param name="additionalIterations">The number of iterations that should be executed, starting from the current message state.  Messages are not reset, even if observed values have changed.</param>
		public void Update(int additionalIterations)
		{
			this.Execute(checked(this.numberOfIterationsDone+additionalIterations), false);
		}

		/// <summary>
		/// Returns the marginal distribution for 'userBias' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionStructArray<Gaussian,double> UserBiasMarginal()
		{
			return this.userBias_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userData' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int[]> UserDataMarginal()
		{
			return this.userData_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userThresholds' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserThresholdsMarginal()
		{
			return this.userThresholds_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'userTraits' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<DistributionStructArray<Gaussian,double>,double[]> UserTraitsMarginal()
		{
			return this.userTraits_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____6' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____6Marginal()
		{
			return this.vGaussian____6_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____7' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____7Marginal()
		{
			return this.vGaussian____7_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian____8' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[][]> VGaussian____8Marginal()
		{
			return this.vGaussian____8_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__18' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__18Marginal()
		{
			return this.vGaussian__18_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vGaussian__19' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<Gaussian[]> VGaussian__19Marginal()
		{
			return this.vGaussian__19_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vint26' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public PointMass<int> Vint26Marginal()
		{
			return this.vint26_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
